file C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS

file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\Gen4-uLCD-35DCT-CLB.fnc

000001  000001  #platform "Gen4-uLCD-35DCT-CLB"
000002  000001  #platform "Gen4-uLCD-35DCT-CLB"
000003  000008  */
000004  000009      #constant Gen4_ULCD_35DCT_CLB_DIABLO16_GFX
000005  000009      #constant Gen4_ULCD_35DCT_CLB_DIABLO16_GFX
000006  000010        
000007  000011      #IFNOT EXISTS DIABLO16_GFX2_FUNCTIONS
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\Diablo16_Functions.fnc

000008  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000009  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000010  000001        
000011  000002  // Common inheritance for Diablo16 platforms
000012  000003        
000013  000004  //#constant ULCD_32PT_DIABLO16_GFX
000014  000005        
000015  000006        
000016  000007  // define the compiler dummy preambles
000017  000008  #constant LOCAL $//
000018  000008  #constant LOCAL $//
000019  000009  #constant EXTERN $ /**/
000020  000009  #constant EXTERN $ /**/
000021  000010        
000022  000011  #CONST
000023  000020  #END
000024  000021        
000025  000022  #CONST
000026  000038  #END
000027  000039        
000028  000040        
000029  000041        
000030  000042        
000031  000047  */
000032  000048        
000033  000049        
000034  000050  //------------------------------------------------------------------//
000035  000051  //     EVE  miscellaneous functions                                 //
000036  000052  //------------------------------------------------------------------//
000037  000053        
000038  000054  func to("device"), 0;                // output device redirection
000039  000055  // Syntax: to(outstream);
000040  000056  // Usage : to(APPEND); putstr("TWO ");
000041  000057  // Notes : outstream: A variable or constant specifying destination for putch, putstr, putnum and print functions.
000042  000058  //     :
000043  000059  //     : to() sends the printed output to destinations other than the screen. Normally, print just
000044  000060  //     : sends its output to the display in TEXT mode which is the default, however, the output from
000045  000061  //     : print can be sent to COM0, and MDA (media) 'streams'. The to(...) function can also stream
000046  000062  //     : to a memory array . Note that once the to(...) function has taken effect, the stream reverts
000047  000063  //     : back to the default stream which is TEXT as soon as putch, putstr, putnum or print has
000048  000064  //     : completed its action. The APPEND argument is used to send the printed output to the same
000049  000065  //     : place as the previous redirection. This is most useful for building string arrays, or adding
000050  000066  //     : sequential data to a media stream.
000051  000067  //     :
000052  000068  //     : Predefined Name Constant    putch(), putstr(), putnum(), print() redirection
000053  000069  //     : APPEND         0x0000      Output is directed to the same stream that was previously assigned. Output is
000054  000070  //     :                            appended to user memory if previous redirection was to an array.
000055  000071  //     : COM0           0xFF04      Output is redirected to the COM (serial) port.
000056  000072  //     : TEXT           0xFF08      Output is directed to the screen (default).
000057  000073  //     : MDA            0xFF10      Output is directed to the SD or FLASH media.
000058  000074  //     : I2C1           0xF820      Output is directed to the I2C1 port.
000059  000075  //     : memory pointer             Output is redirect to the memory pointer argument, eg to(myarray); print("HELLO");
000060  000076        
000061  000077  //------------------------------------------------------------------//
000062  000078  // to(..) redirection constants            //
000063  000079  //------------------------------------------------------------------//
000064  000080  #CONST
000065  000093  #END
000066  000094        
000067  000095        
000068  000096  func putch("char"), 0;                // write single char to current output device
000069  000097  // Syntax    : putch("char");
000070  000098  // Usage     : putch("A");
000071  000099  // Notes     : prints single characters to the current output stream, usually the
000072  000100  //           : display unless redirected with the ‘to’ redirection function.
000073  000101  //         : The arguments can be a variable, array element, expression or constant.
000074  000102        
000075  000103        
000076  000104  func putchXY("xpos", "ypos", "char"), 0;
000077  000105  // Syntax  : putchXY(x, y, '0x41'),
000078  000106  // Usage   : putchXY(100, 100, "HELLO");
000079  000107  // Notes   : Print a single character at position x, y.
000080  000108  //         : Char may be a constant or variable.
000081  000109  // Returns : nothing.
000082  000110        
000083  000111  func putstrXY("xpos", "ypos", "string"), 0;
000084  000112  // Syntax  : putstrXY(x, y, "string"),
000085  000113  // Usage   : putstrXY(100, 100, "HELLO");
000086  000114  // Notes   : Print a string at position x, y
000087  000115  //         : "String" may be a string constant, or pointer to a word aligned string.
000088  000116  // Returns : nothing.
000089  000117        
000090  000118        
000091  000119  func putstrCentred("xc", "yc", "string"), 0;
000092  000120  // Syntax  : putstrCentred(x, y, "string"),
000093  000121  // Usage   : putstrCentred(100, 100, "HELLO");
000094  000122  // Notes   : Print a string centred at position x, y
000095  000123  //         : "String" may be a string constant, or pointer to a word aligned string.
000096  000124  // Returns : nothing.
000097  000125        
000098  000126        
000099  000127  func pause("milliseconds"), 0;            // blocking delay
000100  000128  // Syntax: pause(milliseconds);
000101  000129  // Usage : pause(1000);                //pause for 1 second
000102  000130  // Notes : Pause for a number of milli second.Maximum delay could be 65535 milli seconds
000103  000131        
000104  000132        
000105  000133  func putnum("arg1","arg2"), 1;            // print number to current output device
000106  000134  // Syntax: putnum(format, value);
000107  000135  // Usage : var := putnum(HEX, val);
000108  000136  // Notes : prints a 16bit number in various formats to the current output stream, usually the display.
000109  000137  //     : Format: A constant that specifies the number format
000110  000138  //     : Value : The number to be printed
000111  000139  //     : (      DECIMAL   )    (   UNSIGNED DECIMAL )    (    HEX         )     (    BINARY          )
000112  000140  //     : DEC     DECZ     DECZB     UDEC     UDECZ     UDECZB     HEX     HEXZ     HEXZB     BIN     BINZ     BINZB
000113  000141  //     : DEC1 DEC1Z     DEC1ZB     UDEC1     UDEC1Z     UDEC1ZB HEX1     HEX1Z     HEX1ZB     BIN1     BIN1Z     BIN1ZB
000114  000142  //     : DEC2 DEC2Z     DEC2ZB     UDEC2     UDEC2Z     UDEC2ZB HEX2     HEX2Z     HEX1ZB     BIN2     BIN2Z     BIN2ZB
000115  000143  //     : DEC3 DEC3Z     DEC3ZB     UDEC3     UDEC3Z     UDEC3ZB HEX3     HEX3Z     HEX1ZB     BIN3     BIN3Z     BIN3ZB
000116  000144  //     : DEC4 DEC4Z     DEC4ZB     UDEC4     UDEC4Z     UDEC4ZB HEX4     HEX4Z     HEX1ZB     BIN4     BIN4Z     BIN4ZB
000117  000145  //     : DEC5 DEC5Z     DEC5ZB     UDEC5     UDEC5Z     UDEC5ZB             BIN5     BIN5Z     BIN5ZB
000118  000146  //     :                                     BIN6     BIN6Z     BIN6ZB
000119  000147  //     :                                     BIN7     BIN7Z     BIN7ZB
000120  000148  //     :                                     BIN8     BIN8Z     BIN8ZB
000121  000149  //     :                                     BIN9     BIN9Z     BIN9ZB
000122  000150  //     :                                     BIN10     BIN10Z     BIN10ZB
000123  000151  //     :                                     BIN11     BIN11Z     BIN11ZB
000124  000152  //     :                                     BIN12     BIN12Z     BIN12ZB
000125  000153  //     :                                     BIN13     BIN13Z     BIN13ZB
000126  000154  //     :                                     BIN14     BIN14Z     BIN14ZB
000127  000155  //     :                                     BIN15     BIN15Z     BIN15ZB
000128  000156  //     :                                     BIN16     BIN16Z     BIN16ZB
000129  000157  //     : field: Returns the the default width of the numeric field (digit count), usually ignored.
000130  000158  //     : bit 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
000131  000159  //     : | | | | \___ ___/ \__ __/ \_____ _____/
000132  000160  //     : | | | | V V V
000133  000161  //     : | | | | | | |
000134  000162  //     : | | | | | |
000135  000163  //     : | | | | (nb 0 = 16) | |____BASE (usually 2,10 or 16)
000136  000164  //     : | | | | digit count |
000137  000165  //     : | | | | |___reserved (not used on GOLDELOX)
000138  000166  //     : | | | |
000139  000167  //     : | | | |
000140  000168  //     : | | | |
000141  000169  //     : | | | |
000142  000170  //     : | | | |
000143  000171  //     : | | | |______ 1 = leading zeros included
000144  000172  //     : | | | 0 = leading zeros suppressed
000145  000173  //     : | | |
000146  000174  //     : | | |
000147  000175  //     : | | |_______ 1 = leading zero blanking
000148  000176  //     : | |
000149  000177  //     : | |_____ sign bit (0 = signed, 1 = unsigned)
000150  000178  //     : |
000151  000179  //     : |______ 1 = space before unsigned number
000152  000180        
000153  000181        
000154  000182  func __translate("arg1","arg2","arg3","arg4"), 1; // list translator (*** internal compiler use only, not usable)
000155  000183        
000156  000184        
000157  000185  func putstr("string"), 1;                         // print var (word) aligned string to current output device
000158  000186  // Syntax: putstr(pointer);
000159  000187  // Usage : putstr("HELLO\n");
000160  000188  // Notes : putstr prints a string to the current output stream, usually the display. The argument can be
000161  000189  //       : a string constant, a word aligned pointer to a string, a pointer to an array, or a pointer to
000162  000190  //       : a data statement. Note that string constants and data statement pointers are byte aligned.
000163  000191  //       : The output of putstr can be redirected to the communications port, the media, or memory
000164  000192  //       : using the to(...); function.
000165  000193  //       : A string constant is automatically terminated with a zero.
000166  000194  //       : A string in a data statement is not automatically terminated with a zero.
000167  000195  //       : All variables in 4DGL are 16bit, if an array is used for holding 8 bit characters, each array
000168  000196  //       : element packs 1 or 2 characters.
000169  000197        
000170  000198        
000171  000199  func strlen("varAddress"), 1;                   // return length of a var (word) aligned string in character units
000172  000200  // Syntax: strlen("varAddress);
000173  000201  // Usage : strlen("HELLO\n");
000174  000202  // Notes : gives the length of a string that is packed into regular var array
000175  000203  //       : Use str_Length(ptr)  for string pointer mode
000176  000204        
000177  000205        
000178  000206  func charwidth("char"), 1;
000179  000207  // Syntax  : charwidth(char);
000180  000208  // Usage   : wid := charwidth('W');
000181  000209  // Notes   : calculates width of a character in pixel units.
000182  000210  //         : 'char' may be a constant or variable.
000183  000211  // Returns : Width of character in pixel units.
000184  000212        
000185  000213        
000186  000214  func charheight("char"), 1;
000187  000215  // Syntax  : charheight(char);
000188  000216  // Usage   : ht := charheight('0x41');
000189  000217  // Notes   : Calculates height of a character in pixel units.
000190  000218  //         : 'char' may be a constant or variable.
000191  000219  // Returns : Height of character in pixel units.
000192  000220        
000193  000221        
000194  000222  func strwidth("pointer"), 1;
000195  000223  // Syntax  : strwidth(ptr);
000196  000224  // Usage   : x := strwidth("HELLO");
000197  000225  // Notes   : returns width of a string in pixel units.
000198  000226  //         : 'pointer' may be a constant or pointer to word aligned variable
000199  000227  // Returns : Width of string in pixel units, can be multi line.
000200  000228        
000201  000229        
000202  000230  func strheight(), 1;
000203  000231  // Syntax  : strheight();
000204  000232  // Usage   : h := strheight();
000205  000233  // Notes   : calculates height of a string in pixel units (after a call to strwidth );
000206  000234  //         : pointer may be a constant or pointer to word aligned variable
000207  000235  // Returns : Height of string in pixel units, can be multi line.
000208  000236        
000209  000237        
000210  000238  func unicode_page("charbeg","charend","charoffset"), 1;
000211  000239  // Syntax: unicode_page("charbeg","charend","charoffset");
000212  000240  // Usage : eg:  F_Traditional_0x20_0xFF
000213  000241  // Notes : After selecting a unicode image control with txt_FontID,
000214  000242  //       : this function is called to set the required font within the
000215  000243  //       : unicode set. The file "Unicode.inc" contains wrappers for
000216  000244  //       : this function, and it is not normally called directly.
000217  000245  //       : Returns count of characters in the set.
000218  000246  //       : Refer to "Unicode.inc" for further information.
000219  000247        
000220  000248        
000221  000249  //------------------------------------------------------------------//
000222  000250  //          Text Related Functions                                  //
000223  000251  //------------------------------------------------------------------//
000224  000252        
000225  000253  func txt_MoveCursor("line", "column"), 0;
000226  000254  // Syntax: txt_SetCursor(line, column);
000227  000255  // Usage : txt_SetCursor(arg1, arg2);
000228  000256  // Notes : Moves the text Cursor to a new screen position set by
000229  000257  //       : line,column parameters.
000230  000258        
000231  000259  func txt_Set("function", "value"), 0;
000232  000260  // Syntax: txt_Set(function, value);
000233  000261  // Usage : txt_Set(arg1, arg2);
000234  000262  // Returns : Original value before the change
000235  000263  // Notes : Sets various text related parameters used by other functions
000236  000264  //       : This allows the features to be set programatically with a
000237  000265  //       : single function call.It is strongly recommended to use the
000238  000266  //       : pre-defined constants rather than the mode numbers.
000239  000267  //       : NB:- It is often required to be able to set text
000240  000268  //       : functions with a single function call for graphics engine
000241  000269  //       : related functions, however, there is a complete set of single parameter
000242  000270  //       : shortcut functions that have exactly the same function as
000243  000271  //       : each of the txt_Set modes and saves 1 parameter / uses less memory
000244  000272  //       :
000245  000273  //       : txt_Set(TEXT_COLOUR, colour);        // function 0, TEXT_COLOUR, default colour = LIME
000246  000274  //       : txt_Set(TEXT_HIGHLIGHT, colour);     // function 1, TEXT_HIGHLIGHT)
000247  000275  //       : txt_Set(FONT_ID, fontNumer);         // function 2, FONT_ID)
000248  000276  //       : txt_Set(TEXT_WIDTH, multiplier);     // function 3, TEXT_WIDTH)
000249  000277  //       : txt_Set(TEXT_HEIGHT, multiplier);    // function 4, TEXT_HEIGHT)
000250  000278  //       : txt_Set(TEXT_XGAP, pixels);          // function 5, TEXT_XGAP)
000251  000279  //       : txt_Set(TEXT_YGAP, pixels);          // function 6, TEXT_YGAP)
000252  000280  //       : txt_Set(TEXT_PRINTDELAY, msecs);     // function 7, TEXT_PRINTDELAY)
000253  000281  //       : txt_Set(TEXT_OPACITY, value);        // function 8, TEXT_OPACITY)
000254  000282  //       : txt_Set(TEXT_BOLD, boldness);        // function 9, TEXT_BOLD)
000255  000283  //       : txt_Set(TEXT_ITALIC, slope);         // function 10, TEXT_ITALIC)
000256  000284  //       : txt_Set(TEXT_INVERSE, onoff);        // function 11, TEXT_INVERSE)
000257  000285  //       : txt_Set(TEXT_UNDERLINED, onoff);     // function 12, TEXT_UNDERLINED)
000258  000286  //       : txt_Set(TEXT_ATTRIBUTES, combine);   // function 13, TEXT_ATTRIBUTES)
000259  000287  //       : txt_Set(TEXT_WRAP, column);          // function 14, TEXT_WRAP)
000260  000288  //       : txt_Set(TEXT_ANGLE , degrees);       // function 15, TEXT_ANGLE)
000261  000289  //       :
000262  000290  //       : txt_Set(TEXT_COLOUR, colour);
000263  000291  //       : mode = TEXT_COLOUR (function 0)
000264  000292  //       : txt_Set(TEXT_COLOUR, value);
000265  000293  //       : value = 0 to 0xFFFF, Black to White
000266  000294  //       : Sets the Text colour for the display
000267  000295  //       : Default = LIME.
000268  000296  //       :
000269  000297  //       : mode = TEXT_HIGHLIGHT (function 1)
000270  000298  //       : txt_Set(TEXT_HIGHLIGHT, value);
000271  000299  //       : value = 0 to 0xFFFF, Black to White
000272  000300  //       : Sets the Text background colour for the display. Effective
000273  000301  //       : when text mode is Opaque.
000274  000302  //       : Default = BLACK.
000275  000303  //       :
000276  000304  //       : mode = FONT_ID (function 2)
000277  000305  //       : txt_Set(FONT_ID, value);
000278  000306  //       : value = FONT1 to FONT11 for internal fonts
000279  000307  //       : else this value is the name of a font included
000280  000308  //       : in a users program in a data statement.
000281  000309  //       : Default = FONT SIZE 3.
000282  000310  //       :
000283  000311  //       : mode = TEXT_WIDTH  (function 3)
000284  000312  //       : txt_Set(TEXT_WIDTH, value);
000285  000313  //       : value = 1 to 16
000286  000314  //       : Sets the Text Width multiplier
000287  000315  //       : text will be printed magnified horizontally
000288  000316  //       : by this factor, Default = 1.
000289  000317  //       :
000290  000318  //       : mode = TEXT_HEIGHT  (function 4)
000291  000319  //       : txt_Set(TEXT_HEIGHT, value);
000292  000320  //       : value = 1 to 16
000293  000321  //       : Sets the Text Height multiplier
000294  000322  //       : text will be printed magnified vertically
000295  000323  //       : by this factor, Default = 1.
000296  000324  //       :
000297  000325  //       : mode = TEXT_XGAP  (function 5)
000298  000326  //       : txt_Set(TEXT_XGAP, value);
000299  000327  //       : value = 1 to 32
000300  000328  //       : Sets the horizontal gap between characters
000301  000329  //       : The gap is in pixel units, Default = 0
000302  000330  //       :
000303  000331  //       : mode = TEXT_YGAP  (function 6)
000304  000332  //       : txt_Set(TEXT_YGAP, value);
000305  000333  //       : value = 1 to 32
000306  000334  //       : Sets the vertical gap below characters
000307  000335  //       : The gap is in pixel units, Default = 0
000308  000336  //       :
000309  000337  //       : mode = TEXT_PRINTDELAY  (function 7) DEPRECATED
000310  000338  //       : txt_Set(TEXT_PRINTDELAY, value);
000311  000339  //       : value = 0 to 255
000312  000340  //       : Sets the delay time (in ms) during character
000313  000341  //       : printing to give a 'teletype' like effect.
000314  000342  //       : Often used to attract attention to a string
000315  000343  //       : being printed which can often be missed if
000316  000344  //       : just suddenly appearing or changing.
000317  000345  //       : Default = 0 ms.
000318  000346  //       :
000319  000347  //       : mode = TEXT_OPACITY (function 8)
000320  000348  //       : txt_Set(TEXT_OPACITY, value);
000321  000349  //       : value = TRANSPARENT (0) = Text Trasparent
000322  000350  //       : value = OPAQUE (1) = Text Opaque
000323  000351  //       : Sets the Opacity/Transparency of the text
000324  000352  //       : Default = 0 or TRANSPARENT
000325  000353  //       :
000326  000354  //       : mode = TEXT_BOLD (function 9)
000327  000355  //       : txt_Set(TEXT_BOLD, value);
000328  000356  //       : value = dont care
000329  000357  //       : Sets Bold Text mode for the next string or char
000330  000358  //       : The feature automatically resets after printing
000331  000359  //       : using putstr or print has completed
000332  000360  //       :
000333  000361  //       : mode = TEXT_ITALIC (function10)
000334  000362  //       : txt_Set(TEXT_ITALIC, value);
000335  000363  //       : value = dont care
000336  000364  //       : Sets Italic Text mode for the next string or char
000337  000365  //       : The feature automatically resets after printing
000338  000366  //       : using putstr or print has completed
000339  000367        
000340  000368  //       : mode = TEXT_INVERSE (function 11)
000341  000369  //       : txt_Set(TEXT_INVERSE, value);
000342  000370  //       : value = dont care
000343  000371  //       : Sets Inverse Text mode for the next string or char
000344  000372  //       : The feature automatically resets after printing
000345  000373  //       : using putstr or print has completed
000346  000374  //       :
000347  000375  //       : mode = TEXT_UNDERLINED (function 12)
000348  000376  //       : txt_Set(TEXT_UNDERLINED, value);
000349  000377  //       : value = dont care
000350  000378  //       : Sets Underlined Text mode for the next string or char
000351  000379  //       : The feature automatically resets after printing
000352  000380  //       : using putstr or print has completed
000353  000381  //       :
000354  000382  //       : mode = TEXT_ATTRIBUTES (function 13)
000355  000383  //       : txt_Set(TEXT_ATTRIBUTES, value);
000356  000384  //       : value = bits are defined as:
000357  000385  //       :  BOLD        16          // TEXT_ATTRIBUTES bold text (auto reset)
000358  000386  //       :  ITALIC      32          // TEXT_ATTRIBUTES italic text (auto reset)
000359  000387  //       :  INVERSE     64          // TEXT_ATTRIBUTES inverse text (auto reset)
000360  000388  //       :  UNDERLINED  128         // TEXT_ATTRIBUTES underlined text (auto reset)
000361  000389  //       : Allows a combination of text attributes to be defined together
000362  000390  //       : by 'or'ing the bits together.
000363  000391  //       : Example: txt_Set(TEXT_ATTRIBUTES, BOLD | INVERSE); // bold + inverse
000364  000392  //       : The feature automatically resets after printing
000365  000393  //       : using putstr or print has completed.
000366  000394  //       : Bits 0-3 and 8-15 are reserved for future attributes.
000367  000395  //       :
000368  000396  //       : mode = TEXT_WRAP (function 14)
000369  000397  //       : txt_Set(TEXT_WRAP , value);
000370  000398  //       : Sets the position where text wrap will occur
000371  000399  //       : The feature automatically resets when screen
000372  000400  //       : mode is changed. If the value is set to 0,
000373  000401  //       : text wrap is turned off.
000374  000402  //       : of the current screen. Default value is 0
000375  000403  // Notes : The value is in pixel units.
000376  000404  //       :
000377  000405  //       : mode = TEXT_ANGLE (function 15)
000378  000406  //       : txt_Set(TEXT_ANGLE , value);
000379  000407  //       : Sets the angle of plotted fonts
000380  000408  // Notes : The angle is in degrees.
000381  000409  //       :
000382  000410        
000383  000411  //------------------------------------------------------------------------------
000384  000412  //txt_Set() related constants
000385  000413  //------------------------------------------------------------------------------
000386  000414  #CONST
000387  000433  #END
000388  000434        
000389  000435  //------------------------------------------------------------------------------
000390  000436  //txt_Set() related arguments
000391  000437  //------------------------------------------------------------------------------
000392  000438  #CONST
000393  000464  #END
000394  000465        
000395  000466        
000396  000467  //=====================================================//
000397  000468  // Single parameter short-cuts                         //
000398  000469  // for the txt_Set functions                           //
000399  000470  // These functions return the existing value before    //
000400  000471  // the change is made.                                 //
000401  000472  //=====================================================//
000402  000473  func txt_FGcolour("colour"), 1;             // 0  text foreground colour
000403  000474  func txt_BGcolour("colour"), 1;             // 1  text background colour
000404  000475  func txt_FontID("id"), 1;                   // 2  text font ID (0 = system font)
000405  000476  func txt_Width("multiplier"), 1;            // 3  text width multiplier
000406  000477  func txt_Height("multiplier"), 1;           // 4  text height multiplier
000407  000478  func txt_Xgap("pixelcount"), 1;             // 5  text gap between characters
000408  000479  func txt_Ygap("pixelcount"), 1;             // 6  text gap between lines
000409  000480  func txt_Delay("millisecs"), 1;             // 7  text printing delay factor
000410  000481  func txt_Opacity("mode"), 1;                // 8  text OPAQUE or TRANSPARENT
000411  000482  func txt_Bold("mode"), 1;                   // 9  text bold ON/OFF
000412  000483  func txt_Italic("mode"), 1;                 // 10 text italic ON/OFF
000413  000484  func txt_Inverse("mode"), 1;                // 11 text inverse ON/OFF
000414  000485  func txt_Underline("mode"), 1;              // 12 text underline ON/OFF
000415  000486  func txt_Attributes("value"), 1;            // 13 text combined bold|italic|inverse|underline
000416  000487  func txt_Wrap("value"), 1;                  // 14 text set text wrap position
000417  000488  func txt_Angle("value"), 1;                 // 15 text set angle of plotted font
000418  000489        
000419  000490        
000420  000491        
000421  000492  //------------------------------------------------------------------//
000422  000493  // Memory Access Functions                                          //
000423  000494  //------------------------------------------------------------------//
000424  000495                                                  //
000425  000496  func peekW("address"), 1;                       // read a word from system memory
000426  000497  func pokeW("address", "wordvalue"), 0;          // write a word to system memory
000427  000498  // refer to address map of internal variables   //
000428  000499        
000429  000500        
000430  000501  //------------------------------------------------------------------//
000431  000502  //        CTYPE Function Prototypes
000432  000503  //------------------------------------------------------------------//
000433  000504        
000434  000505  func isdigit("char"), 1;    //Returns a 1 if the character is an ascii digit else returns a 0
000435  000506  // Syntax: isdigit("char");
000436  000507  // Usage : Var := isdigit(ch);
000437  000508  // Notes : char specifies the ascii character for the test
000438  000509  //     : 0 : char is not an ascii digit.
000439  000510  //     : 1 : char is an ascii digit..
000440  000511  //     : Valid range is "0123456789"
000441  000512        
000442  000513  func isxdigit("char"), 1;    //Returns a 1 if the character is an ascii hexadecimal digit else returns a 0
000443  000514  // Syntax: isxdigit("char");
000444  000515  // Usage : Var := isxdigit(ch);
000445  000516  // Notes : char specifies the ascii character for the test
000446  000517  //     : 0 : char is not an ascii hexadecimal digit.
000447  000518  //     : 1 : char is an ascii hexadecimal digit..
000448  000519  //     : Valid range is "0123456789ABCDEF"
000449  000520        
000450  000521  func isupper("char"), 1;    //Returns a 1 if the character is an ascii upper case letter else returns a 0
000451  000522  // Syntax: isupper("char");
000452  000523  // Usage : Var := isupper(ch);
000453  000524  // Notes : char specifies the ascii character for the test
000454  000525  //     : 0 : char is not an ascii upper-case letter.
000455  000526  //     : 1 : char is an ascii upper-case letter.
000456  000527  //     : Valid range is "ABCD....WXYZ"
000457  000528        
000458  000529  func islower("char"), 1;    //Returns a 1 if the character is an ascii lower case letter else returns a 0
000459  000530  // Syntax: islower("char");
000460  000531  // Usage : Var := islower(ch);
000461  000532  // Notes : char specifies the ascii character for the test
000462  000533  //     : 0 : char is not an ascii lower-case letter.
000463  000534  //     : 1 : char is an ascii lower-case letter.
000464  000535  //     : Valid range is "abcd....wxyz"
000465  000536        
000466  000537  func isalpha("char"), 1;    //Returns a 1 if the character is an ascii lower or upper case letter else returns a 0
000467  000538  // Syntax: isalpha("char");
000468  000539  // Usage : Var := isalpha(ch);
000469  000540  // Notes : char specifies the ascii character for the test
000470  000541  //     : 0 : char is not an ascii lower or upper case letter.
000471  000542  //     : 1 : char is an ascii lower or upper case letter.
000472  000543  //     : Valid range is "ABCD...XYZ", "abcd....wxyz"
000473  000544        
000474  000545  func isalnum("char"), 1;    //Returns a 1 if the character is an ascii alpha numeric else returns a 0
000475  000546  // Syntax: isalnum("char");
000476  000547  // Usage : Var := isalnum(ch);
000477  000548  // Notes : char specifies the ascii character for the test
000478  000549  //     : 0 : char is not an ascii alphanumeric character.
000479  000550  //     : 1 : char is an ascii alphanumeric character.
000480  000551  //     : Valid range is "ABCD...XYZ", "abcd....wxyz", "0123456789"
000481  000552        
000482  000553  func isprint("char"), 1;    //Returns a 1 if the character is a printible ascii char else returns a 0
000483  000554  // Syntax: isprint("char");
000484  000555  // Usage : Var := isprint(ch);
000485  000556  // Notes : char specifies the ascii character for the test
000486  000557  //     : 0 : char is not a printable ascii character.
000487  000558  //     : 1 : char is a printable ascii character.
000488  000559  //     : Valid range is "0x20...0x7F"
000489  000560        
000490  000561  func isspace("char"), 1;    //Returns a 1 if the character is any one of the space type chars else returns a 0
000491  000562  // Syntax: isspace("char");
000492  000563  // Usage : Var := isspace(ch);
000493  000564  // Notes : char specifies the ascii character for the test
000494  000565  //     : 0 : char is not a space type character.
000495  000566  //     : 1 : char is a space type character.
000496  000567  //     : Valid range is space, formfeed, newline, carriage return, tab, vertical tab
000497  000568        
000498  000569  //unformatted
000499  000570  func iswhite("char"), 1;    //
000500  000571  // Syntax: iswhite("char");
000501  000572  // Usage : Var := iswhite(ch);
000502  000573  // Notes : char specifies the ascii character for the test
000503  000574  //     : 0 : char is not a space or tab character.
000504  000575  //     : 1 : char is not a space or tab character.
000505  000576  //     : Valid range is space or tab
000506  000577        
000507  000578  func toupper("char"), 1; //if character is lower case it returns the upper case equivalent else returns the passed char
000508  000579  // Syntax: toupper("char");
000509  000580  // Usage : Var := toupper(ch);
000510  000581  // Notes : char specifies the ascii character for the test
000511  000582  //     : "ABCD....XYZ" : if character is a lower case letter.
000512  000583  //     : char : if character is not a lower case letter.
000513  000584  //     : Valid range is "abcd....wxyz"
000514  000585        
000515  000586  func tolower("char"), 1; //if character is upper case it returns the lower case equivalent else returns the passed char
000516  000587  // Syntax: tolower("char");
000517  000588  // Usage : Var := tolower(ch);
000518  000589  // Notes : char specifies the ascii character for the test
000519  000590  //     : "abcd....xyz" : if character is an upper case letter.
000520  000591  //     : char : if character is not an upper case letter.
000521  000592  //     : Valid range is "ABCD....WXYZ"
000522  000593        
000523  000594  func LObyte("var"), 1;        //Returns the lower byte (lower 8 bits) of a 16 bit variable.
000524  000595  // Syntax: LObyte(var);
000525  000596  // Usage : myVar := LObyte(myvar2);
000526  000597  // Notes : var specifies the user variable
000527  000598  //     : Returns the lower byte (lower 8 bits) of a 16 bit variable
000528  000599        
000529  000600  func HIbyte("var"), 1;        //Returns the High byte (upper 8 bits) of a 16 bit variable.
000530  000601  // Syntax: HIbyte(var);
000531  000602  // Usage : myVar := HIbyte(myvar2);
000532  000603  // Notes : var specifies the user variable
000533  000604  //     : Returns the high byte (upper 8 bits) of a 16 bit variable
000534  000605        
000535  000606        
000536  000607  func ByteSwap("var"), 1;    //Returns the swapped upper and lower bytes of a 16 bit variable.
000537  000608  // Syntax: ByteSwap(var);
000538  000609  // Usage : myVar := ByteSwap(myvar2);
000539  000610  // Notes : var specifies the user variable
000540  000611  //     : Returns the endian swapped value of a 16 bit variable
000541  000612        
000542  000613        
000543  000614  func NybleSwap("var"), 1;    //Returns the swapped lower bytes nybles, upper byte retained.
000544  000615  // Syntax: NybleSwap(var);
000545  000616  // Usage : myVar := NybleSwap(myvar2);
000546  000617  // Notes : var specifies the user variable
000547  000618  //     : Returns the 16 bit variable with swapped lower nybles
000548  000619        
000549  000620  func putnumXY("xpos", "ypos", "arg1","arg2"), 1;            // print number at the specified position
000550  000621  // Syntax: putnumXY(x, y, format, value);
000551  000622  // Usage : var := putnumXY(100, 100, HEX, val);
000552  000623  // Notes : prints a 16bit number in various formats at the specified XY coordinates.
000553  000624  //     : Format: A constant that specifies the number format
000554  000625  //     : Value : The number to be printed
000555  000626        
000556  000627  func txt_FontBank("flashbank", "address"), 1;               // use a font located in another bank
000557  000628  // Syntax: txt_FontBank(bank, offset);
000558  000629  // Usage : txt_FontBank(FLASHBANK_2, arg2);
000559  000630  // Returns : Current font before the change, or 0 if invalid or bank is protected
000560  000631  // Notes : Sets the current font to a font held in another bank
000561  000632        
000562  000633  //------------------------------------------------------------------//
000563  000634  // 16bit signed Math Functions                                      //
000564  000635  //------------------------------------------------------------------//
000565  000636                                                  //
000566  000637  func ABS("value"), 1;                           // return a positive number
000567  000638  // Syntax: ABS(value);
000568  000639  // Usage : var := ABS(arg);
000569  000640  // Notes : Returns the absolute value of an argument
000570  000641        
000571  000642  func MIN("value1", "value2"), 1;                // return the smaller of 2 numbers
000572  000643  // Syntax: MIN(value1, value2);
000573  000644  // Usage : var := MIN(arg1, arg2);
000574  000645  // Notes : Returns the minimum of 2 arguments
000575  000646        
000576  000647  func MAX("value1", "value2"), 1;                // return the larger of 2 numbers
000577  000648  // Syntax: MAX(value1, value2);
000578  000649  // Usage : var := MAX(arg1, arg2);
000579  000650  // Notes : Returns the maximum of 2 arguments
000580  000651        
000581  000652  func SWAP("&var", "&var"), 0;                   // swap 2 variables, arguments must point to variables
000582  000653  // Syntax: SWAP(&var1, &var2);
000583  000654  // Usage : SWAP(&var1, &var2);
000584  000655  // Notes : Swaps the contents of 2 variables or memory locations
000585  000656        
000586  000657  func SIN("angle"), 1;                           // return SIN of angle
000587  000658  // Syntax: SIN(angle);
000588  000659  // Usage : var := SIN(arg);
000589  000660  // Notes : Returns the sine in radians of an argument in degrees
000590  000661  //       : the returned value range is from 127 to -127. The real
000591  000662  //       : cosine values vary from 1.0 to -1.0 so appropriate
000592  000663  //       : scaling must be done in user code.
000593  000664        
000594  000665  func COS("angle"), 1;                           // return COS of angle
000595  000666  // Syntax: COS(angle);
000596  000667  // Usage : var := COS(arg);
000597  000668  // Notes : Returns the cosine in radians of an argument in degrees
000598  000669  //       : the returned value range is from 127 to -127. The real
000599  000670  //       : cosine values vary from 1.0 to -1.0 so appropriate
000600  000671  //       : scaling must be done in user code.
000601  000672        
000602  000673  func RAND(), 1;                                 // return a pseudo random number
000603  000674  // Syntax: RAND();
000604  000675  // Usage : var := RAND();
000605  000676  // Notes : Returns a random number between 0 and 0xFFFF.
000606  000677  //       : The random number generator must first be seeded
000607  000678  //       : by using the SEED(number) function.
000608  000679        
000609  000680  func RANDVAL("low", "high"), 1;                 // return a ranged pseudo random number
000610  000681  // Syntax: RANDVAL("low", "high");
000611  000682  // Usage : var := RANDVAL(low, high);
000612  000683  // Notes : Returns a random number between low and high limits
000613  000684  //       : such that low <= N < high
000614  000685  //       : The random number generator may first be seeded
000615  000686  //       : by using the SEED(number) function.
000616  000687  //       : RANDVAL is the equivalent of aggregate functions:-
000617  000688  //       :     myvar = ABS( (RAND()%(high-low)+low) );
000618  000689  //       : Note that the lower limit is inclusive, but the upper limit is exclusive.
000619  000690        
000620  000691  func SEED("number"), 0;                         // re-seed the pseudo random number generator
000621  000692  // Syntax: SEED(number);
000622  000693  // Usage : SEED(arg);
000623  000694  // Notes : Seeds the random number generator.
000624  000695        
000625  000696  func SQRT("number"), 1;                         // return square root of a number
000626  000697  // Syntax: SQRT(number);
000627  000698  // Usage : SQRT(arg);
000628  000699  // Notes : Returns the integer square root of a number.
000629  000700        
000630  000701  func OVF(), 1;                                  // returns upper 16bits of 32bit results
000631  000702  // Syntax: OVF();
000632  000703  // Usage : loWord := 0x2710 * 0x2710;           // (10000 * 10000 in hex format)
000633  000704  //       : hiWord := OVF();
000634  000705  // Notes : This function returns the high order 16 bits from certain math and shift functions..
000635  000706        
000636  000707  func CY(), 1;
000637  000708  // Syntax: CY();
000638  000709  // Usage : myvar := 0xFFF8 + 9;                 // result = 1
000639  000710  //       : print(myvar," "CY(),"\n");           // carry = 1
000640  000711  // Notes : This function returns the carry status of an
000641  000712  // unsigned overflow from any 16 or 32bit additions or sutractions.
000642  000713        
000643  000714  func EVE_SP(), 1;
000644  000715  // Syntax: EVE_SP();
000645  000716  // Usage : eg:  print(EVE_SP());
000646  000717  // Notes : Used for debugging to assess the current stack level,
000647  000718  //       : mainly for checking stack leaks, see example EVE_SP.4dg
000648  000719        
000649  000720  func EVE_SSIZE(), 1;
000650  000721  // Syntax: EVE_SSIZE();
000651  000722  // Usage : eg:  print(EVE_SSIZE());
000652  000723  // Notes : Used to get the stack size,
000653  000724  //       : mainly for debugging purposes, EVE_SP.4dg
000654  000725        
000655  000726        
000656  000727  //------------------------------------------------------------------//
000657  000728  //
000658  000729  //------------------------------------------------------------------//
000659  000730  func mem_ArrayOp1("memarray", "count", "op", "value"), 0;                     // single array functions
000660  000731        
000661  000732        
000662  000733  // single word array operations
000663  000734  #CONST
000664  000755  #END
000665  000756        
000666  000757        
000667  000758  func mem_ArrayOp2("memarray1", "memarray2", "count", "op", "value"), 0;         // dual array functions
000668  000759        
000669  000760  // dual word array operations
000670  000761  #CONST
000671  000773  #END
000672  000774        
000673  000775        
000674  000776  func __reserved3(), 0; // do not remove
000675  000777  func __reserved4(), 0; // do not remove
000676  000778        
000677  000779        
000678  000780  //------------------------------------------------------------------//
000679  000781  // unsigned long (32 bit) operations                                //
000680  000782  //------------------------------------------------------------------//
000681  000783        
000682  000784  func uadd_3232("res32", "val1", "val2"), 1;
000683  000785  // Syntax   : cmp_3232(res32, varA, varB);
000684  000786  // Input    : DWORD res32 points to optional result (or zero for compare)
000685  000787  //          : DWORD val1 points to 32bit augend
000686  000788  //          : DWORD val2 points to 32bit addend
000687  000789  // Usage    : var res32[2];
000688  000790  //          : res := cmp_3232(res32, val1, val2);
000689  000791  // Notes    : performs an unsigned addition of 2 x 32bit values
000690  000792  //          : placing the 32bit result in a 2 word array.
000691  000793  // Returns  : returns 1 on 32bit unsigned overflow (carry).
000692  000794  //          ; carry flag is also set on 32bit unsigned overflow
000693  000795  //          ; and can be read with the CY() function.
000694  000796        
000695  000797        
000696  000798  func usub_3232("res32", "val1", "val2"), 1;
000697  000799  // Syntax   : cmp_3232(res32, varA, varB);
000698  000800  // Input    : DWORD res32 points to optional result (or zero for compare)
000699  000801  //          : DWORD val1 points to first 32bit minuend
000700  000802  //          : DWORD val2 points to 32bit subtrahend
000701  000803  // Usage    : var res32[2];
000702  000804  //          : res := cmp_3232(res32, val1, val2);
000703  000805  // Notes    : performs an unsigned subtraction of 2 x 32bit values
000704  000806  //          : placing the 32bit result in a 2 word array.
000705  000807  // Returns  : returns 1 on 32bit unsigned overflow (borrow).
000706  000808  //          ; carry flag is also set on 32bit unsigned underflow
000707  000809  //          ; and can be read with the CY() function.
000708  000810        
000709  000811        
000710  000812  func umul_1616("&res32", "val1", "val2"), 1;
000711  000813  // Syntax   : umul_1616(&res32, varA, varB);
000712  000814  // Input    : DWORD result   points to 32bit result register.
000713  000815  //          : VAR   val1  16bit register or constant
000714  000816  //          : VAR   val2  16bit register or constant
000715  000817  // Usage    : var res32[2];
000716  000818  //          : umul_1616(&res32, myvar, 50000);
000717  000819  // Notes    : performs an unsigned multiply of 2 x 16bit values
000718  000820  //          : placing the 32bit result in a 2 word array.
000719  000821  // Returns  : the pointer to the 32bit result.
000720  000822  //          : carry and overflow are not affected.
000721  000823        
000722  000824        
000723  000825  func udiv_3232("res32", "val1", "val2"), 1;
000724  000826  // Syntax   : udiv_1616(res32, varA, varB);
000725  000827  // Input    : DWORD *result   points to 32bit result register.
000726  000828  //          : DWORD   val1  pointer to 32bit value (dividend)
000727  000829  //          : DWORD   val2  pointer to 32bit value (divisor)
000728  000830  // Usage    : var res32[2];
000729  000831  //          : umul_1616(res32, myvar, 50000);
000730  000832  // Notes    : performs an unsigned division of 2 x 32bit values
000731  000833  //          : placing the 32bit result in a 2 word array.
000732  000834  // Returns  : the pointer to the 32bit result.
000733  000835  //          : carry and overflow are not affected.
000734  000836        
000735  000837        
000736  000838  func ucmp_3232("val1", "val2"), 1;
000737  000839  // Syntax   : cmp_3232(varA, varB);
000738  000840  // Input    : DWORD val1 points to 32bit minuend
000739  000841  //          : DWORD val2 points to 32bit sutrahend
000740  000842  // Usage    : res := cmp_3232(val1, val2);
000741  000843  // Notes    : performs an unsigned comparison of 2 x 32bit values.
000742  000844  //          : The result of the subtraction is returned.
000743  000845  // Returns  : 0  if equal
000744  000846  //          : 1  if val1 > val2
000745  000847  //          : -1 if val1 < val2
000746  000848  //          : This function does not affect the carry flag.
000747  000849        
000748  000850  func __reserved5(), 0; // do not remove
000749  000851  func __reserved6(), 0; // do not remove
000750  000852        
000751  000853  //------------------------------------------------------------------//
000752  000854  // Floating point operations                                        //
000753  000855  // Note that source arguments may be a pointer to a float variable, //
000754  000856  // or a numeric text string.                                        //
000755  000857  // A string argument is converted at run-time by calling            //
000756  000858  // flt_Val for a string argument.                                   //
000757  000859  // Note that a float variable is a 2 word array, eg var myfloat[2]; //
000758  000860  //------------------------------------------------------------------//
000759  000861  func flt_VAL("fresult", "numstring"), 1;
000760  000862  // Syntax   : flt_VAL(float1, mystring);
000761  000863  // Input    : FLOAT  fresult  points to float result register
000762  000864  //          : numstring       a string constant or string variable
000763  000865  //          : that is holds valid floating point number.
000764  000866  // Usage    : var float1[2];
000765  000867  //          : flt_VAL(float1, "1.0594631");
000766  000868  // Notes    : The string argument can be a string constant, a pointer
000767  000869  //          : to a string variable, or a pointer to a data statement.
000768  000870  //          : The string may be a float, or a hex or binary integer value (no decimal point allowed).
000769  000871  //          : For hex or binary, the number is preceeded with 0x or 0b
000770  000872  // Returns  : the pointer to the float result.
000771  000873  //          : carry and overflow are not affected.
000772  000874        
000773  000875        
000774  000876  func flt_ITOF("fresult", "var16"), 1;
000775  000877  // Syntax   : flt_ITOF(resf, intval);
000776  000878  // Input    : FLOAT  fresult  points to float result register
000777  000879  //          : var16           a 16bit signed integer variable or string constant
000778  000880  // Usage    : var float1[2];
000779  000881  //          : var myvar := 30000;
000780  000882  //          : flt_VAL(float1, myvar);
000781  000883  // Notes    : Converts a 16bit signed integer value to a signed floating point number.
000782  000884  // Returns  : the pointer to the float result.
000783  000885        
000784  000886        
000785  000887  func flt_UITOF("fresult", "uvar16"), 1;
000786  000888  // Syntax   : flt_ITOF(resf, intval);
000787  000889  // Input    : FLOAT  fresult  points to float result register
000788  000890  //          : var16           a 16bit integer variable or constant (treated as unsigned)
000789  000891  // Usage    : var float1[2];
000790  000892  //          : var myuvar := 30000;
000791  000893  //          : flt_UITOF(float1, myuvar);
000792  000894  // Notes    : Converts a 16bit unsigned integer value to a positive floating point number.
000793  000895  // Returns  : the pointer to the float result.
000794  000896        
000795  000897  func flt_LTOF("fresult", "var32"), 1;
000796  000898  // Syntax   : flt_LTOF(resf, var32);
000797  000899  // Input    : FLOAT  fresult  points to float result register
000798  000900  //          : var32           points to a 32bit (long) signed variable or string constant
000799  000901  // Usage    : var float1[2];
000800  000902  //          : var mylong[2];
000801  000903  //          : flt_VAL(float1, mylong);
000802  000904  // Notes    : Converts a 32bit signed integer value to a signed floating point number.
000803  000905  // Returns  : the pointer to the float result.
000804  000906        
000805  000907        
000806  000908  func flt_ULTOF("fresult", "uvar32"), 1;
000807  000909  // Syntax   : flt_ITOF(resf, uvar32);
000808  000910  // Input    : FLOAT  fresult  points to float result register
000809  000911  //          : var32           points to a 32bit (unsigned long) unsigned variable or string constant
000810  000912  // Usage    : var float1[2];
000811  000913  //          : var myulong[2];
000812  000914  //          : flt_VAL(float1, myulong);
000813  000915  // Notes    : Converts a 32bit unsigned integer value to a positive floating point number.
000814  000916  // Returns  : the pointer to the float result.
000815  000917        
000816  000918        
000817  000919  func flt_PRINT("fvalue", "formatstring"), 1;
000818  000920  // Syntax   : flt_PRINT(resf, formatstr);
000819  000921  // Input    : FLOAT  fresult  points to float result register
000820  000922  //          : formatstring    zero, null string, of valid format string
000821  000923  // Usage    : var float1[2];
000822  000924  //          : flt_PRINT(float1, "");
000823  000925  // Notes    : The string argument can be a string constant, a pointer
000824  000926  //          : to a string variable, or a pointer to a data statement.
000825  000927  //          : If it is zero or an empty string, the number is
000826  000928  //          : automatically formatted for the best presentation.
000827  000929  //          : The format string is similar to the C language, but only
000828  000930  //          : a single '%' may be used to print a single variable.
000829  000931  // Returns  : zero if success.
000830  000932        
000831  000933        
000832  000934  func flt_ABS("result", "floatval"), 1;
000833  000935  // Syntax   : flt_ABS(&result, &fval);
000834  000936  // Input    : FLOAT  result   points to float result register
000835  000937  //          : numstring       a string that is a valid number
000836  000938  // Usage    : var float1[2];
000837  000939  //          : flt_VAL(float1, float1); // convert float1 to its ABS value
000838  000940  // Returns  : the pointer to the float result.
000839  000941  //          : carry and overflow are not affected.
000840  000942        
000841  000943        
000842  000944  func flt_ACOS("result", "floatval"), 1;
000843  000945  // Syntax   : flt_ACOS(result, fval);
000844  000946  // Input    : FLOAT  result (in radians) points to float result register
000845  000947  //          : FLOAT  floatval points to the float value to get arccos of
000846  000948  // Usage    : var float1[2];
000847  000949  //          : flt_ACOS(result, float1); // get the arccos of float1
000848  000950  // Notes    : the result is in radians.
000849  000951  // Returns  : the pointer to the float result.
000850  000952  //          : carry and overflow are not affected.
000851  000953        
000852  000954        
000853  000955  func flt_ASIN("result", "floatval"), 1;
000854  000956  // Syntax   : flt_ASIN(result, fval);
000855  000957  // Input    : FLOAT  result (in radians) points to float result register
000856  000958  //          : FLOAT  floatval points to the float value to get arcsin of
000857  000959  // Usage    : var float1[2];
000858  000960  //          : flt_ASIN(result, float1); // get the Arcsin of float1
000859  000961  // Notes    : the result is in radians.
000860  000962  // Returns  : the pointer to the float result.
000861  000963  //          : carry and overflow are not affected.
000862  000964        
000863  000965        
000864  000966  func flt_ATAN("result", "floatval"), 1;
000865  000967  // Syntax   : flt_ATAN(result, fval);
000866  000968  // Input    : FLOAT  result (in radians) points to float result register
000867  000969  //          : FLOAT  floatval points to the float value to get arctan of
000868  000970  // Usage    : var float1[2];
000869  000971  //          : flt_ATAN(result, float1); // get the Arctan of float1
000870  000972  // Notes    : the result is in radians.
000871  000973  // Returns  : the pointer to the float result.
000872  000974  //          : carry and overflow are not affected.
000873  000975        
000874  000976        
000875  000977  func flt_COS("result", "floatval"), 1;
000876  000978  // Syntax   : flt_COS(result, fval);
000877  000979  // Input    : FLOAT  result   points to float result register
000878  000980  //          : FLOAT  floatval (in radians) points to the float value to get Cos of
000879  000981  // Usage    : var float1[2];
000880  000982  //          : flt_COS(result, float1); // get the Cosine of float1
000881  000983  // Notes    : the result is in radians.
000882  000984  // Returns  : the pointer to the float result.
000883  000985  //          : carry and overflow are not affected.
000884  000986        
000885  000987        
000886  000988  func flt_EXP("result", "floatval"), 1;
000887  000989  // Syntax   : flt_EXP(result, fval);
000888  000990  // Input    : FLOAT  result   points to float result register
000889  000991  //          : FLOAT  floatval points to the float value to get Exponent of
000890  000992  // Usage    : var float1[2];
000891  000993  //          : flt_EXP(result, float1); // get the Exponent of float1
000892  000994  // Returns  : the pointer to the float result.
000893  000995  //          : carry and overflow are not affected.
000894  000996        
000895  000997        
000896  000998  func flt_CEIL("result", "floatval"), 1;
000897  000999  // Syntax   : flt_CEIL(result, floatval);
000898  001000  // Input    : FLOAT  floatval points to the float value to integerize up
000899  001001  // Usage    : var float1[2];
000900  001002  //          : n := flt_INT(float1, float1); // round value up to the integer value
000901  001003  // Notes    : Removes fractional part, rounding up correctly.
000902  001004  // Returns  : the pointer to the float result.
000903  001005  //          : carry and overflow are not affected.
000904  001006        
000905  001007        
000906  001008  func flt_FLOOR("result", "floatval"), 1;
000907  001009  // Syntax   : flt_FLOOR(result, floatval);
000908  001010  // Input    : FLOAT  floatval points to the float value to integerize down
000909  001011  // Usage    : var float1[2];
000910  001012  //          : n := flt_INT(float1, float1); // round value down to the integer value
000911  001013  // Notes    : Removes fractional part, rounding down correctly.
000912  001014  // Returns  : the pointer to the float result.
000913  001015  //          : carry and overflow are not affected.
000914  001016        
000915  001017        
000916  001018  func flt_SIN("result", "floatval"), 1;
000917  001019  // Syntax   : flt_SIN(result, fval);
000918  001020  // Input    : FLOAT  result   points to float result register
000919  001021  //          : FLOAT  floatval (in radians) points to the float value to get Sine of
000920  001022  // Usage    : var float1[2];
000921  001023  //          : flt_SIN(result, float1); // get the Sin of float1
000922  001024  // Notes    : the result is in radians.
000923  001025  // Returns  : the pointer to the float result.
000924  001026  //          : carry and overflow are not affected.
000925  001027        
000926  001028        
000927  001029  func flt_LOG("result", "floatval"), 1;
000928  001030  // Syntax   : flt_LOG(&result, &fval);
000929  001031  // Input    : FLOAT  result   points to float result register
000930  001032  //          : FLOAT  floatval points to the float value to get Log of
000931  001033  // Usage    : var float1[2];
000932  001034  //          : flt_LOG(result, float1); // get the natural Log of float1
000933  001035  // Returns  : the pointer to the float result.
000934  001036  //          : carry and overflow are not affected.
000935  001037        
000936  001038        
000937  001039  func flt_SQR("result", "floatval"), 1;
000938  001040  // Syntax   : flt_SQR(result, fval);
000939  001041  // Input    : FLOAT  result   points to float result register
000940  001042  //          : FLOAT  floatval points to the float value to get Log of
000941  001043  // Usage    : var float1[2];
000942  001044  //          : flt_SQR(result, float1); // get the square root of float1
000943  001045  // Returns  : the pointer to the float result, or zero if number was negative.
000944  001046  //          : carry and overflow are not affected.
000945  001047        
000946  001048        
000947  001049  func flt_TAN("result", "floatval"), 1;
000948  001050  // Syntax   : flt_TAN(result, fval);
000949  001051  // Input    : FLOAT  result   points to float result register
000950  001052  //          : FLOAT  floatval (in radians) points to the float value to get Tangent of
000951  001053  // Usage    : var float1[2];
000952  001054  //          : flt_TAN(result, float1); // get the Tangent of float1
000953  001055  // Returns  : the pointer to the float result.
000954  001056  //          : carry and overflow are not affected.
000955  001057        
000956  001058        
000957  001059  func flt_POW("result", "floatx", "floaty"), 1;
000958  001060  // Syntax   : flt_POW(result, fval1, fval2);
000959  001061  // Input    : FLOAT  result   points to float result register
000960  001062  //          : FLOAT  floatx   points to the float value to raise
000961  001063  //          : FLOAT  floaty   points to the float value for power
000962  001064  // Usage    : flt_POW(result, floatx, floaty); // raise x to power y
000963  001065  // Returns  : the pointer to the float result, or zero if error occurs.
000964  001066  //          : carry and overflow are not affected.
000965  001067        
000966  001068        
000967  001069  func flt_ADD("result", "floatA", "floatB"), 1;
000968  001070  // Syntax   : flt_ADD(result, floatA, floatB);
000969  001071  // Input    : FLOAT  result   points to float result register
000970  001072  //          : FLOAT  floatval points to the float value A
000971  001073  //          : FLOAT  floatval points to the float value B
000972  001074  // Usage    : flt_ADD(result, floatx, floaty); // add B to A
000973  001075  // Returns  : the pointer to the float result, or zero if error occurs.
000974  001076  //          : carry and overflow are not affected.
000975  001077        
000976  001078        
000977  001079  func flt_SUB("&result", "&floatA", "&floatB"), 1;
000978  001080  // Syntax   : flt_SUB(result, floatA, floatB);
000979  001081  // Input    : FLOAT  result   points to float result register
000980  001082  //          : FLOAT  floatval points to the float value A
000981  001083  //          : FLOAT  floatval points to the float value B
000982  001084  // Usage    : flt_SUB(&result, &floatx, &floaty); // subtract B from A
000983  001085  // Returns  : the pointer to the float result, or zero if error occurs.
000984  001086  //          : carry and overflow are not affected.
000985  001087        
000986  001088        
000987  001089  func flt_MUL("result", "floatA", "floatB"), 1;
000988  001090  // Syntax   : flt_MUL(result, floatA, floatB);
000989  001091  // Input    : FLOAT  result   points to float result register
000990  001092  //          : FLOAT  floatval points to the float value A
000991  001093  //          : FLOAT  floatval points to the float value B
000992  001094  // Usage    : flt_MUL(result, floatA, floatB); // multiply A by B
000993  001095  // Returns  : the pointer to the float result, or zero if error occurs.
000994  001096  //          : carry and overflow are not affected.
000995  001097        
000996  001098        
000997  001099  func flt_DIV("result", "floatA", "floatB"), 1;
000998  001100  // Syntax   : flt_DIV(result, floatA, floatB);
000999  001101  // Input    : FLOAT  result   points to float result register
001000  001102  //          : FLOAT  floatval points to the float value A
001001  001103  //          : FLOAT  floatval points to the float value B
001002  001104  // Usage    : flt_DIV(result, floatA, floatB); // divide A by B
001003  001105  // Returns  : the pointer to the float result, or zero if error occurs.
001004  001106  //          : carry and overflow are not affected.
001005  001107        
001006  001108        
001007  001109  //------------------------------------------------------------------//
001008  001110  // The following float functions all return integer values.
001009  001111  //------------------------------------------------------------------//
001010  001112  func flt_EQ("floatA", "floatB"), 1;
001011  001113  // Syntax   : flt_EQ(floatA, floatB);
001012  001114  // Input    : FLOAT  floatval points to the float value A
001013  001115  //          : FLOAT  floatval points to the float value B
001014  001116  // Usage    : if (flt_EQ(floatA, floatB)) // compare A to B, true if A == B
001015  001117  // Returns  : True if numbers are equal, false otherwise.
001016  001118        
001017  001119        
001018  001120  func flt_NE("floatA", "floatB"), 1;
001019  001121  // Syntax   : flt_NE(floatA, floatB);
001020  001122  // Input    : FLOAT  floatval points to the float value A
001021  001123  //          : FLOAT  floatval points to the float value B
001022  001124  // Usage    : if (flt_NE(floatA, floatB)) // compare A to B, true if A != B
001023  001125  // Returns  : True if numbers are not equal, false otherwise.
001024  001126        
001025  001127        
001026  001128        
001027  001129  func flt_GT("floatA", "floatB"), 1;
001028  001130  // Syntax   : flt_GT(floatA, floatB);
001029  001131  // Input    : FLOAT  floatval points to the float value A
001030  001132  //          : FLOAT  floatval points to the float value B
001031  001133  // Usage    : if (flt_GT(floatA, floatB)) // compare A to B, true if A > B
001032  001134  // Returns  : True if A > B, false otherwise.
001033  001135        
001034  001136        
001035  001137  func flt_GE("floatA", "floatB"), 1;
001036  001138  // Syntax   : flt_GE(floatA, floatB);
001037  001139  // Input    : FLOAT  floatval points to the float value A
001038  001140  //          : FLOAT  floatval points to the float value B
001039  001141  // Usage    : if (flt_GE(floatA, floatB)) // compare A to B, true if A >= B
001040  001142  // Returns  : True if A >= B, false otherwise.
001041  001143        
001042  001144        
001043  001145  func flt_LT("floatA", "floatB"), 1;
001044  001146  // Syntax   : flt_LT(floatA, floatB);
001045  001147  // Input    : FLOAT  floatval points to the float value A
001046  001148  //          : FLOAT  floatval points to the float value B
001047  001149  // Usage    : if (flt_LT(floatA, floatB)) // compare A to B, true if A < B
001048  001150  // Returns  : True if A < B, false otherwise.
001049  001151        
001050  001152        
001051  001153  func flt_LE("floatA", "floatB"), 1;
001052  001154  // Syntax   : flt_LE(floatA, floatB);
001053  001155  // Input    : FLOAT  floatval points to the float value A
001054  001156  //          : FLOAT  floatval points to the float value B
001055  001157  // Usage    : if (flt_LE(floatA, floatB )) // compare A to B, true if A <= B
001056  001158  // Returns  : True if A <= B, false otherwise.
001057  001159        
001058  001160        
001059  001161  func flt_SGN("floatval"), 1;
001060  001162  // Syntax   : flt_SGN(fval);
001061  001163  // Input    : FLOAT  floatval   points to the float value examine sign
001062  001164  // Usage    : var float1[2];
001063  001165  //          : n := flt_SGN(float1); // return -1 if float number negative
001064  001166  // Notes    : returns 0 if sign is positive or zero.
001065  001167  // Returns  : returns 16bit integer -1 if float sign is negative, or zero if positive.
001066  001168  //          : carry and overflow are not affected.
001067  001169        
001068  001170        
001069  001171  func flt_FTOI("floatvar"), 1;
001070  001172  // Syntax   : flt_FTOI(myfloat);
001071  001173  // Input    : FLOAT  fresult  points to float result register
001072  001174  // Usage    : var float1[2];
001073  001175  //          : myvar := flt_VAL(&float1, myvar);
001074  001176  // Notes    : Converts a floating point number to a 16bit integer.
001075  001177  //          : The floating point number is rounded up or down accordingly.
001076  001178  // Returns  : the integer value of the float.
001077  001179        
001078  001180  func flt_PRINTxy("xpos", "ypos", "fvalue", "formatstring"), 1;
001079  001181  // Syntax   : flt_PRINT(x, y, resf, formatstr);
001080  001182  // Input    : FLOAT  fresult  points to float result register
001081  001183  //          : formatstring    zero, null string, of valid format string
001082  001184  // Usage    : var float1[2];
001083  001185  //          : flt_PRINT(float1, "");
001084  001186  // Notes    : The string argument can be a string constant, a pointer
001085  001187  //          : to a string variable, or a pointer to a data statement.
001086  001188  //          : If it is zero or an empty string, the number is
001087  001189  //          : automatically formatted for the best presentation.
001088  001190  //          : The format string is similar to the C language, but only
001089  001191  //          : a single '%' may be used to print a single variable.
001090  001192  // Returns  : zero if success.
001091  001193        
001092  001194  func __reserved9(), 0; // do not remove
001093  001195  func __reserved10(), 0; // do not remove
001094  001196        
001095  001197  //------------------------------------------------------------------//
001096  001198  //------------------------------------------------------------------//
001097  001199  //------------------------------------------------------------------//
001098  001200  //------------------------------------------------------------------//
001099  001201  //------------------------------------------------------------------//
001100  001202  func pin_Set("mode", "pin"), 1;            // set pin to required mode
001101  001203  // Syntax: pin_Set(mode, pin);
001102  001204  // Usage : pin_Set(PIN_OUT,);
001103  001205  // Notes : Sets the selected pin to the desired mode. Refer to the manual
001104  001206  //       : for pin function compatitblilites.
001105  001207  //       : returns true if the pin number and mode is legal (usually ignored)
001106  001208  //       :    available pin modes
001107  001209  //       :    PIN_INP                 0        // pin is input, no pullup or pulldown
001108  001210  //       :    PIN_INP_HI              1        // pin is input with pullup to Vcc
001109  001211  //       :    PIN_INP_LO              2        // pin is input with pulldown to Gnd
001110  001212  //       :    PIN_OUT                 3        // pin is output
001111  001213  //       :    PIN_OUT_OD              4        // pin is output with open drain
001112  001214  //       :    PIN_AN                  5        // pin is analogue (PA0 to PA3 only)
001113  001215  //       :    PIN_ANAVG               6        // pin is analogue (PA0 to PA3 only), averaged - 16 samples
001114  001216  //       :
001115  001217        
001116  001218  func pin_HI("pin"), 1;                    // set pin to logic '1'
001117  001219  // Syntax: pin_HI(pin);
001118  001220  // Usage : pin_HI(PA4);        // make PA4 HI level
001119  001221  // Notes : Outputs a logic "High" to the pin latch
001120  001222  //       : The pin is automatically made an output.
001121  001223  //       : pullup, pulldown, and change notification will be disable for the selected pin.
001122  001224  //       : returns true if the pin number is legal (usually ignored)
001123  001225  //       :
001124  001226        
001125  001227  func pin_LO("pin"), 1;                    // set pin to logic '0'
001126  001228  // Syntax: pin_LO(pin);
001127  001229  // Usage : pin_LO(PA3);
001128  001230  // Notes : Outputs a logic "Low" to the pin latch
001129  001231  //       : The pin is automatically made an output.
001130  001232  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001131  001233  //       : returns true if the pin number is legal (usually ignored)
001132  001234  //       :
001133  001235        
001134  001236  func pin_Val("pin", "value"), 0;                    // set pin to to state of variable
001135  001237  // Syntax: pin_Var(pin, value);
001136  001238  // Usage : pin_Var(IO3, myvar);
001137  001239  // Notes : Outputs a logic state on a pin depending on the value of bit 0 of a variable
001138  001240  //       : The pin is automatically made an output.
001139  001241  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001140  001242  //       : returns true if the pin number is legal (usually ignored)
001141  001243        
001142  001244  func pin_Read("pin"), 1;                // read pin, logic or analogue
001143  001245  // Syntax: pin_Read(PA0);
001144  001246  // Usage : arg1 := pin_Read(arg2);
001145  001247  // Notes : Read a pin in various ways. If the pin is
001146  001248  //       : set to an input, read the state of the input pin.
001147  001249  //       : If set to an output, read the state of the output latch.
001148  001250  //       : If set to analogue, read the 12 bit analogue value.
001149  001251        
001150  001252  func bus_Read(), 1;
001151  001253  // Syntax: bus_Read();
001152  001254  // Usage : arg1 := pin_ReadBus();
001153  001255  // Notes : Read the 16 bit port regardless of pin configurations.
001154  001256  //       : If a pin is configured as input or analogue, the pin is read directly as
001155  001257  //       : if it were a digital input. If a pin is configured as an output, the pin
001156  001258  //       : is also read directly, giving the output latch state.
001157  001259  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001158  001260  //       : (Refer to 'port bit position masks')
001159  001261  //Returns: Returns the 16 bit value of the bus.
001160  001262        
001161  001263  func bus_SetPins("value"), 0;
001162  001264  // Syntax: bus_SetPins(value);
001163  001265  // Usage : arg1 := bus_SetPins(15); // set PA0 to PA3 to output bits, making them HI
001164  001266  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001165  001267  //       : and forces its state to a '1'. The state of its previous open drain
001166  001268  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001167  001269  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001168  001270  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001169  001271        
001170  001272  func bus_ClearPins("value"), 0;
001171  001273  // Syntax: bus_ClearPins(value);
001172  001274  // Usage : bus_ClearPins(0x03F0); // set PA0 to PA5 to output bits, making them LO
001173  001275  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001174  001276  //       : and forces its state to a '0. The state of its previous open drain
001175  001277  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001176  001278  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001177  001279  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001178  001280        
001179  001281  func bus_SetChangeInterrupt("function", "portmask"), 1;
001180  001282  // Syntax: bus_SetChangeInterrupt(value);
001181  001283  // Usage : bus_SetChangeInterrupt(scanKeypad, 0x00F0); // set PA4 to PA7 to interrupt on change
001182  001284  // Notes : Any '1' bits in "portmask" marks that pin to generate an interrupt on change.
001183  001285  //       : A level change on that pin will cause "function" to be executed. If "function" is
001184  001286  //       : zero, the display may be put into sleep mode, and any change will cause a wakeup reset.
001185  001287  //       : Wakeup will always re-start code running in FLASHBANK_0
001186  001288  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001187  001289  //       : (Refer to 'port bit position masks')
001188  001290  //       : Once armed, "function" will only be executed once, it is necessary to
001189  001291  //       : re-arm for any further events.
001190  001292  //Returns: Return the current state of the pins that are selected in "portmask"
001191  001293  //       : This can be saved and later used in "function" to see which pin(s) actually changed.
001192  001294        
001193  001295  func bus_Write8("var"), 0;
001194  001296  // Syntax: bus_Write8(var);
001195  001297  // Usage : bus_Write8(arg1);
001196  001298  // Notes : The lower 8 bits of arg1 are placed on the BUS, then, after
001197  001299  //       : a settling delay of approx 50nsec, the BUS_WR(PA2) pin is strobed
001198  001300  //       : LO for approx 50nsec then set back HI.
001199  001301  //       : The upper 8 bits of arg1 are ignored.
001200  001302  //       : NB:- the BUS_WR(PA2) pin must be preset to the desired output state
001201  001303  //       : as must the bus pins to ensure BUS write integrity.
001202  001304  //       :
001203  001305  //       : BUS_0 is PA4
001204  001306  //       : BUS_1 is PA5
001205  001307  //       : BUS_2 is PA6
001206  001308  //       : BUS_3 is PA7
001207  001309  //       : BUS_4 is PA8
001208  001310  //       : BUS_5 is PA9
001209  001311  //       : BUS_6 is PA10
001210  001312  //       : BUS_7 is PA11
001211  001313        
001212  001314  func bus_Read8(), 1;
001213  001315  // Syntax: bus_Read();
001214  001316  // Usage : arg1 := bus_Read8();
001215  001317  // Notes : The BUS_RD(PA3) pin set to LO, then, after a settling delay
001216  001318  //       : of approx 50nsec, the BUS is read into the lower 8 bits of arg
001217  001319  //       : (the upper 8 bits being set to 0)
001218  001320  //       : the BUS_RD(PA3) pin is then set back to a HI level.
001219  001321  //       : NB:- the BUS_RD(PA3) pin must be preset to the desired output state
001220  001322  //       : as must the bus pins to ensure BUS read integrity.
001221  001323  //       :
001222  001324  //       : BUS_0 is PA4
001223  001325  //       : BUS_1 is PA5
001224  001326  //       : BUS_2 is PA6
001225  001327  //       : BUS_3 is PA7
001226  001328  //       : BUS_4 is PA8
001227  001329  //       : BUS_5 is PA9
001228  001330  //       : BUS_6 is PA10
001229  001331  //       : BUS_7 is PA11
001230  001332        
001231  001333  func __reserved13(), 0; // do not remove
001232  001334  func __reserved14(), 0; // do not remove
001233  001335  //------------------------------------------------------------------//
001234  001336  // Pin related constants                                            //
001235  001337  //------------------------------------------------------------------//
001236  001338        
001237  001339  // pin_Set(...) pin modes
001238  001340  #CONST
001239  001348  #END
001240  001349        
001241  001350        
001242  001351  // pin name             constant    connector H1 I/O Pin referencesnumbers
001243  001352  #CONST
001244  001372  #END
001245  001373        
001246  001374  // bit position masks
001247  001375  #CONST
001248  001392  #END
001249  001393        
001250  001394        
001251  001395        
001252  001396  //------------------------------------------------------------------//
001253  001397  //   Graphics Functions
001254  001398  //------------------------------------------------------------------//
001255  001399  func gfx_Set("mode", "value"), 0;            // set various graphics functions
001256  001400  // Syntax: gfx_Set(mode, value);
001257  001401  // Usage : gfx_Set(arg1, arg2);
001258  001402  // Notes : Sets various graphics parameters used by other functions
001259  001403  //       : This allows the features to be set programatically with a
001260  001404  //       : single function call.It is strongly recommended to use the
001261  001405  //       : pre-defined constants rather than the mode numbers.
001262  001406  //       : NB:- Although it is often required to be able to set graphics
001263  001407  //       : functions with a single function call for graphics engine
001264  001408  //       : related functions, there is a complete set of single parameter
001265  001409  //       : shortcut functions that have exactly the same function as
001266  001410  //       : each of the gfx_Set modes and saves 1 parameter / uses less memory
001267  001411  //       :
001268  001412  //       : mode = PEN_SIZE (mode 16)
001269  001413  //       : gfx_Set(PEN_SIZE, value);
001270  001414  //       : value = SOLID (value 0) rectangle and circle objects are solid
001271  001415  //       : value = OUTLINE (value 1) rectangle and circle objects are outlines
001272  001416  //       : Sets the mode of the Pen used by most graphics objects
001273  001417  //       :
001274  001418  //       : mode = BACKGROUND_COLOUR (mode 17)
001275  001419  //       : gfx_Set(BACKGROUND_COLOUR, value);
001276  001420  //       : value = 0 to 0xFFFF, Black to White
001277  001421  //       : Sets the Background colour of the screen
001278  001422  //       :
001279  001423  //       : mode = OBJECT_COLOUR (mode 18)
001280  001424  //       : gfx_Set(OBJECT_COLOUR, value);
001281  001425  //       : value = 0 to 0xFFFF, Black to White
001282  001426  //       : Sets the Object colour used in various functions
001283  001427  //       : LineTo(,,); LineRel(,,); BoxTo(,,); Dot(); etc.
001284  001428  //       :
001285  001429  //       : mode = CLIPPING (mode 19)
001286  001430  //       : gfx_Set(CLIPPING, value);
001287  001431  //       : value = OFF (value 0) Clipping disabled
001288  001432  //       : value = ON (value 1) Clipping enabled
001289  001433  //       : Enables/Disables the Clipping feature
001290  001434  //       :
001291  001435  //       : mode = TRANSPARENT_COLOUR (mode 20) : Image or Animation Transparency Colour.
001292  001436  //       : gfx_Set(TRANSPARENT_COLOUR, value);
001293  001437  //       : value = 0 to 0xFFFF Black to White
001294  001438  //       : Sets Bitmap, Image or Animation Transparency Colour.
001295  001439  //       : NB not implemented
001296  001440  //       :
001297  001441  //       : mode = TRANSPARENCY (mode 21) : Bitmap/Image/Animation Transparency
001298  001442  //       : gfx_Set(5, value);
001299  001443  //       : value = OFF (value 0) Transparency disabled
001300  001444  //       : value = ON (value 1) Transparency enabled
001301  001445  //       : Enables/Disables the Transparency feature
001302  001446  //       : NB not implemented
001303  001447  //       :
001304  001448  //       : mode = FRAME_DELAY (mode 22) : Inter-Frame Delay
001305  001449  //       : gfx_Set(FRAME_DELAY, value);
001306  001450  //       : value = 0 to 65535 ms
001307  001451  //       : Sets the Video/Animation clip inter-frame delay. This setting will
001308  001452  //       : over-ride the embedded frame delay of the clip. After the event,
001309  001453  //       : the setting will auto disable and if further inter-frame delays need
001310  001454  //       : overriding the setting must be re-issued.
001311  001455  //       :
001312  001456  //       : mode = SCREEN_MODE (mode 23) : Set required screen behaviour
001313  001457  //       : gfx_Set(SCREEN_MODE, value);
001314  001458  //       : value = LANDSCAPE   (value 0)
001315  001459  //       : value = LANDSCAPE_R (value 1)
001316  001460  //       : value = PORTRAIT    (value 2)
001317  001461  //       : value = PORTRAIT_R  (value 3)
001318  001462  //       :
001319  001463  //       : mode = OUTLINE_COLOUR (mode 24) : Outline Colour
001320  001464  //       : gfx_Set(OUTLINE_COLOUR, value);
001321  001465  //       : value = 1 to 0xFFFF, if 0, featre is OFF
001322  001466  //       : Sets the filled Rectangle or Circle objects outline colour
001323  001467  //       : If outline colour, is 0, OUTLINE_COLOUR feature is disabled
001324  001468  //       : gfx_Set(OUTLINE_COLOUR, OFF); may be used for this
001325  001469  //       :
001326  001470  //       : Only supports variable contrast for uOLED Modules
001327  001471  //       : mode = CONTRAST (mode 25) : Contrast
001328  001472  //       : gfx_Set(CONTRAST, value);
001329  001473  //       : value = 0 to 9, 0=off, 1=lowest, 8=highest contrast
001330  001474  //       : when contrast=0, display is placed in low power mode.
001331  001475  //       : This function should be called with contrast=0 when
001332  001476  //       : powering down the module.
001333  001477  //       :
001334  001478  //       : mode = LINE_PATTERN (mode 26) : Line Pattern
001335  001479  //       : gfx_Set(LINE_PATTERN, value);
001336  001480  //       : gfx_Set(LINE_PATTERN, 0b1111000011110000); // draw dotted line
001337  001481  //       : gfx_Set(LINE_PATTERN, OFF); // line patterning OFF
001338  001482  //       : a value of 0 turns the feature off
001339  001483  //       :
001340  001484  //       : mode = COLOUR_MODE (mode 27) : 8/16 bit colour mode
001341  001485  //       : gfx_Set(COLOUR_MODE , COLOUR16);   // set 16bit colour mode
001342  001486  //       : gfx_Set(COLOUR_MODE , COLOUR8);   // set 8bit colour mode
001343  001487  //       : NB not implemented, default is COLOUR16
001344  001488  //       :
001345  001489  //       : mode = BEVEL_WIDTH (mode 28) : set button and slider bevel width
001346  001490  //       : gfx_Set(BEVEL_WIDTH , 5);   // set bevel lines to 5 pixels wide
001347  001491  //       : sets the button and slider objects bevel width
001348  001492  //       :
001349  001493  //       : mode = BEVEL_SHADOW (mode 29) : set bevel shadowing depth for buttons and sliders
001350  001494  //       : gfx_Set(BEVEL_SHADOW , 5);
001351  001495  //       : sets the button and slider objects darken and lighten depth for the bevel colour
001352  001496  //       :
001353  001497  //       : mode = X_ORIGIN (mode 29) : set x offset for screen
001354  001498  //       : gfx_Set(X_ORIGIN , 25);  // object are offset 25 pixels from LHS
001355  001499  //       : sets the origin of drawn objects to a position other than 0,0
001356  001500  //       :
001357  001501  //       : mode = Y_ORIGIN (mode 29) : set y offset for screen
001358  001502  //       : gfx_Set(Y_ORIGIN , 30);  // object are offset 30 pixels from TOP
001359  001503  //       : sets the origin of drawn objects to a position other than 0,0
001360  001504        
001361  001505  //------------------------------------------------------------------------------
001362  001506  //gfx_Set() related constants
001363  001507  //------------------------------------------------------------------------------
001364  001508  #CONST
001365  001525  #END
001366  001526        
001367  001527        
001368  001528  func gfx_Cls(), 0;                    // clear the screen
001369  001529  // Syntax: gfx_Cls();
001370  001530  // Usage : gfx_Cls();
001371  001531  // Notes : Clears the screen with current background colour
001372  001532        
001373  001533  func gfx_MoveTo("x", "y"), 0;                // set glb_X1 and glb_Y1 to required co-ordinate
001374  001534  // Syntax: gfx_MoveTo(x, y);
001375  001535  // Usage : gfx_MoveTo(arg1, arg2);
001376  001536  // Notes : Moves the origin to a new x,y position
001377  001537        
001378  001538  func gfx_MoveRel("x", "y"), 0;                // set glb_X1 and glb_Y1 to new relative offset
001379  001539  // Syntax: gfx_MoveRel(x, y);
001380  001540  // Usage : gfx_MoveRel(arg1, arg2);
001381  001541  // Notes : Moves the origin to a new x,y position
001382  001542  //       : relative to the current origing
001383  001543        
001384  001544  func gfx_LineTo("x1", "y1"), 0;                     // draw line from current origin to new point
001385  001545  // Syntax: gfx_LineTo(x1, y1);
001386  001546  // Usage : gfx_LineTo(arg1, arg2);
001387  001547  // Notes : Draws a Line from the origin x,y to x1,y1.
001388  001548  //       : The new origin is then set to x1, y1. Line colour needs
001389  001549  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001390  001550        
001391  001551  func gfx_LineRel("x1", "y1"), 0;                    // draw line from current origin to new relative offset
001392  001552  // Syntax: gfx_LineRel(x1, y1);
001393  001553  // Usage : gfx_LineRel(arg1, arg2);
001394  001554  // Notes : Draws a Line from the origin x,y to x1,y1.
001395  001555  //       : Unlike gfx_MoveTo() the origin is not updated with x1, y1. Line colour needs
001396  001556  //       : to be preset with "Set Object colour" using gfx_Set(OBJECT_COLOUR, colour);
001397  001557        
001398  001558  func gfx_Line("x1", "y1", "x2", "y2", "colr"), 0;   // draw line, can be patterned
001399  001559  // Syntax: gfx_Line(x1, x2, y2, colr);
001400  001560  // Usage : gfx_Line(arg1, arg2, arg3, arg4, arg5);
001401  001561  // Notes : Plots a coloured Line from x1,y1 to x2,y2 on the screen
001402  001562        
001403  001563  func gfx_Hline("y", "x1", "x2", "colr"), 1;         // draw Hline, can be patterned
001404  001564  // Syntax: gfx_Line(x1, x2, y, colr);
001405  001565  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001406  001566  // Notes : Plots a coloured Horizontal line from x1,y to x2,y on the screen
001407  001567        
001408  001568  func gfx_Vline("x", "y1", "y2", "colr"), 1;         // draw Vline, can be patterned
001409  001569  // Syntax: gfx_Line(y1, y2, x, colr);
001410  001570  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001411  001571  // Notes : Plots a coloured Vertical line from x,y1 to x,y2 on the screen
001412  001572        
001413  001573  func gfx_Rectangle("x1" ,"y1", "x2", "y2", "colr"), 0;    // draw open rectangle,line can be patterned
001414  001574  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colr);
001415  001575  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001416  001576  // Notes : Plots a coloured Outline Rectangle from top corner (x1,y1) to
001417  001577  //       : bottom corner (x2,y2) on the screen.
001418  001578        
001419  001579  func gfx_RectangleFilled("x1","y1","x2","y2","colr"), 0;    // draw filled rectangle
001420  001580  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colour);
001421  001581  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001422  001582  // Notes : Plots a coloured Solid Rectangle from top corner (x1,y1) to
001423  001583  //       : bottom corner (x2,y2) on the screen.
001424  001584        
001425  001585  func gfx_Circle("x", "y", "rad", "colr"), 0;        // draw open circle
001426  001586  // Syntax: gfx_Circle(x, y, rad, colr);
001427  001587  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001428  001588  // Notes : Plots a coloured outline Circle on the screen at centre x,y with radius = rad
001429  001589        
001430  001590  func gfx_CircleFilled("x", "y", "rad", "colr"), 0;    // draw filled circle
001431  001591  // Syntax: gfx_Circle(x, y, rad, colr);
001432  001592  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001433  001593  // Notes : Plots a coloured Solid Circle on the screen at centre x,y with radius = rad
001434  001594        
001435  001595  func gfx_PutPixel("x", "y", "colr"), 0;            // set point at x y
001436  001596  // Syntax: gfx_PutPixel(x, y, colr);
001437  001597  // Usage : gfx_PutPixel(arg1, arg2, arg3);
001438  001598  // Notes : Plots a coloured pixel on the screen at x,y location
001439  001599        
001440  001600  func gfx_GetPixel("x", "y"), 1;                // read colour at point x y
001441  001601  // Syntax: gfx_GetPixel(x, y);
001442  001602  // Usage : var := gfx_GetPixel(arg1, arg2);
001443  001603  // Notes : Reads and returns the colour value of a pixel at location x,y
001444  001604        
001445  001605  func gfx_Triangle("x1","y1","x2","y2","x3","y3","colr"), 0; // draw an open triangle
001446  001606  // Syntax: gfx_Triangle(x1, y1, x2, y2, x3, y3, colr);
001447  001607  // Usage : gfx_Triangle(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001448  001608  // Notes : Plots a coloured outline Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001449  001609  //       : Vertices must be specified in an anti-clockwise fashion
001450  001610        
001451  001611  func gfx_OrbitInit("&x_orb", "&y_orb"), 0;        // set result holders for orbit command
001452  001612  // Syntax: gfx_OrbitInit(&x_orb, &y_orb);
001453  001613  // Usage : gfx_OrbitInit(&arg1, &arg2);
001454  001614  // Notes : Sets up the Orbit function parameters.
001455  001615  //       : &x_orb, &y_orb: calcualted Orbit coordiantes. These are pointers to local
001456  001616  //       : variables that get updated after calling gfx_Orbit(,,) function.
001457  001617  //       : The coordiantaes are calculated relative to the origin
001458  001618  //       : obtained by using the gfx_MoveTo(x, y) function.
001459  001619        
001460  001620  func gfx_Orbit("angle", "distance"), 0;            // calculate point at angle, distance
001461  001621  // Syntax: gfx_Orbit(angle, distance);
001462  001622  // Usage : gfx_Orbit(arg1, arg2);
001463  001623  // Notes : The Orbit function calcualtes the x, y coordinates of a distant point whose
001464  001624  //       : only known parameters are the angle and the distance from the current origin.
001465  001625        
001466  001626  func gfx_Polyline("n", "&vx", "&vy", "colr"), 0;    // draw a polyline from a table of vertices
001467  001627  // Syntax: gfx_Polyline(numbVertices, &vertices_x, &vertices_y, colour);
001468  001628  // Usage : gfx_Polyline(arg1, x[array], y[array], arg2);
001469  001629  // Notes : This function is very similar to the Ploygon function
001470  001630  //       : with the exception of the 1st and the last vertices not joined.
001471  001631        
001472  001632  func gfx_Polygon("n", "&vx", "&vy", "colr"), 0;        // draw a polygon from a table of vertices
001473  001633  // Syntax: gfx_Polygon(numbVertices, &vx, &y, colour);
001474  001634  // Usage : gfx_Polygon(arg1, x[array], y[array], arg2);
001475  001635  // Notes : Plots a coloured outline Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001476  001636  //       : Vertices must be minimum of 3 and can be specified in any fashion
001477  001637        
001478  001638  func gfx_Dot(), 0;                    // set point at glb_X glb_Y, default colour
001479  001639  // Syntax: gfx_Dot();
001480  001640  // Usage : gfx_Dot();
001481  001641  // Notes : Places a coloured dot at the origin
001482  001642        
001483  001643        
001484  001644  func gfx_Bullet("r"), 0;                // draw circle at glb_X glb_Y, default colour
001485  001645  // Syntax: gfx_Bullet();
001486  001646  // Usage : gfx_Bullet();
001487  001647  // Notes : Places a coloured circle at the origin
001488  001648  //       : filled or unfilled state is controlled by PenSize
001489  001649        
001490  001650  func gfx_IncX(), 1;                    // increment global origin glb_X, returning new value
001491  001651  // Syntax: gfx_IncX();
001492  001652  // Usage : var := gfx_IncX();
001493  001653  // Notes : Increments the x coordinate of the origin
001494  001654        
001495  001655  func gfx_IncY(), 1;                    // increment global origin glb_Y, returning new value
001496  001656  // Syntax: gfx_IncY();
001497  001657  // Usage : var := gfx_IncY();
001498  001658  // Notes : Increments the y coordinate of the origin
001499  001659        
001500  001660  func gfx_BoxTo("x1", "y1"), 0;                // draw rectangle from current origin to x1 y1
001501  001661  // Syntax: gfx_BoxTo(x1, y1);
001502  001662  // Usage : gfx_BoxTo(arg1, arg2);
001503  001663  // Notes : Draws a Rectangle from the origin x,y to x1,y1.
001504  001664  //       : The new origin is then set to x1,y1. Rectangle colour needs
001505  001665  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001506  001666  //       : and the PenSize setting determines if Box is solid or outline.
001507  001667        
001508  001668  func gfx_ClipWindow("x1" ,"y1", "x2", "y2"), 0;         // set the cipping area
001509  001669  // Syntax: gfx_ClipWindow(x1, y1, x2, y2);
001510  001670  // Usage : gfx_ClipWindow(arg1, arg2, arg3, arg4);
001511  001671  // Notes : Specifies a clipping window region on the screen such that any objects
001512  001672  //       : and text placed onto the screen will be clipped and displayed only
001513  001673  //       : within that region. For the clipping window to take effect, "Clipping"
001514  001674  //       : must be enabled seperately using the gfx_Set(CLIPPING, ON) command.
001515  001675        
001516  001676        
001517  001677  func gfx_ChangeColour("oldcolr", "newcolr"), 0;         // change pixel colour in clipping area
001518  001678  // Syntax: gfx_ChangeColour(oldcolr, newcolr);
001519  001679  // Usage : gfx_ChangeColour(0xFF00, 0XFFFF);
001520  001680  // *Notes:
001521  001681        
001522  001682  func gfx_SetClipRegion(), 0;                            // set clipping area to the most recent extents
001523  001683  // Syntax: gfx_SetClipRegion();
001524  001684  // Usage : var := gfx_SetClipRegion();
001525  001685  // *Notes:
001526  001686        
001527  001687  func gfx_Ellipse("x", "y", "xrad", "yrad", "colour"), 0;
001528  001688  // Syntax: gfx_Ellipse(x, y, xrad, yrad, colour);
001529  001689  // Usage : gfx_Ellipse(arg1, arg2, arg3, arg4, arg5);
001530  001690  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001531  001691  //       : with xradius = xrad and yradius = yrad.
001532  001692  //       : if PenSize = 0 Ellipse is Solid
001533  001693  //       : if PenSize = 1 Ellipse is Outline
001534  001694        
001535  001695        
001536  001696  func gfx_EllipseFilled("x", "y", "xrad", "yrad", "colour"), 0;
001537  001697  // Syntax: gfx_EllipseFilled(x, y, xrad, yrad, colour);
001538  001698  // Usage : gfx_EllipseFilled(arg1, arg2, arg3, arg4, arg5);
001539  001699  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001540  001700  //       : with xradius = xrad and yradius = yrad.
001541  001701        
001542  001702        
001543  001703  func gfx_Button("state", "x", "y", "buttonColour", "textColour", "font", "textWidth", "textHeight", "text"), 1;
001544  001704  // Syntax: gfx_Button(mode, x, y, buttonColour, textColour, font, textWidth, textHeight, text);
001545  001705  // Usage : gfx_Button(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
001546  001706  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001547  001707  //       : x,y arguments (top left corner). The size of the button depends on
001548  001708  //       : the font, width, height and length of the text.
001549  001709  //       : The button appearance will depend on the state parameter setting:
001550  001710  //       :         state = 0 : Button Pressed
001551  001711  //       :         state = 1 : Button Raised
001552  001712  //       : The button is automatically sized, determined by text.
001553  001713        
001554  001714        
001555  001715  func gfx_Button2("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001556  001716  // Syntax: gfx_Button2(mode, x, y, width, height, buttoncolour, textcolour, text);
001557  001717  // Usage : gfx_Button2(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001558  001718  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001559  001719  //       : x,y arguments (top left corner). The size of the button is defined by the width
001560  001720  //       : and height parameters. The text is centered within those bounds.
001561  001721  //       : The button appearance will depend on the state parameter setting:
001562  001722  //       :         state = 0 : Button Pressed
001563  001723  //       :         state = 1 : Button Raised
001564  001724  //       : The button has square corners.
001565  001725        
001566  001726  func gfx_Button3("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001567  001727  // Syntax: gfx_Button3(mode, x, y, width, height, buttoncolour, textcolour, text);
001568  001728  // Usage : gfx_Button3(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001569  001729  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001570  001730  //       : x,y arguments (top left corner). The size of the button is defined by the width
001571  001731  //       : and height parameters. The text is centered within those bounds.
001572  001732  //       : The button appearance will depend on the state parameter setting:
001573  001733  //       :         state = 0 : Button Pressed
001574  001734  //       :         state = 1 : Button Raised
001575  001735  //       : The button has rounded corners depending upon gfx_BevelRadius.
001576  001736        
001577  001737  func gfx_CheckBox("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001578  001738  // Syntax: gfx_CheckBox(state, x, y, Width, Height, boxColour, textColour, text);
001579  001739  // Usage : gfx_CheckBox(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001580  001740  // Notes : Draws a CheckBox at screen location defined by x,y arguments (top left corner).
001581  001741  //       : The size of the button is defined by the width and height parameters.
001582  001742  //       : The text is to the right of the checkbox and truncated if necessary.
001583  001743  //       : The check appearance will depend on the state parameter setting:
001584  001744  //       :         state = 0 = CHECKED    : Checkbox Checked
001585  001745  //       :         state = 1 = UNCHECKED  : CheckBox Unchecked
001586  001746        
001587  001747  func gfx_RadioButton("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001588  001748  // Syntax: gfx_RadioButton(state, x, y, Width, Height, boxColour, textColour, text);
001589  001749  // Usage : gfx_RadioButton(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001590  001750  // Notes : Draws a RadioButton at screen location defined by x,y arguments (top left corner).
001591  001751  //       : The size of the button is defined by the width and height parameters.
001592  001752  //       : The text is to the right of the radiobutton and truncated if necessary.
001593  001753  //       : The check appearance will depend on the state parameter setting:
001594  001754  //       :         state = 0 = CHECKED    : Radiobutton Checked
001595  001755  //       :         state = 1 = UNCHECKED  : Radiobutton Unchecked
001596  001756        
001597  001757  func gfx_Slider2("mode", "x1", "y1", "width", "height", "colour", "scale", "value"), 1;
001598  001758  // Syntax: gfx_Slider2(mode, x, y, width, height, colour, scale, value);
001599  001759  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001600  001760  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001601  001761  //       : Slider parameters are as follows:
001602  001762  //       :         mode = 0 : Slider recessed
001603  001763  //       :         mode = 1 : Slider raised
001604  001764  //       :         x1, y1 = top left corner
001605  001765  //       :         x2, y2 = bottom right corner
001606  001766  //       :         scale = n : sets the full scale range from 0 to n
001607  001767  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001608  001768  //returns: scaled value of thumb position
001609  001769        
001610  001770        
001611  001771        
001612  001772        
001613  001773  func gfx_Panel("state", "x", "y", "width", "height", "colour"), 0;
001614  001774  // Syntax: gfx_Panel(style, x, y, width, height, colour);
001615  001775  // Usage : gfx_Panel(PANEL_RAISED, x, y, w, h, GRAY);
001616  001776  // Notes : Draws a panel (groupbox) at screen location defined by
001617  001777  //       : x, y, width and height with colour "colour".
001618  001778  //       :         state = 0 : sunken
001619  001779  //       :         state = 1 : raised
001620  001780  //       :         state = 2 : hide (draw object in background colour)
001621  001781  //returns: nothing
001622  001782        
001623  001783        
001624  001784        
001625  001785  func gfx_Slider("mode", "x1", "y1", "x2", "y2", "colour", "scale", "value"), 1;
001626  001786  // Syntax: gfx_Slider(mode, x1, y1, x2, y2, colour, scale, value);
001627  001787  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001628  001788  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001629  001789  //       : Slider parameters are as follows:
001630  001790  //       :         mode = 0 : Slider recessed
001631  001791  //       :         mode = 1 : Slider raised
001632  001792  //       :         x1, y1 = top left corner
001633  001793  //       :         x2, y2 = bottom right corner
001634  001794  //       :         scale = n : sets the full scale range from 0 to n
001635  001795  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001636  001796  //returns: scaled value of thumb position
001637  001797        
001638  001798        
001639  001799        
001640  001800  func gfx_ScreenCopyPaste("xs", "ys", "xd", "yd", "width", "height"), 0;
001641  001801  // Syntax: gfx_ScreenCopyPaste(xs, ys, xd, yd, width, height);
001642  001802  // Usage : gfx_ScreenCopyPaste(arg1, arg2, arg3, arg4, arg5, arg6);
001643  001803  // Notes : Copies an area of a screen from xs,ys of size given by width and height
001644  001804  //       : and pastes it to another location determined by xd, yd.
001645  001805        
001646  001806  func gfx_RGBto565("RED", "GREEN", "BLUE"), 1;
001647  001807  // Syntax: gfx_RGBto565(red, green, blue);
001648  001808  // Usage : gfx_RGBto565(arg1, arg2, arg3);
001649  001809  // Notes : Returns the 16bit (565 format) colour value of a 24bit (R,G,B format) colour
001650  001810        
001651  001811  func gfx_332to565("COLOUR8BIT"), 1;
001652  001812  // Syntax: gfx_332to565(colour);
001653  001813  // Usage : gfx_332to565(arg);
001654  001814  // Notes : Returns the 16bit (565 format) colour value of an 8 bit (332 format) colour
001655  001815        
001656  001816  func gfx_565to332("COLOUR16BIT"), 1;
001657  001817  // Syntax: gfx_565to332(colour);
001658  001818  // Usage : clor332 := gfx_565to332(arg);
001659  001819  // Notes : Returns the 8bit (332 format) colour value of an 16 bit (565 format) colour
001660  001820        
001661  001821  func gfx_TriangleFilled("x1","y1","x2","y2","x3","y3","colr"), 0; // draw a filled triangle
001662  001822  // Syntax: gfx_TriangleFilled(x1, y1, x2, y2, x3, y3, colr);
001663  001823  // Usage : gfx_TriangleFilled(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001664  001824  // Notes : Plots a coloured Solid Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001665  001825  //       : Vertices must be specified in an anti-clockwise fashion
001666  001826        
001667  001827        
001668  001828  func gfx_PolygonFilled("n", "&vx", "&vy", "colr"), 0;        // draw a filled polygon from a table of vertices
001669  001829  // Syntax: gfx_PolygonFilled(numbVertices, &vx, &y, colour);
001670  001830  // Usage : gfx_PolygonFilled(arg1, x[array], y[array], arg2);
001671  001831  // Notes : Plots a solid Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001672  001832  //       : Vertices must be minimum of 3 and can be specified in any fashion
001673  001833        
001674  001834        
001675  001835  func gfx_Origin("x", "y"), 0;            // set relative screen offset for graphics objects
001676  001836  // Syntax: gfx_Offset(x, y);
001677  001837  // Usage : gfx_Offset(arg1, arg2);
001678  001838  // Notes : Set the screen offset
001679  001839        
001680  001840        
001681  001841        
001682  001842  func gfx_FillPattern("patptr", "mode"), 1;
001683  001843  // Syntax  : gfx_FillPattern(patternpointer);
001684  001844  // Usage   : gfx_FillPattern(PTN_BRICKS);
001685  001845  //         : Provides graphics fill pattern, (8 linear bytes, 1=pixel off)
001686  001846  // Notes   : "patptr" points to an 8x8 tile for rendering filled areas.
001687  001847  //         : Rendering is turned off with gfx_FillPattern(0);
001688  001848  //         : or gfx_FillPattern(OFF);
001689  001849  //         : "mode" maybe TRANSPARENT or OPAQUE (0 or 1), for OPAQUE
001690  001850  //         : mode, the current screen colour is used for the 'off'
001691  001851  //         : pixels, for transparent mode, the 'off' pixels are not drawn.
001692  001852  //         : gfx_FillPattern affects all filled object, including polygons.
001693  001853  //         : There are 32 builtin patterns, these are obtained using the
001694  001854  //         : pre-defined constants FILLPATTERN_0 to FILLPATTERN_31, or the
001695  001855  //         : names, eg PTN_BRICKS, PTN_CARGONET, PTN_CIRCUITS, etc.
001696  001856  //         : Note that the constants range from 0xFFE0 to 0xFFFF, any
001697  001857  //         : other value is assumed to be a pointer to a users 8 byte
001698  001858  //         : block pattern.
001699  001859  // Returns : returns the handle of the previous pattern.
001700  001860        
001701  001861        
001702  001862  func gfx_PieSlice("cx", "cy", "spread", "radius", "step", "startangle", "endangle", "mode", "colour"), 0;
001703  001863  // Syntax  : gfx_PieSlice(cx, cy, spread, radius, step, startangle, endangle, mode, colour);
001704  001864  // Usage   : gfx_PieSlice(120, 120, 0, 100, 8, 75, 145, 0, YELLOW);
001705  001865  // Notes   : Draws a 'pie slice' (filled arc) at "cx":"cy" with radius "radius", starting at "startangle"
001706  001866  //         : and ending at "endangle". "spread" is used to offset the centrepoint of the pieslice
001707  001867  //         : to shift a pie chart piece away from the centrepoint.
001708  001868  //         : Rendering can be obtained with gfx_FillPattern(PATTRN);
001709  001869  //         : or gfx_FillPattern(OFF); for no fill pattern.
001710  001870  //         : Step is the stepping angle increment for the fineness of the pie Slice.
001711  001871  //         : "mode" has the following effect
001712  001872  //         :   if mode = 0, no outline
001713  001873  //         :   if mode = 1, outer circumference line (using current object colour)
001714  001874  //         :   if mode = 2, outer circumference and slice lines ( (using current object colour)
001715  001875  // Returns : nothing.
001716  001876        
001717  001877        
001718  001878  func gfx_Arc("xc", "yc", "radius", "step", "startangle", "endangle", "mode"), 0;
001719  001879  // Syntax  : gfx_Arc(cx, cy, radius, step, startangle, endangle, mode);
001720  001880  // Usage   : gfx_Arc(120, 120, 0, 100, 8, 75, 145, 0);
001721  001881  // Notes   : Draws an arc at "cx":"cy" with radius "radius", starting at "startangle"
001722  001882  //         : and ending at "endangle". Colour is determined by curent object colour.
001723  001883  //         : Step is the stepping angle increment for the fineness of the arc.
001724  001884  //         : "mode" has the following effect
001725  001885  //         :   if mode = 0, outer circumference line only
001726  001886  //         :   if mode = 1, outer circumference and lines back to cy:cy
001727  001887  // Returns : nothing.
001728  001888        
001729  001889        
001730  001890  func gfx_RoundRect("x1", "y1", "x2", "y2", "rad", "color"), 0;
001731  001891  // Syntax  : gfx_RoundRect(x1, y1, x2, y2, radius, colour);
001732  001892  // Usage   : gfx_RoundRect(120, 120, 160, 160, 8, GRAY); // draw a tab like object
001733  001893  // Notes   : Draws a filled rectangle at the given co-ordinates with rounded corners
001734  001894  //         : determined by "radius".
001735  001895  //         : Bounding rectangle is x1-rad, y1-rad, x2+rad, y2+rad.
001736  001896  // Returns : nothing.
001737  001897        
001738  001898        
001739  001899  func gfx_Surround("x1", "y1", "x2", "y2", "rad1", "rad2", "color"), 0;
001740  001900  // Syntax  : gfx_Surround(x1, y1, x2, y2, radius1, radius1, colour);
001741  001901  // Usage   : gfx_Surround(120, 120, 160, 160, 8, 0, GRAY); // rounded surround frame
001742  001902  // Notes   : Draws a outline rectangle at the given co-ordinates with rounded corners
001743  001903  //         : determined by "radius1". "radius2" sets the radius of the outer rounded rectangle.
001744  001904  //         : If "radius1" is zero, the inner rectangle will have square corners.
001745  001905  //         : Bounding rectangle is x1-rad1-rad2, y1-rad1-rad2, x2+rad1+rad2, y2+rad1+rad2.
001746  001906  // Returns : nothing.
001747  001907        
001748  001908        
001749  001909  func gfx_RoundPanel("state", "x", "y", "width", "height", "radius", "bevelwidth", "colour"), 0;
001750  001910  // Syntax  : gfx_RoundPanel(style, x, y, width, height, radius, bevelwidth, colour);
001751  001911  // Usage   : gfx_RoundPanel(PANEL_RAISED, 100, 100, 30, 20, GRAY);
001752  001912  // Notes   : Draws a rounded panel at x, y, width and height may be zero allowing the function
001753  001913  //         : to be used for rounded panels, rounded buttons, circular buttons.
001754  001914  //         :         state = 0 : sunken
001755  001915  //         :         state = 1 : raised
001756  001916  //         :         state = 2 : hide (draw object in background colour)
001757  001917  //         : Bounding rectangle is x1-radius-bevelwidth, y1-radius-bevelwidth, x2+radius+bevelwidth, y2+radius+bevelwidth.
001758  001918  // Returns : nothing.
001759  001919        
001760  001920        
001761  001921  func gfx_Gradient("style", "left", "top", "right", "bottom", "color1", "color2"), 0;
001762  001922  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, colr1, colr2);
001763  001923  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001764  001924  // Notes   : Draws a graduated colour rectangle at the specified co-ordinate.
001765  001925  //         : "style" specifies the drawing mode
001766  001926  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001767  001927  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001768  001928  //         :     GRAD_UP           // gradient changes in the vertical direction
001769  001929  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001770  001930  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001771  001931  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001772  001932  // Returns : nothing.
001773  001933        
001774  001934        
001775  001935  func gfx_RoundGradient("style", "left", "top", "right", "bottom", "radius", "color1", "color2"), 0;
001776  001936  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, radius, colr1, colr2);
001777  001937  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001778  001938  // Notes   : Draws a graduated colour rounded rectangle at the specified co-ordinate.
001779  001939  //         : X1 may equal X2, and Y1 = Y2 allowing allowing the function
001780  001940  //         : to be used for rounded panels, rounded buttons, circular buttons.
001781  001941  //         : "style" specifies the drawing mode
001782  001942  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001783  001943  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001784  001944  //         :     GRAD_UP           // gradient changes in the vertical direction
001785  001945  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001786  001946  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001787  001947  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001788  001948  //         : Bounding rectangle is x1-radius, y1-radius, x2+radius, y2+radius.
001789  001949  // Returns : nothing.
001790  001950        
001791  001951        
001792  001952  func gfx_ReadBresLine("x1", "y1", "x2", "y2", "ptr"), 1;
001793  001953  // Syntax  : gfx_readBrezLine(x1, y1, x2, y2, ptr);
001794  001954  // Usage   : anArrayPtr := gfx_readBrezLine(10, 10, 50, 50, 0);  // read arbitrary line to array, let the function make the array for me
001795  001955  // Notes   : reads an arbitrary line from the display to an array.
001796  001956  //         : If "ptr" is 0, the correctly sized array is created, in which case
001797  001957  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001798  001958  //         : is expected to point to a correctly sized array.
001799  001959  //         : NB if an array is supplied, its size must be large enough, and may
001800  001960  //         : be calculated:-
001801  001961  //         : bytecount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1) * 2; // calc array size for mem_Alloc (which allocates byte storage)
001802  001962  //         : wordcount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1);     // calc array size for fixed word array
001803  001963  // Returns : A pointer to the created aray, or the users array.
001804  001964  //         : In the case of ptr=0, if there is insufficient
001805  001965  //         : memory to create the array, zero is returned
001806  001966        
001807  001967        
001808  001968  func gfx_WriteBresLine("x1", "y1", "x2", "y2", "ptr"), 0;
001809  001969  // Syntax  : gfx_writeBrezLine(x1, y1, x2, y2, ptr), 0;
001810  001970  // Usage   : gfx_writeBrezLine(20, 20, 50, 50, anArrayPtr);   // write an array back to the arbitrary line
001811  001971  // Notes   : cast pixel values from array to arbitrary line "x1", "y1", "x2", "y2"
001812  001972  //         : "ptr" points to the array to be written.
001813  001973  // Returns : nothing
001814  001974        
001815  001975        
001816  001976  func gfx_ReadGRAMarea("x1", "y1", "x2", "y2", "ptr"), 1;
001817  001977  // Syntax  : gfx_ReadGRAMarea(x1, y1, x2, y2, ptr);
001818  001978  // Usage   : anArrayPtr := gfx_ReadGRAMarea(10, 10, 50, 50, 0);  // read rectangular area to array, let the function make the array for me
001819  001979  // Notes   : reads an arbitrary rectangular area from the display to an array.
001820  001980  //         : If "ptr" is 0, the correctly sized array is created, in which case
001821  001981  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001822  001982  //         : is expected to point to a correctly sized array.
001823  001983  //         : NB if an array is supplied, its size must be large enough, and may
001824  001984  //         : be calculated:-
001825  001985  //         : bytecount := ( (ABS(x2-x1)+1) * (ABS(y2-y1) + 1)) * 2;     // calc array size for mem_Alloc (which allocates byte storage)
001826  001986  //         : wordcount := ( (ABS(x2-x1)+1) *  ABS(y2-y1);             // calc array size for fixed word array
001827  001987  // Returns : A pointer to the created aray, or the users array.
001828  001988  //         : In the case of ptr=0, if there is insufficient
001829  001989  //         : memory to create the array, zero is returned
001830  001990        
001831  001991        
001832  001992  func gfx_WriteGRAMarea("x1", "y1", "x2", "y2", "ptr"), 0;
001833  001993  // Syntax  : gfx_WriteGRAMarea(x1, y1, x2, y2, ptr), 0;
001834  001994  // Usage   : gfx_WriteGRAMarea(20, 20, 50, 50, anArrayPtr);   // write an array back to the rectangular area
001835  001995  // Notes   : "ptr" points to the array to be written.
001836  001996  // Returns : nothing
001837  001997        
001838  001998        
001839  001999  func gfx_Get("mode"), 1;
001840  002000  // Syntax: gfx_Get(mode);
001841  002001  // Usage : arg1 := gfx_Get(arg);
001842  002002  // Notes : Returns various parameters to caller
001843  002003  //       :
001844  002004  //       : mode = X_MAX (mode 0) : current orientations maximum X value
001845  002005  //       : var := gfx_Get(X_MAX);
001846  002006  //       : Returns the maximum horizontal value of the display
001847  002007  //       :
001848  002008  //       : mode = Y_MAX (mode 1) : Vcurrent orientations maximum Y value
001849  002009  //       : var := gfx_Get(Y_MAX);
001850  002010  //       : Returns the maximum vertical value of the display
001851  002011  //       :
001852  002012  //       : mode = LEFT_POS (mode 2) : Left location of last Object
001853  002013  //       : var := gfx_Get(LEFT_POS);
001854  002014  //       : Returns the left location of the last drawn object
001855  002015  //       : such as a slider or button or an image/video
001856  002016  //       :
001857  002017  //       : mode = TOP_POS (mode 3) : Top location of Object
001858  002018  //       : var := gfx_Get(TOP_POS);
001859  002019  //       : Returns the top location of the last drawn object
001860  002020  //       : such as a slider or button or an image/video
001861  002021  //       :
001862  002022  //       : mode = RIGHT_POS (mode 4) : Right location of last Object
001863  002023  //       : var := gfx_Get(RIGHT_POS);
001864  002024  //       : Returns the right location of the last drawn object
001865  002025  //       : such as a slider or button or an image/video
001866  002026  //       :
001867  002027  //       : mode = BOTTOM_POS  (mode 5) : Bottom location of Object
001868  002028  //       : var := gfx_Get(BOTTOM_POS );
001869  002029  //       : Returns the bottom location of the last drawn object
001870  002030  //       : such as a slider or button or an image/video
001871  002031  //       :
001872  002032  //       : mode = X_ORG (mode 6) : get current internal X position
001873  002033  //       : var := gfx_Get(X_ORG);
001874  002034  //       : Returns the internal X position that was set with
001875  002035  //       : gfx_MoveTo(x, y); or gfx_Set(X_ORG, pos);
001876  002036  //       :
001877  002037  //       : mode = Y_ORG (mode 7) : get current internal Y position
001878  002038  //       : var := gfx_Get(Y_ORG);
001879  002039  //       : Returns the internal X position that was set with
001880  002040  //       : gfx_MoveTo(x, y); or gfx_Set(Y_ORG, pos);
001881  002041  //       :
001882  002042        
001883  002043        
001884  002044  //------------------------------------------------------------------//
001885  002045  // Single parameter short-cuts                                      //
001886  002046  // for the gfx_Set functions                                        //
001887  002047  // These functions return the existing value before                 //
001888  002048  // the change is made.                                              //
001889  002049  //------------------------------------------------------------------//
001890  002050  func gfx_PenSize("mode"), 1;                        // 0  graphics pen size, SOLD or OUTLINE
001891  002051  func gfx_BGcolour("colour"), 1;                     // 1  graphics background colour
001892  002052  func gfx_ObjectColour("colour"), 1;                 // 2  graphics object colour
001893  002053  func gfx_Clipping("mode"), 1;                       // 3  graphics clipping ON/OFF
001894  002054  func gfx_TransparentColour("colour"), 1;            // 4  graphics image transparent mask colour
001895  002055  func gfx_Transparency("mode"), 1;                   // 5  graphics image transparent mode ON/OFF
001896  002056  func gfx_FrameDelay("milliseconds"), 1;             // 6  graphics animation frame delay
001897  002057  func gfx_ScreenMode("mode"), 1;                     // 7  graphics orientation LANDSCAPE, LANDSCAPE_R, PORTRAIT, PORTRAIT_R
001898  002058  func gfx_OutlineColour("colour"), 1;                // 8  graphics rectangle/circle outline colour
001899  002059  func gfx_Contrast("value"), 1;                      // 9  graphics hardware value 0 to 9, 0=off, 1=lowest, 8=highest (only for AMOLED devices)
001900  002060  func gfx_LinePattern("value"), 1;                   // 10 graphics line draw tesselation pattern (16 linear bits, 1=pixel off)
001901  002061  func gfx_BevelRadius("radius"), 1;                  // 11 graphics button bevel radius
001902  002062  func gfx_BevelWidth("value"), 1;                    // 12 graphics button bevel width
001903  002063  func gfx_BevelShadow("value"), 1;                   // 13 graphics button bevel shadow depth
001904  002064  func gfx_Xorigin("offset"), 1;                      // 14 graphics  X origin
001905  002065  func gfx_Yorigin("offset"), 1;                      // 15 graphics  Y origin
001906  002066        
001907  002067        
001908  002068  func gfx_PointWithinBox("x", "y", "&rectr"), 1;
001909  002069  // Syntax   : gfx_PointWithinBox(x, y, rect);
001910  002070  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
001911  002071  //          : result := gfx_PointWithinBox(x, y, r); // check area at 100,200,119,229
001912  002072  // Notes    : rect is an array of 4 vars, x1, y1, width, height - using width co-ordinates
001913  002073  // returns  : Returns true if last touch co-ordinates are within the box test area.
001914  002074        
001915  002075        
001916  002076  func gfx_PointWithinRectangle("x", "y", "&recta"), 1;
001917  002077  // Syntax   : gfx_PointWithinRectangle(x, y, recta);
001918  002078  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
001919  002079  //          : result := gfx_PointWithinRectangle(x, y, r); // check if point within area at 100,200,119,229
001920  002080  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 using absolute co-ordinates
001921  002081  // returns  : Returns true if x:y co-ordinates are within the rectangle test area.
001922  002082        
001923  002083        
001924  002084  func __reserved17(), 0; // do not remove
001925  002085  func __reserved18(), 0; // do not remove
001926  002086  func __reserved19(), 0; // do not remove
001927  002087  func __reserved20(), 0; // do not remove
001928  002088  func __reserved21(), 0; // do not remove
001929  002089  func __reserved22(), 0; // do not remove
001930  002090        
001931  002091        
001932  002092  // built in fill pattern constants for function gfx_FillPattern
001933  002093  #CONST
001934  002126  #END
001935  002127        
001936  002128  #CONST
001937  002161  #END
001938  002162        
001939  002163  //------------------------------------------------------------------//
001940  002164  //     gradient control constants                                   //
001941  002165  //------------------------------------------------------------------//
001942  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001943  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001944  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001945  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001946  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001947  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001948  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001949  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001950  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001951  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001952  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001953  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001954  002172        
001955  002173        
001956  002174        
001957  002175        
001958  002176  //------------------------------------------------------------------//
001959  002177  // uSD/FLASH Function Prototypes                                    //
001960  002178  //------------------------------------------------------------------//
001961  002179  func media_Video("x", "y"), 0;                      // display movie at position x y
001962  002180  // Syntax: media_Video(x, y);
001963  002181  // Usage : media_Video(arg1, arg2);
001964  002182  // Notes : Play a Video/Animation clip from the uSD card at screen location
001965  002183  //       : specified by x,y (top left corner). The location of the clip in the
001966  002184  //       : uSD card must be specified by media_setSector(Video_Sector_Add) function.
001967  002185        
001968  002186  func media_VideoFrame("x", "y","framenumber"), 0;   // display required frame from a movie at x y
001969  002187  // Syntax: media_VideoFrame(Frame_number);
001970  002188  // Usage : arg1 := media_VideoFrame();
001971  002189  // Notes : After a pointer to a valid video has been set with media_SetSector,
001972  002190  //       : calling this function shows each fram sequentially, returning
001973  002191  //       : the number of frames remaining. The position of the image is
001974  002192  //     : at the current origin as set with gfx_MoveTo(...);
001975  002193        
001976  002194  func media_SetAdd("HiWord", "LoWord"), 0;           // set stream byte address
001977  002195  // Syntax: media_SetAdd(AddHiWord, AddLoWord);
001978  002196  // Usage : media_SetAdd(arg1, arg2);
001979  002197  // Notes : Set uSD internal Address pointer for bytewise access
001980  002198        
001981  002199  func media_SetSector("HiWord", "LoWord"), 0;        // set stream sector address
001982  002200  // Syntax: media_SetSector(SectHiWord, SectLoWord);
001983  002201  // Usage : media_SetSector(arg1, arg2);
001984  002202  // Notes : Set uSD internal Sector pointer for sector block access
001985  002203        
001986  002204  func media_RdSector("*destination"), 1;
001987  002205  // Syntax: media_RdSector(*destination);
001988  002206  // Usage : media_RdSector(rdblock);
001989  002207  // Notes : Reads and Returns 512 bytes (256 words) into a destination
001990  002208  //       : block (eg rdblock[256]) pointed to by the internal Sector pointer.
001991  002209  //       : After the read the Sector pointer is automatically incremented by 1.
001992  002210  //       : Returns TRUE if uSD response was TRUE
001993  002211        
001994  002212  func media_WrSector("*source"), 1;
001995  002213  // Syntax: media_WrSector(*source);
001996  002214  // Usage : media_WrSector(wrblock);
001997  002215  // Notes : Writes 512 bytes (256 words) from a source memory block
001998  002216  //       : (eg wrblock[256]) into the uSD card. After the write the Sector
001999  002217  //       : pointer is automatically incremented by 1.
002000  002218  //       : Returns TRUE if uSD response was TRUE
002001  002219        
002002  002220  func media_ReadByte(), 1;                // read a byte at the current stream position
002003  002221  // Syntax: media_RdByte();
002004  002222  // Usage : var := media_RdByte();
002005  002223  // Notes : Reads and Returns a single byte of data from the
002006  002224  //       : uSD card pointed to by the internal Address pointer.
002007  002225  //       : After the read the Address pointer is automatically
002008  002226  //       : incremented by 1.
002009  002227        
002010  002228  func media_ReadWord(), 1;                // read a word at the current stream position
002011  002229  // Syntax: media_ReadWord();
002012  002230  // Usage : var := media_ReadWord();
002013  002231  // *Notes : Reads and Returns a single word of data from the
002014  002232  //       : uSD card pointed to by the internal Address pointer.
002015  002233  //       : After the read the Address pointer is automatically
002016  002234  //       : incremented by 2.
002017  002235        
002018  002236  func media_WriteByte("byte"), 1;              // write a byte to the current stream position
002019  002237  // Syntax: media_WriteByte(arg1);
002020  002238  // Usage : var := media_WriteByte(arg1);
002021  002239  // *Notes : Writes and Returns xxxxx
002022  002240  //       : After the write the Address pointer is automatically
002023  002241  //       : incremented by 1.
002024  002242        
002025  002243  func media_WriteWord("word"), 1;            // write a word to the current stream position
002026  002244  // Syntax: media_WriteWord(arg1);
002027  002245  // Usage : var := media_WriteWord(arg1);
002028  002246  // *Notes : Writes and Returns xxxxx
002029  002247  //       : After the write the Address pointer is automatically
002030  002248  //       : incremented by 2.
002031  002249        
002032  002250  func media_Image("x", "y"), 0;            // display image at position x y
002033  002251  // Syntax: media_Image(x, y);
002034  002252  // Usage : media_Image(arg1, arg2);
002035  002253  // Notes : Display an image from the uSD card at screen location
002036  002254  //       : specified by x,y (top left corner). The location of the
002037  002255  //       : Image in the uSD card must be specified by
002038  002256  //       : media_setSector(Image_Sector_Add) function.
002039  002257        
002040  002258  func media_Flush(), 1;                    // after writing to media, flush the sector and write
002041  002259  // Syntax: media_Flush();
002042  002260  // Usage : var := media_Flush();
002043  002261  // *Notes : After writing any data to a sector, media_Flush() should be called to ensure that the current sector that
002044  002262  //       : is being written is correctly stored back to the media else write operations may be unpredictable.
002045  002263        
002046  002264  func media_Init(), 1;                    // initialize uSD card
002047  002265  // Usage : media_Init();
002048  002266  // Notes : Initialise uSD CARD
002049  002267  //       : Response: 0 = No Card
002050  002268  //       :           1 = Card Initialised
002051  002269        
002052  002270  func __reserved23(), 0; // do not remove
002053  002271  func __reserved24(), 0; // do not remove
002054  002272  func __reserved25(), 0; // do not remove
002055  002273  func __reserved26(), 0; // do not remove
002056  002274        
002057  002275  //==============================================//
002058  002276  // Communications Function Prototypes           //
002059  002277  // NB Primary COM port has fixed pins,          //
002060  002278  // COM1, COM2 and COM3 must have pins assigned. //
002061  002279  //==============================================//
002062  002280  func setbaud("baudnum"), 0;            // set baud rate of COM0
002063  002281  // Syntax: setbaud(baud_number);
002064  002282  // Usage : setbaud(BAUD_128000);        //Set baud rate to 128000bps
002065  002283  // *Notes : argument specifies the baud rate using pre-defined constant.
002066  002284  //       : The pre-defined constant is a value of 0-19 , and internally
002067  002285  //       : this is used as a table pointer to get the baud rate divisor
002068  002286  //       : value for one of the 20 selected baud rates, control is then
002069  002287  //       : passed to com_SetBaud(COM0, baudlookup[baud_number]);
002070  002288  //       : The pre-defined constants equate to a value of 0-19.
002071  002289  //       : If a value other than 0-19 is used, a run time error (eror 25)
002072  002290  //       : will occur.
002073  002291        
002074  002292  // baud divisor rates for legacy setbaud(n);
002075  002293  #CONST
002076  002315  #END
002077  002316        
002078  002317        
002079  002318  func com_SetBaud("comport","baudrate/10"), 1;
002080  002319  // Syntax: com_SetBaud("comport","baudrate/10");
002081  002320  // Usage : com_SetBaud(COM1, 960);   // set COM1 to 9600 baud
002082  002321  // Notes : sets to any viable baud rate from 160 to 655350
002083  002322  // return true if baud rate was acceptable
002084  002323        
002085  002324        
002086  002325  func COM1_RX_pin("pin"), 1;        // select the hardware pin for the COM1 receive line
002087  002326  // Usage : COM1_RX_pin(PA0); // set COM1 RX to PA0 pin
002088  002327  // Notes : Selects the hardware pin for COM1 receive line.
002089  002328  //       : Note that only a single pin can be mapped to COM1 RX.
002090  002329  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002091  002330  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002092  002331  //       : If the pin argument is 0 the function has no effect
002093  002332  //       : The pin is automatically set to an input.
002094  002333  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002095  002334  //       : it is necessary to configure the input pin first, eg
002096  002335  //       :     COM1_RX_pin(PA7);     // configure COM1 RX to PA7 (this disconnects anything else)
002097  002336  //       :     COM1_TX_pin(PA7));    // configure COM1 TX to PA7
002098  002337  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002099  002338        
002100  002339  func COM2_RX_pin("pin"), 1;        // select the hardware pin for the COM2 receive line
002101  002340  // Usage : COM2_RX_pin(PA0); // set COM2 RX to PA0 pin
002102  002341  // Notes : Selects the hardware pin for COM2 receive line.
002103  002342  //       : Note that only a single pin can be mapped to COM2 RX.
002104  002343  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002105  002344  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002106  002345  //       : If the pin argument is 0 the function has no effect
002107  002346  //       : The pin is automatically set to an input.
002108  002347  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002109  002348  //       : it is necessary to configure the input pin first, eg
002110  002349  //       :     COM2_RX_pin(PA7);     // configure COM2 RX to PA7 (this disconnects anything else)
002111  002350  //       :     COM2_TX_pin(PA7));    // configure COM2 TX to PA7
002112  002351  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002113  002352        
002114  002353  func COM3_RX_pin("pin"), 1;        // select the hardware pin for the COM3 receive line
002115  002354  // Usage : COM3_RX_pin(PA0); // set COM3 RX to PA0 pin
002116  002355  // Notes : Selects the hardware pin for COM3 receive line.
002117  002356  //       : Note that only a single pin can be mapped to COM3 RX.
002118  002357  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002119  002358  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002120  002359  //       : If the pin argument is 0 the function has no effect
002121  002360  //       : The pin is automatically set to an input.
002122  002361  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002123  002362  //       : it is necessary to configure the input pin first, eg
002124  002363  //       :     COM3_RX_pin(PA7);     // configure COM3 RX to PA7 (this disconnects anything else)
002125  002364  //       :     COM3_TX_pin(PA7));    // configure COM3 TX to PA7
002126  002365  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002127  002366        
002128  002367        
002129  002368  func COM1_TX_pin("pin"), 1;        // select the hardware pin for COM1 transmit line
002130  002369  // Syntax: COM1_TX_pin(pin);
002131  002370  // Usage : COM1_TX_pin(PA2); // set COM1 TX to PA2 pin
002132  002371  // Notes : Select the hardware pin for COMx transmit line.
002133  002372  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002134  002373  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002135  002374  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002136  002375  //       : The pin is automatically set to an output.
002137  002376  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002138  002377        
002139  002378  func COM2_TX_pin("pin"), 1;        // select the hardware pin for COM2 transmit line
002140  002379  // Syntax: COM2_TX_pin(pin);
002141  002380  // Usage : COM2_TX_pin(PA2); // set COM2 TX to PA2 pin
002142  002381  // Notes : Select the hardware pin for COMx transmit line.
002143  002382  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002144  002383  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002145  002384  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002146  002385  //       : The pin is automatically set to an output.
002147  002386  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002148  002387        
002149  002388  func COM3_TX_pin("pin"), 1;        // select the hardware pin for COM3 transmit line
002150  002389  // Syntax: COM3_TX_pin(pin);
002151  002390  // Usage : COM3_TX_pin(PA2); // set COM3 TX to PA2 pin
002152  002391  // Notes : Select the hardware pin for COMx transmit line.
002153  002392  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002154  002393  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002155  002394  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002156  002395  //       : The pin is automatically set to an output.
002157  002396  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002158  002397        
002159  002398  func com_Init("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
002160  002399  // Syntax: com_Init(buffer, bufsize, qualifier);
002161  002400  // Usage1: com_Init(mybuf, 20, 0);
002162  002401  // Usage2: com_Init(mybuf, 20, ':');
002163  002402  // Notes : initialize a serial capture buffer for the comms input
002164  002403  //       : The program must declare a var array as a circular buffer.
002165  002404  //       : Usage1 declares a circular buffer which will continually
002166  002405  //       : buffer characters.
002167  002406  //       : Usage2 must receive ':' before any characters will
002168  002407  //       : accumulate in the buffer.
002169  002408        
002170  002409  func com1_Init("buf","bufsize","qualifier"), 0;
002171  002410  // Syntax: com1_Init(buffer, bufsize, qualifier);
002172  002411  // Usage1: com1_Init(mybuf, 20, 0);
002173  002412  // Usage2: com1_Init(mybuf, 20, ':');
002174  002413  // Notes : initialize a serial capture buffer for the comms input
002175  002414  //       : The program must declare a var array as a circular buffer.
002176  002415  //       : Usage1 declares a circular buffer which will continually
002177  002416  //       : buffer characters.
002178  002417  //       : Usage2 must receive ':' before any characters will
002179  002418  //       : accumulate in the buffer.
002180  002419        
002181  002420  func com2_Init("buf","bufsize","qualifier"), 0;
002182  002421  // Syntax: com2_Init(buffer, bufsize, qualifier);
002183  002422  // Usage1: com2_Init(mybuf, 20, 0);
002184  002423  // Usage2: com2_Init(mybuf, 20, ':');
002185  002424  // Notes : initialize a serial capture buffer for the comms input
002186  002425  //       : The program must declare a var array as a circular buffer.
002187  002426  //       : Usage1 declares a circular buffer which will continually
002188  002427  //       : buffer characters.
002189  002428  //       : Usage2 must receive ':' before any characters will
002190  002429  //       : accumulate in the buffer.
002191  002430        
002192  002431  func com3_Init("buf","bufsize","qualifier"), 0;
002193  002432  // Syntax: com3_Init(buffer, bufsize, qualifier);
002194  002433  // Usage1: com3_Init(mybuf, 20, 0);
002195  002434  // Usage2: com3_Init(mybuf, 20, ':');
002196  002435  // Notes : initialize a serial capture buffer for the comms input
002197  002436  //       : The program must declare a var array as a circular buffer.
002198  002437  //       : Usage1 declares a circular buffer which will continually
002199  002438  //       : buffer characters.
002200  002439  //       : Usage2 must receive ':' before any characters will
002201  002440  //       : accumulate in the buffer.
002202  002441        
002203  002442        
002204  002443  func serin(), 1;                // read a byte from primary com port COM0
002205  002444  // Syntax: serin();
002206  002445  // Usage : char := serin();
002207  002446  // Notes : Receives a character from the Serial Port COM0. The transmission format is:
002208  002447  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002209  002448  //     : The default Baud Rate for COM0 is 115,200 bits per second or 115,200 baud.
002210  002449  //     : The baud rate can be changed under program control by using the setbaud(...)
002211  002450  //     : or the com_SetBaud(...) function.
002212  002451  //     : COM0 pins cannot be mapped, and are fixed as pins 42 and 33 (host adaptor / programming)
002213  002452  //     : serin may be buffered (refer to com_Init function above)
002214  002453  //     : Returns: -1 if no character is available
002215  002454  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002216  002455  //     : Returns: positive value 0 to 255 for a valid character received
002217  002456        
002218  002457  func serin1(), 1;
002219  002458  // Syntax: serinx();
002220  002459  // Usage : char := serinx();
002221  002460  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002222  002461  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002223  002462  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002224  002463  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002225  002464  //     : serinx may be buffered (refer to comx_Init function above)
002226  002465  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002227  002466  //     : Returns: -1 if no character is available
002228  002467  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002229  002468  //     : Returns: positive value 0 to 255 for a valid character received
002230  002469        
002231  002470  func serin2(), 1;
002232  002471  // Syntax: serinx();
002233  002472  // Usage : char := serinx();
002234  002473  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002235  002474  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002236  002475  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002237  002476  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002238  002477  //     : serinx may be buffered (refer to comx_Init function above)
002239  002478  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002240  002479  //     : Returns: -1 if no character is available
002241  002480  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002242  002481  //     : Returns: positive value 0 to 255 for a valid character received
002243  002482        
002244  002483  func serin3(), 1;
002245  002484  // Syntax: serinx();
002246  002485  // Usage : char := serinx();
002247  002486  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002248  002487  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002249  002488  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002250  002489  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002251  002490  //     : serinx may be buffered (refer to comx_Init function above)
002252  002491  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002253  002492  //     : Returns: -1 if no character is available
002254  002493  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002255  002494  //     : Returns: positive value 0 to 255 for a valid character received
002256  002495        
002257  002496  func serout("char"), 0;                // write a byte to COM0
002258  002497  // Syntax: serout1("char");
002259  002498  // Usage : serout1(ch);
002260  002499  // Notes : send character to COM0
002261  002500        
002262  002501  func serout1("char"), 0;
002263  002502  // Syntax: seroutx("char");
002264  002503  // Usage : serout1(ch);
002265  002504  // Notes : send character to COMx
002266  002505        
002267  002506  func serout2("char"), 0;
002268  002507  // Syntax: seroutx("char");
002269  002508  // Usage : serout1(ch);
002270  002509  // Notes : send character to COMx
002271  002510        
002272  002511  func serout3("char"), 0;
002273  002512  // Syntax: seroutx("char");
002274  002513  // Usage : serout1(ch);
002275  002514  // Notes : send character to COMx
002276  002515        
002277  002516  func com_Reset(), 0;                 // reset the comms receiver
002278  002517  // Syntax: com_Reset();
002279  002518  // Usage : com_Reset();
002280  002519  // Notes : reset comms to default polled mode
002281  002520        
002282  002521  func com1_Reset(), 0;
002283  002522  // Syntax: com_Reset();
002284  002523  // Usage : com_Reset();
002285  002524  // Notes : reset comms to default polled mode
002286  002525        
002287  002526  func com2_Reset(), 0;
002288  002527  // Syntax: com_Reset();
002289  002528  // Usage : com_Reset();
002290  002529  // Notes : reset comms to default polled mode
002291  002530        
002292  002531  func com3_Reset(), 0;
002293  002532  // Syntax: com_Reset();
002294  002533  // Usage : com_Reset();
002295  002534  // Notes : reset comms to default polled mode
002296  002535        
002297  002536  func com_Count(), 1;                // return count of characters in receive buffer
002298  002537  // Syntax: com_Count();
002299  002538  // Usage : arg := com_Count();
002300  002539  // Notes : return count of buffered characters in buffer attachment
002301  002540        
002302  002541  func com1_Count(), 1;
002303  002542  // Syntax: com_Count();
002304  002543  // Usage : arg := com_Count();
002305  002544  // Notes : return count of buffered characters in buffer attachment
002306  002545        
002307  002546  func com2_Count(), 1;
002308  002547  // Syntax: com_Count();
002309  002548  // Usage : arg := com_Count();
002310  002549  // Notes : return count of buffered characters in buffer attachment
002311  002550        
002312  002551  func com3_Count(), 1;
002313  002552  // Syntax: com_Count();
002314  002553  // Usage : arg := com_Count();
002315  002554  // Notes : return count of buffered characters in buffer attachment
002316  002555        
002317  002556  func com_Full(), 1;                // return TRUE if receiver buffer filled to capcity
002318  002557  // Syntax: com_Full();
002319  002558  // Usage : if (com_Full() ,,,, go read buffer;
002320  002559  // Notes : return true if buffer full (not necessarily an error if
002321  002560  //       : buffer is sized to a packet size)
002322  002561        
002323  002562  func com1_Full(), 1;
002324  002563  // Syntax: com_Full();
002325  002564  // Usage : if (com_Full() ,,,, go read buffer;
002326  002565  // Notes : return true if buffer full (not necessarily an error if
002327  002566  //       : buffer is sized to a packet size)
002328  002567        
002329  002568  func com2_Full(), 1;
002330  002569  // Syntax: com_Full();
002331  002570  // Usage : if (com_Full() ,,,, go read buffer;
002332  002571  // Notes : return true if buffer full (not necessarily an error if
002333  002572  //       : buffer is sized to a packet size)
002334  002573        
002335  002574  func com3_Full(), 1;
002336  002575  // Syntax: com_Full();
002337  002576  // Usage : if (com_Full() ,,,, go read buffer;
002338  002577  // Notes : return true if buffer full (not necessarily an error if
002339  002578  //       : buffer is sized to a packet size)
002340  002579        
002341  002580  func com_Error(), 1;                // return comms errors comms error occurred
002342  002581  // Syntax: comx_Error();
002343  002582  // Usage : if (com_Error() ) ...... take recovery action;
002344  002583  // Notes : return non zero if any errors low level comms errors occured
002345  002584  // returns :
002346  002585  // bit0 = Receiver Overflow Error
002347  002586  // bit1 = Receiver Framing Error
002348  002587  // bit2 = Transmit Buffer Overflow
002349  002588        
002350  002589  func com1_Error(), 1;
002351  002590  // Syntax: comx_Error();
002352  002591  // Usage : if (com_Error() ) ...... take recovery action;
002353  002592  // Notes : return non zero if any errors low level comms errors occured
002354  002593  // returns :
002355  002594  // bit0 = Receiver Overflow Error
002356  002595  // bit1 = Receiver Framing Error
002357  002596  // bit2 = Transmit Buffer Overflow
002358  002597        
002359  002598  func com2_Error(), 1;
002360  002599  // Syntax: comx_Error();
002361  002600  // Usage : if (com_Error() ) ...... take recovery action;
002362  002601  // Notes : return non zero if any errors low level comms errors occured
002363  002602  // returns :
002364  002603  // bit0 = Receiver Overflow Error
002365  002604  // bit1 = Receiver Framing Error
002366  002605  // bit2 = Transmit Buffer Overflow
002367  002606        
002368  002607  func com3_Error(), 1;
002369  002608  // Syntax: comx_Error();
002370  002609  // Usage : if (com_Error() ) ...... take recovery action;
002371  002610  // Notes : return non zero if any errors low level comms errors occured
002372  002611  // returns :
002373  002612  // bit0 = Receiver Overflow Error
002374  002613  // bit1 = Receiver Framing Error
002375  002614  // bit2 = Transmit Buffer Overflow
002376  002615        
002377  002616  func com_Sync(), 1;                // returns TRUE if qualifier has been received
002378  002617  // Usage : comx_Sync();
002379  002618  // return true if sync character has been received in com_Init("...") mode
002380  002619        
002381  002620  func com1_Sync(), 1;
002382  002621  // Usage : comx_Sync();
002383  002622  // return true if sync character has been received in com_Init("...") mode
002384  002623        
002385  002624  func com2_Sync(), 1;
002386  002625  // Usage : comx_Sync();
002387  002626  // return true if sync character has been received in com_Init("...") mode
002388  002627        
002389  002628  func com3_Sync(), 1;
002390  002629  // Usage : comx_Sync();
002391  002630  // return true if sync character has been received in com_Init("...") mode
002392  002631        
002393  002632        
002394  002633  func com_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
002395  002634  // Usage : com_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002396  002635  // Usage : com_TXbuffer(0, 0, 0);             // revert to non buffered service
002397  002636  // Notes : initialize a serial buffer for the COM0 output.
002398  002637  //       : The program must declare a var array as a circular buffer.
002399  002638  //       : When a TX buffer is declared for comms, the transmission
002400  002639  //       : of characters becomes non blocking. If the buffer has
002401  002640  //       : insufficient space to accept the next character from a
002402  002641  //       : serout_x() function, the excess characters will be ignored,
002403  002642  //       : and the com_Full_x() error will be asserted.   If the
002404  002643  //       : TX buffer is no longer required, just set the buffer pointer
002405  002644  //       : to zero, the size in this case doesnt matter and is ignored.
002406  002645  //       : The function can resize or reallocated to another buffer at
002407  002646  //       : any time. The buffer is flushed before any changes are made.
002408  002647  //       : "pin" designates an IO pin to control a bi-directional
002409  002648  //       : control device for half duplex mode. "pin" will go HI at the
002410  002649  //       : start of a transmission, and will return low after the final
002411  002650  //       : byte is transmitted. If not required, just set "pin" to zero.
002412  002651        
002413  002652  func com1_TXbuffer("buf", "bufsize", "pin"), 0;
002414  002653  // Usage : com1_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002415  002654  // Usage : com1_TXbuffer(0, 0, 0);              // revert to non buffered service
002416  002655  // Notes : initialize a serial buffer for the COM0 output.
002417  002656  //       : The program must declare a var array as a circular buffer.
002418  002657  //       : When a TX buffer is declared for comms, the transmission
002419  002658  //       : of characters becomes non blocking. If the buffer has
002420  002659  //       : insufficient space to accept the next character from a
002421  002660  //       : serout_x() function, the excess characters will be ignored,
002422  002661  //       : and the com_Full_x() error will be asserted.   If the
002423  002662  //       : TX buffer is no longer required, just set the buffer pointer
002424  002663  //       : to zero, the size in this case doesnt matter and is ignored.
002425  002664  //       : The function can resize or reallocated to another buffer at
002426  002665  //       : any time. The buffer is flushed before any changes are made.
002427  002666  //       : "pin" designates an IO pin to control a bi-directional
002428  002667  //       : control device for half duplex mode. "pin" will go HI at the
002429  002668  //       : start of a transmission, and will return low after the final
002430  002669  //       : byte is transmitted. If not required, just set "pin" to zero.
002431  002670        
002432  002671  func com2_TXbuffer("buf", "bufsize", "pin"), 0;
002433  002672  // Usage : com2_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002434  002673  // Usage : com2_TXbuffer(0, 0, 0);              // revert to non buffered service
002435  002674  // Notes : initialize a serial buffer for the COM0 output.
002436  002675  //       : The program must declare a var array as a circular buffer.
002437  002676  //       : When a TX buffer is declared for comms, the transmission
002438  002677  //       : of characters becomes non blocking. If the buffer has
002439  002678  //       : insufficient space to accept the next character from a
002440  002679  //       : serout_x() function, the excess characters will be ignored,
002441  002680  //       : and the com_Full_x() error will be asserted.   If the
002442  002681  //       : TX buffer is no longer required, just set the buffer pointer
002443  002682  //       : to zero, the size in this case doesnt matter and is ignored.
002444  002683  //       : The function can resize or reallocated to another buffer at
002445  002684  //       : any time. The buffer is flushed before any changes are made.
002446  002685  //       : "pin" designates an IO pin to control a bi-directional
002447  002686  //       : control device for half duplex mode. "pin" will go HI at the
002448  002687  //       : start of a transmission, and will return low after the final
002449  002688  //       : byte is transmitted. If not required, just set "pin" to zero.
002450  002689        
002451  002690  func com3_TXbuffer("buf", "bufsize", "pin"), 0;
002452  002691  // Usage : com3_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002453  002692  // Usage : com3_TXbuffer(0, 0, 0);              // revert to non buffered service
002454  002693  // Notes : initialize a serial buffer for the COM0 output.
002455  002694  //       : The program must declare a var array as a circular buffer.
002456  002695  //       : When a TX buffer is declared for comms, the transmission
002457  002696  //       : of characters becomes non blocking. If the buffer has
002458  002697  //       : insufficient space to accept the next character from a
002459  002698  //       : serout_x() function, the excess characters will be ignored,
002460  002699  //       : and the com_Full_x() error will be asserted.   If the
002461  002700  //       : TX buffer is no longer required, just set the buffer pointer
002462  002701  //       : to zero, the size in this case doesnt matter and is ignored.
002463  002702  //       : The function can resize or reallocated to another buffer at
002464  002703  //       : any time. The buffer is flushed before any changes are made.
002465  002704  //       : "pin" designates an IO pin to control a bi-directional
002466  002705  //       : control device for half duplex mode. "pin" will go HI at the
002467  002706  //       : start of a transmission, and will return low after the final
002468  002707  //       : byte is transmitted. If not required, just set "pin" to zero.
002469  002708        
002470  002709        
002471  002710  func com_TXcount(), 1;                // return count of characters in COM0 TX buffer
002472  002711  // Syntax: com_TXcount();
002473  002712  // Usage : arg := com_Count();
002474  002713  // Notes : return count of characters remaining in COM0 transmit buffer
002475  002714  //       : that was previously allocated with com_TXbuffer(...);
002476  002715        
002477  002716  func com1_TXcount(), 1;
002478  002717  // Syntax: com_TXcount();
002479  002718  // Usage : arg := com_Count();
002480  002719  // Notes : return count of characters remaining in COM0 transmit buffer
002481  002720  //       : that was previously allocated with com_TXbuffer(...);
002482  002721        
002483  002722  func com2_TXcount(), 1;
002484  002723  // Syntax: com_TXcount();
002485  002724  // Usage : arg := com_Count();
002486  002725  // Notes : return count of characters remaining in COM0 transmit buffer
002487  002726  //       : that was previously allocated with com_TXbuffer(...);
002488  002727        
002489  002728  func com3_TXcount(), 1;
002490  002729  // Syntax: com_TXcount();
002491  002730  // Usage : arg := com_Count();
002492  002731  // Notes : return count of characters remaining in COM0 transmit buffer
002493  002732  //       : that was previously allocated with com_TXbuffer(...);
002494  002733        
002495  002734  func com_TXemptyEvent("function"), 1;  // sets a function to be called when COM0 TX buffer empty
002496  002735  // Usage : arg := com_TXemptyEvent();
002497  002736  // Notes : If a comms TX buffer that was previously allocated with
002498  002737  //       : com_TXbuffer(...);, this function can be used to set up
002499  002738  //       : a function to be called when the COM0 TX buffer is empty.
002500  002739  //       : This is useful for either reloading the TX buffer, setting
002501  002740  //       : or clearing a pin to change the direction of eg a RS485
002502  002741  //       : line driver, or any other form of traffic control.
002503  002742  //       : The event function must not have any parameters.
002504  002743  //       : To disable the event, simply call com_TXemptyEvent(0).
002505  002744  //       : com_TXbuffer(...); also resets any active event.
002506  002745  //       : com_TXemptyEvent returns any previous event function
002507  002746  //       : address, or zero if there was no previous function.
002508  002747        
002509  002748  func com1_TXemptyEvent("function"), 1;
002510  002749  // Usage : arg := com1_TXemptyEvent();
002511  002750  // Notes : If a comms TX buffer that was previously allocated with
002512  002751  //       : com_TXbuffer(...);, this function can be used to set up
002513  002752  //       : a function to be called when the COM0 TX buffer is empty.
002514  002753  //       : This is useful for either reloading the TX buffer, setting
002515  002754  //       : or clearing a pin to change the direction of eg a RS485
002516  002755  //       : line driver, or any other form of traffic control.
002517  002756  //       : The event function must not have any parameters.
002518  002757  //       : To disable the event, simply call com_TXemptyEvent(0).
002519  002758  //       : com_TXbuffer(...); also resets any active event.
002520  002759  //       : com_TXemptyEvent returns any previous event function
002521  002760  //       : address, or zero if there was no previous function.
002522  002761        
002523  002762  func com2_TXemptyEvent("function"), 1;
002524  002763  // Usage : arg := com2_TXemptyEvent();
002525  002764  // Notes : If a comms TX buffer that was previously allocated with
002526  002765  //       : com_TXbuffer(...);, this function can be used to set up
002527  002766  //       : a function to be called when the COM0 TX buffer is empty.
002528  002767  //       : This is useful for either reloading the TX buffer, setting
002529  002768  //       : or clearing a pin to change the direction of eg a RS485
002530  002769  //       : line driver, or any other form of traffic control.
002531  002770  //       : The event function must not have any parameters.
002532  002771  //       : To disable the event, simply call com_TXemptyEvent(0).
002533  002772  //       : com_TXbuffer(...); also resets any active event.
002534  002773  //       : com_TXemptyEvent returns any previous event function
002535  002774  //       : address, or zero if there was no previous function.
002536  002775        
002537  002776  func com3_TXemptyEvent("function"), 1;
002538  002777  // Usage : arg := com3_TXemptyEvent();
002539  002778  // Notes : If a comms TX buffer that was previously allocated with
002540  002779  //       : com_TXbuffer(...);, this function can be used to set up
002541  002780  //       : a function to be called when the COM0 TX buffer is empty.
002542  002781  //       : This is useful for either reloading the TX buffer, setting
002543  002782  //       : or clearing a pin to change the direction of eg a RS485
002544  002783  //       : line driver, or any other form of traffic control.
002545  002784  //       : The event function must not have any parameters.
002546  002785  //       : To disable the event, simply call com_TXemptyEvent(0).
002547  002786  //       : com_TXbuffer(...); also resets any active event.
002548  002787  //       : com_TXemptyEvent returns any previous event function
002549  002788  //       : address, or zero if there was no previous function.
002550  002789        
002551  002790  func com_TXbufferHold("state"), 1; // hold or release a com_TXbuffer
002552  002791  // Usage : arg := com_TXbufferHold(OFF);  // start sending the buffer
002553  002792  // Notes : Expecting that a comms TX buffer that was previously allocated with
002554  002793  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002555  002794  //       : the buffer being sent wile it is being loaded. Mormally, when
002556  002795  //       : using buffered comms, the transmit process will begin
002557  002796  //       : immediately. This is often undesirable for 2 reasons,
002558  002797  //       : 1] you may wish to build a packet then send it later
002559  002798  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002560  002799  //       : as the FIFO buffer is constantly trying to empty while
002561  002800  //       : you are busy tring to fill it.
002562  002801  // return -1 if function is called illegally when TX comms is not buffered.
002563  002802  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002564  002803  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002565  002804        
002566  002805  func com1_TXbufferHold("state"), 1;
002567  002806  // Usage : arg := com1_TXbufferHold(OFF);  // start sending the buffer
002568  002807  // Notes : Expecting that a comms TX buffer that was previously allocated with
002569  002808  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002570  002809  //       : the buffer being sent wile it is being loaded. Mormally, when
002571  002810  //       : using buffered comms, the transmit process will begin
002572  002811  //       : immediately. This is often undesirable for 2 reasons,
002573  002812  //       : 1] you may wish to build a packet then send it later
002574  002813  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002575  002814  //       : as the FIFO buffer is constantly trying to empty while
002576  002815  //       : you are busy tring to fill it.
002577  002816  // return -1 if function is called illegally when TX comms is not buffered.
002578  002817  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002579  002818  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002580  002819        
002581  002820  func com2_TXbufferHold("state"), 1;
002582  002821  // Usage : arg := com2_TXbufferHold(OFF);  // start sending the buffer
002583  002822  // Notes : Expecting that a comms TX buffer that was previously allocated with
002584  002823  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002585  002824  //       : the buffer being sent wile it is being loaded. Mormally, when
002586  002825  //       : using buffered comms, the transmit process will begin
002587  002826  //       : immediately. This is often undesirable for 2 reasons,
002588  002827  //       : 1] you may wish to build a packet then send it later
002589  002828  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002590  002829  //       : as the FIFO buffer is constantly trying to empty while
002591  002830  //       : you are busy tring to fill it.
002592  002831  // return -1 if function is called illegally when TX comms is not buffered.
002593  002832  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002594  002833  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002595  002834        
002596  002835  func com3_TXbufferHold("state"), 1;
002597  002836  // Usage : arg := com3_TXbufferHold(OFF);  // start sending the buffer
002598  002837  // Notes : Expecting that a comms TX buffer that was previously allocated with
002599  002838  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002600  002839  //       : the buffer being sent wile it is being loaded. Mormally, when
002601  002840  //       : using buffered comms, the transmit process will begin
002602  002841  //       : immediately. This is often undesirable for 2 reasons,
002603  002842  //       : 1] you may wish to build a packet then send it later
002604  002843  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002605  002844  //       : as the FIFO buffer is constantly trying to empty while
002606  002845  //       : you are busy tring to fill it.
002607  002846  // return -1 if function is called illegally when TX comms is not buffered.
002608  002847  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002609  002848  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002610  002849        
002611  002850  func com_Mode("8" ,"N", "1", "comport"), 1 ;
002612  002851  // Syntax   : comx_Mode("databits", "parity", "Stopbits", "comport");
002613  002852  // Usage    : comx_Mode(8, 'N', 1, COM0);                        // set COM0 to 8N1
002614  002853  // *Notes   : Data Bits must be 8
002615  002854  //          : Parity may be 'N', 'O' or 'E'.
002616  002855  //          : Stop Bits may be 1 or 2.
002617  002856  // returns true if mode was acceptable
002618  002857        
002619  002858  func com_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
002620  002859  // Syntax   : com_TXblock("buf", "bufsize");
002621  002860  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
002622  002861  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
002623  002862  //          : if a transmit buffer is active and space is available this function will return almost
002624  002863  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
002625  002864        
002626  002865  func com_RXblock("buf", "bufsize"), 0;                       // commence a block reception
002627  002866  // Syntax   : com_RXblock("buf", "bufsize");
002628  002867  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
002629  002868  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
002630  002869  //          : if a receive buffer is active and bufsize characters are available this function will return almost
002631  002870  //          : immediately otherwise it will block until until the required bytes are received.
002632  002871        
002633  002872  func __reserved30(), 0; // do not remove
002634  002873        
002635  002874  //------------------------------------------------------------------//
002636  002875  //        Function Prototypes for I2C
002637  002876  //------------------------------------------------------------------//
002638  002877  func I2C1_Open("speed", "SCLpin", "SDApin"), 1;
002639  002878  // Syntax : I2C1_Openx(speed, SCLpin, SDApin),
002640  002879  // Usage  : I2C1_Open(I2C_MED, PA2, PA3);
002641  002880  // Notes  : configures the required I2C module
002642  002881  //        : see 'I2C timing related constants' and 'pin constants'
002643  002882  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002644  002883  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002645  002884  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002646  002885  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002647  002886  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002648  002887  // Returns: True if successful
002649  002888        
002650  002889        
002651  002890  func I2C2_Open("speed", "SCLpin", "SDApin"), 1;
002652  002891  // Syntax : I2C2_Openx(speed, SCLpin, SDApin),
002653  002892  // Usage  : I2C2_Open(I2C_MED, PA2, PA3);
002654  002893  // Notes  : configures the required I2C module
002655  002894  //        : see 'I2C timing related constants' and 'pin constants'
002656  002895  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002657  002896  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002658  002897  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002659  002898  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002660  002899  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002661  002900  // Returns: True if successful
002662  002901        
002663  002902        
002664  002903  func I2C3_Open("speed", "SCLpin", "SDApin"), 1;
002665  002904  // Syntax : I2C3_Openx(speed, SCLpin, SDApin),
002666  002905  // Usage  : I2C3_Open(I2C_MED, PA2, PA3);
002667  002906  // Notes  : configures the required I2C module
002668  002907  //        : see 'I2C timing related constants' and 'pin constants'
002669  002908  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002670  002909  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002671  002910  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002672  002911  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002673  002912  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002674  002913  // Returns: True if successful
002675  002914        
002676  002915        
002677  002916  func I2C1_Close(), 0;
002678  002917  // Usage : I2C1_Close();
002679  002918  // Notes : disables the I2C1 module.
002680  002919        
002681  002920  func I2C2_Close(), 0;
002682  002921  // Usage : I2C2_Close();
002683  002922  // Notes : disables the I2C2 module.
002684  002923        
002685  002924  func I2C3_Close(), 0;
002686  002925  // Usage : I2C3_Close();
002687  002926  // Notes : disables the I2C3 module.
002688  002927        
002689  002928  func I2C1_Start(), 1;
002690  002929  // Syntax: I2C1_Start();
002691  002930  // Usage : I2C1_Start();
002692  002931  // Notes : generates a Start condition.
002693  002932  //       : returns true if successful (usually ignored)
002694  002933        
002695  002934  func I2C2_Start(), 1;
002696  002935  // Syntax: I2C2_Start();
002697  002936  // Usage : I2C2_Start();
002698  002937  // Notes : generates a Start condition.
002699  002938  //       : returns true if successful (usually ignored)
002700  002939        
002701  002940  func I2C3_Start(), 1;
002702  002941  // Syntax: I2C3_Start();
002703  002942  // Usage : I2C3_Start();
002704  002943  // Notes : generates a Start condition.
002705  002944  //       : returns true if successful (usually ignored)
002706  002945        
002707  002946  func I2C1_Stop(), 1;
002708  002947  // Syntax: I2C1_Stop();
002709  002948  // Usage : I2C1_Stop();
002710  002949  // Notes : generates a Stop condition.
002711  002950  //       : returns true if successful (usually ignored)
002712  002951        
002713  002952  func I2C2_Stop(), 1;
002714  002953  // Syntax: I2C2_Stop();
002715  002954  // Usage : I2C2_Stop();
002716  002955  // Notes : generates a Stop condition.
002717  002956  //       : returns true if successful (usually ignored)
002718  002957        
002719  002958  func I2C3_Stop(), 1;
002720  002959  // Syntax: I2C3_Stop();
002721  002960  // Usage : I2C3_Stop();
002722  002961  // Notes : generates a Stop condition.
002723  002962  //       : returns true if successful (usually ignored)
002724  002963        
002725  002964  func I2C1_Restart(), 1;
002726  002965  // Syntax: I2C1_Restart();
002727  002966  // Usage : I2C1_Restart();
002728  002967  // Notes : generates a Restart condition.
002729  002968  //       : returns true if successful (usually ignored)
002730  002969        
002731  002970  func I2C2_Restart(), 1;
002732  002971  // Syntax: I2C2_Restart();
002733  002972  // Usage : I2C2_Restart();
002734  002973  // Notes : generates a Restart condition.
002735  002974  //       : returns true if successful (usually ignored)
002736  002975        
002737  002976  func I2C3_Restart(), 1;
002738  002977  // Syntax: I2C3_Restart();
002739  002978  // Usage : I2C3_Restart();
002740  002979  // Notes : generates a Restart condition.
002741  002980  //       : returns true if successful (usually ignored)
002742  002981        
002743  002982  func I2C1_Read(), 1;
002744  002983  // Syntax: I2C1_Read();
002745  002984  // Usage : ch := I2C1_Read();
002746  002985  // Notes : reads a single byte from the I2C Bus.
002747  002986        
002748  002987  func I2C2_Read(), 1;
002749  002988  // Syntax: I2C2_Read();
002750  002989  // Usage : ch := I2C2_Read();
002751  002990  // Notes : reads a single byte from the I2C Bus.
002752  002991        
002753  002992  func I2C3_Read(), 1;
002754  002993  // Syntax: I2C3_Read();
002755  002994  // Usage : ch := I2C3_Read();
002756  002995  // Notes : reads a single byte from the I2C Bus.
002757  002996        
002758  002997  func I2C1_Write("byte"), 1;
002759  002998  // Syntax: I2C1_Write(byte);
002760  002999  // Usage : r := I2C1_Write(ch);
002761  003000  // Notes : is used to write a byte to the I2C bus.
002762  003001  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002763  003002        
002764  003003  func I2C2_Write("byte"), 1;
002765  003004  // Syntax: I2C2_Write(byte);
002766  003005  // Usage : r := I2C2_Write(ch);
002767  003006  // Notes : is used to write a byte to the I2C bus.
002768  003007  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002769  003008        
002770  003009  func I2C3_Write("byte"), 1;
002771  003010  // Syntax: I2C3_Write(byte);
002772  003011  // Usage : r := I2C3_Write(ch);
002773  003012  // Notes : is used to write a byte to the I2C bus.
002774  003013  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002775  003014        
002776  003015  func I2C1_Ack(), 0;
002777  003016  // Syntax: I2C1_Ack();
002778  003017  // Usage : I2C1_Ack();
002779  003018  // Notes : generates the acknowledge condition.
002780  003019        
002781  003020  func I2C2_Ack(), 0;
002782  003021  // Syntax: I2C2_Ack();
002783  003022  // Usage : I2C2_Ack();
002784  003023  // Notes : generates the acknowledge condition.
002785  003024        
002786  003025  func I2C3_Ack(), 0;
002787  003026  // Syntax: I2C3_Ack();
002788  003027  // Usage : I2C3_Ack();
002789  003028  // Notes : generates the acknowledge condition.
002790  003029        
002791  003030  func I2C1_Nack(), 0;
002792  003031  // Syntax: I2C1_Nack();
002793  003032  // Usage : I2C1_Nack();
002794  003033  // Notes : generates the negative acknowledge condition.
002795  003034        
002796  003035  func I2C2_Nack(), 0;
002797  003036  // Syntax: I2C2_Nack();
002798  003037  // Usage : I2C2_Nack();
002799  003038  // Notes : generates the negative acknowledge condition.
002800  003039        
002801  003040  func I2C3_Nack(), 0;
002802  003041  // Syntax: I2C3_Nack();
002803  003042  // Usage : I2C3_Nack();
002804  003043  // Notes : generates the negative acknowledge condition.
002805  003044        
002806  003045  func I2C1_AckStatus(), 1;
002807  003046  // Syntax: I2C1_AckStatus();
002808  003047  // Usage : r := I2C1_AckStatus();
002809  003048  // Notes : returns the ACK status from the device.
002810  003049        
002811  003050  func I2C2_AckStatus(), 1;
002812  003051  // Syntax: I2C2_AckStatus();
002813  003052  // Usage : r := I2C2_AckStatus();
002814  003053  // Notes : returns the ACK status from the device.
002815  003054        
002816  003055  func I2C3_AckStatus(), 1;
002817  003056  // Syntax: I2C3_AckStatus();
002818  003057  // Usage : r := I2C3_AckStatus();
002819  003058  // Notes : returns the ACK status from the device.
002820  003059        
002821  003060  func I2C1_AckPoll("control"), 1;
002822  003061  // Syntax: I2C1_AckPoll();
002823  003062  // Usage : r := I2C1_AckPoll(0xA0);
002824  003063  // Notes : waits for a device to return from ACK polling.
002825  003064        
002826  003065  func I2C2_AckPoll("control"), 1;
002827  003066  // Syntax: I2C2_AckPoll();
002828  003067  // Usage : r := I2C2_AckPoll(0xA0);
002829  003068  // Notes : waits for a device to return from ACK polling.
002830  003069        
002831  003070  func I2C3_AckPoll("control"), 1;
002832  003071  // Syntax: I2C3_AckPoll();
002833  003072  // Usage : r := I2C3_AckPoll(0xA0);
002834  003073  // Notes : waits for a device to return from ACK polling.
002835  003074        
002836  003075  func I2C1_Idle(), 1;
002837  003076  // Syntax : I2C1_Idle();
002838  003077  // Usage  : r := I2C1_Idle();
002839  003078  // Notes  : waits until the I2C Bus is Inactive.
002840  003079  //        : Times out if bus not idle within 1 second
002841  003080  // Returns: TRUE if successful, else failed (timed out)
002842  003081        
002843  003082  func I2C2_Idle(), 1;
002844  003083  // Syntax : I2C2_Idle();
002845  003084  // Usage  : r := I2C2_Idle();
002846  003085  // Notes  : waits until the I2C Bus is Inactive.
002847  003086  //        : Times out if bus not idle within 1 second
002848  003087  // Returns: TRUE if successful, else failed (timed out)
002849  003088        
002850  003089  func I2C3_Idle(), 1;
002851  003090  // Syntax : I2C3_Idle();
002852  003091  // Usage  : r := I2C3_Idle();
002853  003092  // Notes  : waits until the I2C Bus is Inactive.
002854  003093  //        : Times out if bus not idle within 1 second
002855  003094  // Returns: TRUE if successful, else failed (timed out)
002856  003095        
002857  003096        
002858  003097  func I2C1_Gets("buffer", "size"), 1;
002859  003098  // Syntax: I2C1_Gets("buffer", "size");
002860  003099  // Usage : r := I2C1_Gets(mybuf, 16);
002861  003100  // Notes : only reads up to "size" characters into "buffer"
002862  003101  //       : Reads up to asciiz terminator including terminator
002863  003102        
002864  003103  func I2C2_Gets("buffer", "size"), 1;
002865  003104  // Syntax: I2C2_Gets("buffer", "size");
002866  003105  // Usage : r := I2C2_Gets(mybuf, 16);
002867  003106  // Notes : only reads up to "size" characters into "buffer"
002868  003107  //       : Reads up to asciiz terminator including terminator
002869  003108        
002870  003109  func I2C3_Gets("buffer", "size"), 1;
002871  003110  // Syntax: I2C3_Gets("buffer", "size");
002872  003111  // Usage : r := I2C3_Gets(mybuf, 16);
002873  003112  // Notes : only reads up to "size" characters into "buffer"
002874  003113  //       : Reads up to asciiz terminator including terminator
002875  003114        
002876  003115  func I2C1_Getn("buffer", "size"), 1;
002877  003116  // Syntax: I2C1_Gets("buffer", "size");
002878  003117  // Usage : r := I2C1_Gets(mybuf, 16);
002879  003118  // Notes : reads "size" bytes into "buffer"
002880  003119  //       :
002881  003120        
002882  003121  func I2C2_Getn("buffer", "size"), 1;
002883  003122  // Syntax: I2C2_Gets("buffer", "size");
002884  003123  // Usage : r := I2C2_Gets(mybuf, 16);
002885  003124  // Notes : reads "size" bytes into "buffer"
002886  003125  //       :
002887  003126        
002888  003127  func I2C3_Getn("buffer", "size"), 1;
002889  003128  // Syntax: I2C3_Gets("buffer", "size");
002890  003129  // Usage : r := I2C3_Gets(mybuf, 16);
002891  003130  // Notes : reads "size" bytes into "buffer"
002892  003131  //       :
002893  003132        
002894  003133  func I2C1_Puts("buffer"), 1;
002895  003134  // Syntax: I2C1_Puts("buffer");
002896  003135  // Usage : r := I2C1_Puts(mybuf);
002897  003136  // Notes : writes an asciiz string to the I2C device
002898  003137  //       : returns count of characters written
002899  003138        
002900  003139  func I2C2_Puts("buffer"), 1;
002901  003140  // Syntax: I2C2_Puts("buffer");
002902  003141  // Usage : r := I2C2_Puts(mybuf);
002903  003142  // Notes : writes an asciiz string to the I2C device
002904  003143  //       : returns count of characters written
002905  003144        
002906  003145  func I2C3_Puts("buffer"), 1;
002907  003146  // Syntax: I2C3_Puts("buffer");
002908  003147  // Usage : r := I2C3_Puts(mybuf);
002909  003148  // Notes : writes an asciiz string to the I2C device
002910  003149  //       : returns count of characters written
002911  003150        
002912  003151  func I2C1_Putn("buffer", "count"), 1;
002913  003152  // Syntax: I2C1_Putn("buffer","count");
002914  003153  // Usage : r := I2C1_Puts(mybuf,10);
002915  003154  // Notes : writes up to "size" bytes to the I2C device
002916  003155  //       : returns number of bytes written
002917  003156        
002918  003157  func I2C2_Putn("buffer", "count"), 1;
002919  003158  // Syntax: I2C2_Putn("buffer","count");
002920  003159  // Usage : r := I2C2_Puts(mybuf,10);
002921  003160  // Notes : writes up to "size" bytes to the I2C device
002922  003161  //       : returns number of bytes written
002923  003162        
002924  003163  func I2C3_Putn("buffer", "count"), 1;
002925  003164  // Syntax: I2C3_Putn("buffer","count");
002926  003165  // Usage : r := I2C3_Puts(mybuf,10);
002927  003166  // Notes : writes up to "size" bytes to the I2C device
002928  003167  //       : returns number of bytes written
002929  003168        
002930  003169        
002931  003170  func spi_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002932  003171  // Syntax   : spi_ReadBlock("buf", "bufsize");
002933  003172  // Usage    : spi_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002934  003173  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002935  003174        
002936  003175  func spi1_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002937  003176  // Syntax   : spi1_ReadBlock("buf", "bufsize");
002938  003177  // Usage    : spi1_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002939  003178  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002940  003179        
002941  003180  func spi2_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002942  003181  // Syntax   : spi2_ReadBlock("buf", "bufsize");
002943  003182  // Usage    : spi2_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002944  003183  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002945  003184        
002946  003185  func spi3_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002947  003186  // Syntax   : spi3_ReadBlock("buf", "bufsize");
002948  003187  // Usage    : spi3_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002949  003188  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002950  003189        
002951  003190  // I2C timing related constants
002952  003191  #CONST
002953  003199  #END
002954  003200        
002955  003201        
002956  003202        
002957  003203  //------------------------------------------------------------------//
002958  003204  // Direct uSD (SPI0) card SPI functions                             //
002959  003205  //------------------------------------------------------------------//
002960  003206  func spi_Init("speed","ip_mode","op_mode"), 0;  // set the SPI port, not used if uSD active
002961  003207  func spi_Read(), 1;                             // read a raw byte from SPI (lowers CS)
002962  003208  func spi_Write("byte"), 0;                      // write a raw byte to SPI (lowers CS)
002963  003209  func spi_Disable(), 0;                          // disable SPI reading or writing (raise CS)
002964  003210                                                  //
002965  003211        
002966  003212  //------------------------------------------------------------------//
002967  003213  // Function prototypes for SPI1, SPI2 and SPI3                      //
002968  003214  //------------------------------------------------------------------//
002969  003215  func SPI1_SDO_pin("pin"), 1;                // select the hardware pin for SPI1 transmit line
002970  003216  // Syntax: SPI_SDO_pin(pin);
002971  003217  // Usage : SPI_SDO_pin(PA1); // set SPI SDO to PA1 pin
002972  003218  // Notes : Select the hardware pin for SPIx transmit line.
002973  003219  //       : Note that multiple pins can be connected simmultaneously.
002974  003220  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002975  003221  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002976  003222  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002977  003223  //       : The pin is automatically set to an output.
002978  003224  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002979  003225        
002980  003226  func SPI2_SDO_pin("pin"), 1;                // select the hardware pin for SPI2 transmit line
002981  003227  // Syntax: SPI2_SDO_pin(pin);
002982  003228  // Usage : SPI2_SDO_pin(PA1); // set SPI2 SDO to PA1 pin
002983  003229  // Notes : Select the hardware pin for SPIx transmit line.
002984  003230  //       : Note that multiple pins can be connected simmultaneously.
002985  003231  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002986  003232  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002987  003233  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002988  003234  //       : The pin is automatically set to an output.
002989  003235  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002990  003236        
002991  003237  func SPI3_SDO_pin("pin"), 1;                // select the hardware pin for SPI3 transmit line
002992  003238  // Syntax: SPI3_SDO_pin(pin);
002993  003239  // Usage : SPI3_SDO_pin(PA1); // set SPI3 SDO to PA1 pin
002994  003240  // Notes : Select the hardware pin for SPIx transmit line.
002995  003241  //       : Note that multiple pins can be connected simmultaneously.
002996  003242  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002997  003243  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002998  003244  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002999  003245  //       : The pin is automatically set to an output.
003000  003246  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003001  003247        
003002  003248  func SPI1_SDI_pin("pin"), 1;                // select the hardware pin for SPI1 receive line
003003  003249  // Syntax: SPI1_SDI_pin(pin);
003004  003250  // Usage : SPI1_SDI_pin(PA3); // set SPI1 SDI to PA3 pin
003005  003251  // Notes : Selects the hardware pin for SPIx receive line.
003006  003252  //       : Note that only a single pin can be mapped to SPI SDI.
003007  003253  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003008  003254  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003009  003255  //       : If the pin argument is 0 the function has no effect
003010  003256  //       : The pin is automatically set to an input.
003011  003257  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003012  003258  //       : it is necessary to configure the SDI pin first, eg
003013  003259  //       :     SPI1_SDI_pin(PA3);     // configure SPI1 SDI to PA3 (this disconnects anything else)
003014  003260  //       :     SPI1_SDO_pin(PA3));    // configure SPI1 SDO to PA3
003015  003261  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003016  003262        
003017  003263  func SPI2_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003018  003264  // Syntax: SPI2_SDI_pin(pin);
003019  003265  // Usage : SPI2_SDI_pin(PA3); // set SPI2 SDI to PA3 pin
003020  003266  // Notes : Selects the hardware pin for SPIx receive line.
003021  003267  //       : Note that only a single pin can be mapped to SPI SDI.
003022  003268  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003023  003269  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003024  003270  //       : If the pin argument is 0 the function has no effect
003025  003271  //       : The pin is automatically set to an input.
003026  003272  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003027  003273  //       : it is necessary to configure the SDI pin first, eg
003028  003274  //       :     SPI2_SDI_pin(PA3);     // configure SPI2 SDI to PA3 (this disconnects anything else)
003029  003275  //       :     SPI2_SDO_pin(PA3));    // configure SPI2 SDO to PA3
003030  003276  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003031  003277        
003032  003278  func SPI3_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003033  003279  // Syntax: SPI3_SDI_pin(pin);
003034  003280  // Usage : SPI3_SDI_pin(PA3); // set SPI3 SDI to PA3 pin
003035  003281  // Notes : Selects the hardware pin for SPIx receive line.
003036  003282  //       : Note that only a single pin can be mapped to SPI SDI.
003037  003283  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003038  003284  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003039  003285  //       : If the pin argument is 0 the function has no effect
003040  003286  //       : The pin is automatically set to an input.
003041  003287  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003042  003288  //       : it is necessary to configure the SDI pin first, eg
003043  003289  //       :     SPI3_SDI_pin(PA3);     // configure SPI3 SDI to PA3 (this disconnects anything else)
003044  003290  //       :     SPI3_SDO_pin(PA3));    // configure SPI3 SDO to PA3
003045  003291  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003046  003292        
003047  003293  func SPI1_SCK_pin("pin"), 1;                // select the hardware pin for SPI1 clock line
003048  003294  // Syntax: SPI1_SCK_pin(pin);
003049  003295  // Usage : SPI1_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003050  003296  // Notes : Selects the hardware pin for SPI clock line.
003051  003297  //       : Note that only a single pin should be mapped to spi SCK.
003052  003298  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003053  003299  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003054  003300  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003055  003301  //       : The pin is automatically set to an output.
003056  003302  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003057  003303        
003058  003304  func SPI2_SCK_pin("pin"), 1;                // select the hardware pin for SPI2 clock line
003059  003305  // Syntax: SPI2_SCK_pin(pin);
003060  003306  // Usage : SPI2_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003061  003307  // Notes : Selects the hardware pin for SPI clock line.
003062  003308  //       : Note that only a single pin should be mapped to spi SCK.
003063  003309  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003064  003310  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003065  003311  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003066  003312  //       : The pin is automatically set to an output.
003067  003313  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003068  003314        
003069  003315  func SPI3_SCK_pin("pin"), 1;                // select the hardware pin for SPI3 clock line
003070  003316  // Syntax: SPI3_SCK_pin(pin);
003071  003317  // Usage : SPI3_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003072  003318  // Notes : Selects the hardware pin for SPI clock line.
003073  003319  //       : Note that only a single pin should be mapped to spi SCK.
003074  003320  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003075  003321  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003076  003322  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003077  003323  //       : The pin is automatically set to an output.
003078  003324  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003079  003325        
003080  003326        
003081  003327  func SPI1_Init("speed","mode"), 1;              // set the SPI1 port
003082  003328  func SPI2_Init("speed","mode"), 1;              // set the SPI2 port
003083  003329  func SPI3_Init("speed","mode"), 1;              // set the SPI3 port
003084  003330        
003085  003331        
003086  003332  //------------------------------------------------------------------------------
003087  003333  // Constants for SPI1, SPI2 an SPI3 "mode"
003088  003334  //------------------------------------------------------------------------------
003089  003335  #CONST
003090  003352  #END
003091  003353        
003092  003354  //------------------------------------------------------------------------------
003093  003355  // Constants for SPI1, SPI2 an SPI3 "speed"
003094  003356  //------------------------------------------------------------------------------
003095  003357  #CONST
003096  003374  #END
003097  003375        
003098  003376        
003099  003377  func SPI1_Read(), 1;                                 // read a raw byte from SPI1
003100  003378  func SPI2_Read(), 1;                                 // read a raw byte from SPI2
003101  003379  func SPI3_Read(), 1;                                 // read a raw byte from SPI3
003102  003380        
003103  003381  func SPI1_Write("byte"), 1;                          // write a raw byte to SPI1
003104  003382  func SPI2_Write("byte"), 1;                          // write a raw byte to SPI2
003105  003383  func SPI3_Write("byte"), 1;                          // write a raw byte to SPI3
003106  003384        
003107  003385  func spi_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003108  003386  // Syntax   : spi_WriteBlock("buf", "bufsize");
003109  003387  // Usage    : spi_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003110  003388  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003111  003389        
003112  003390  func spi1_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003113  003391  // Syntax   : spi1_WriteBlock("buf", "bufsize");
003114  003392  // Usage    : spi1_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003115  003393  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003116  003394        
003117  003395  func spi2_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003118  003396  // Syntax   : spi2_WriteBlock("buf", "bufsize");
003119  003397  // Usage    : spi2_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003120  003398  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003121  003399        
003122  003400  func spi3_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003123  003401  // Syntax   : spi3_WriteBlock("buf", "bufsize");
003124  003402  // Usage    : spi3_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003125  003403  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003126  003404        
003127  003405  //------------------------------------------------------------------//
003128  003406  // Display Access                                                   //
003129  003407  //------------------------------------------------------------------//
003130  003408  func disp_SetReg("register", "data"), 0;
003131  003409  // Syntax: display_SetReg(register, data);
003132  003410  // Usage : display_SetReg(arg1, arg2);
003133  003411  // Notes : Sets uLCD specific display driver registers. Refer
003134  003412  //       : to appropriate display driver data sheet.
003135  003413        
003136  003414  func disp_setGRAM("x1","y1","x2","y2"), 0;    // set GRAM window
003137  003415  // Syntax: disp_setGRAM(x1, y1, x2, y2);
003138  003416  // Usage : disp_setGRAM(arg1, arg2, arg3, arg4);
003139  003417  // Notes : Prepares the GRAM area for user access.
003140  003418  //       : Data can now be written with disp_GRAM.
003141  003419  //       : GRAM will be set accordingly for the correct screen mode.
003142  003420  //       : the LO word of the 32 bit pixel count is returned. This is
003143  003421  //       : usually all that is needed unlse GRAM area exceeds 256^2
003144  003422  //       : A copy of the 32bit value can be found in
003145  003423  //       : GRAM_PIXEL_COUNT_LO and GRAM_PIXEL_COUNT_HI
003146  003424        
003147  003425  func disp_WrGRAM("colour"), 0;
003148  003426  // Syntax: display_WrGRAM(colour);
003149  003427  // Usage : display_WrGRAM(arg);
003150  003428  // Notes : Data can be written to the GRAM consecutively using
003151  003429  //       : this function once the GRAM access window has been setup.
003152  003430        
003153  003431  func disp_WriteControl("value"), 0;             // write a control byte to the display
003154  003432        
003155  003433  func disp_WriteWord("value"), 0;                // write a word to the display
003156  003434        
003157  003435        
003158  003436  func disp_ReadWord(), 1;                        // read a word from the display
003159  003437  // Syntax: disp_ReadWord();
003160  003438  // Usage : x:=disp_ReadWord();
003161  003439  // Notes : Read a word from the controller
003162  003440  // Eg:   : disp_WriteControl(0);         // select Ilitek ID register
003163  003441  //       : print(disp_ReadWord());        // print ID
003164  003442  //       : (Many displays are write only)
003165  003443        
003166  003444        
003167  003445  // NB only available on certain displays, check individual data sheets
003168  003446  func sys_StoreTouchCalibration(), 1;
003169  003447  // Syntax: sys_StoreTouchCalibration();
003170  003448  // Usage : r := sys_StoreTouchCalibration();
003171  003449  // Notes : Store the touch calibration values in non-volatile memory.
003172  003450  //       : Returns true if the values have been accepted and stored,
003173  003451  //       : else returns false if write could not be performed, or
003174  003452  //       : touch calibration values are improbable.
003175  003453  //       : The values that are stored are obtained from:-
003176  003454  //       : TOUCH_XMINCAL             78  // touch calibration value
003177  003455  //       : TOUCH_YMINCAL             79  // touch calibration value
003178  003456  //       : TOUCH_XMAXCAL             80  // touch calibration value
003179  003457  //       : TOUCH_YMAXCAL             81  // touch calibration value
003180  003458  //       : refer to the 4DGL example touchCalibrate.4DG for further information.
003181  003459  //       : This function is not supported on uVGA, Capacitive touch
003182  003460  //       : and 4.3" resistive touch modules.
003183  003461        
003184  003462  // NB only available on certain displays, check individual data sheets
003185  003463  func disp_Sync("line"), 0;                      //  (uVGA only)  wait till scanline reaches "line"
003186  003464  // Syntax: disp_Sync(line);
003187  003465  // Usage : disp_Sync(480);
003188  003466  // Notes : Waits till the hardware gets to a certain line.
003189  003467  //       : Allows the program to synchronise writing to the hardware for flicker free operation.
003190  003468  //       : Some experimentation may be needed to find an optimum line for disp_Sync
003191  003469  //       : depending on the graphics operation. The higher the value, the slower
003192  003470  //       : the throughput. A cetain point will be reached (number of scanlines + blanking lines
003193  003471  //       : within the vertical retrace period) where it will just 'hang up' stopping the
003194  003472  //       : entire process. Eg, in 640x480 mode, if the 'lines' value is 507, operation will
003195  003473  //       : be slowest (as its actually right at the end of the blanking period) and 508
003196  003474  //       : will cause a hangup situation as it is above the highes scanline value.
003197  003475  //       : Currently, this function is only supported on displays with SSD1963 driver.
003198  003476        
003199  003477  func disp_Init(), 0;                           // initialize display with required tables. New in v0.7
003200  003478  // Syntax: disp_Init();                        New in v0.7
003201  003479  // Usage : disp_Init();
003202  003480  // Notes : Initialises or reinitialises the display.
003203  003481  //       : Normally used after restoration of peripheral power
003204  003482  //       : and after DeepSleep.
003205  003483        
003206  003484  func disp_Disconnect(), 0;                     // Disconnect display to ensure reduced power after disabling peripheral power. New in v0.7
003207  003485  // Syntax: disp_Disconnect();                  New in v0.7
003208  003486  // Usage : disp_Disconnect();
003209  003487  // Notes : Disconnects the display driver pins and/or reconfigures it to achieve
003210  003488  //       : its lowest possible power consumption. Use after disabling peripheral power
003211  003489  //       : to ensure the minimal power usage by the display.
003212  003490  //       : disp_Init() should be used to reinitialise the display.
003213  003491        
003214  003492  func disp_BlitPixelsFromCOM0(), 0;                     // Writes current GRAM window pixels to the display from the COM port
003215  003493  // Syntax: disp_BlitPixelsFromCOM0();                  New in v1.1
003216  003494  // Usage : disp_BlitPixelsFromCOM0();
003217  003495  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
003218  003496  //       : display from the specified com port.
003219  003497        
003220  003498  func __reserved42(), 0; // do not remove
003221  003499        
003222  003500        
003223  003501  //------------------------------------------------------------------//
003224  003502  //        Image Control Function Prototypes                         //
003225  003503  //------------------------------------------------------------------//
003226  003504  func img_SetPosition("handle", "index", "xpos", "ypos"), 1;
003227  003505  // Syntax: img_SetPosition(handle, index, xpos, ypos);
003228  003506  // Usage : r := img_SetPosition(hImageList, imagenum, x, y);
003229  003507  // Notes : set the position where the image will be displayed
003230  003508  //       : returns true if index was ok and function was successful.
003231  003509  //       : you may turn off an image so when img_Refresh is called,
003232  003510  //       : the image will not be shown
003233  003511        
003234  003512  func img_Enable("handle", "index"), 1;
003235  003513  // Syntax: img_Enable(handle, index);
003236  003514  // Usage : r := img_Enable(hImageList, imagenum);
003237  003515  // Notes : enable image in a image list
003238  003516  //       : returns true if index was ok and function was successful.
003239  003517  //       : this is the default state so when img_Refresh is called,
003240  003518  //       : all the images in the list will be shown
003241  003519  //       : if index is set to -1, all of the images are enabled
003242  003520        
003243  003521  func img_Disable("handle", "index"), 1;
003244  003522  // Syntax: img_Disable(handle, index);
003245  003523  // Usage : r := img_Disable(hImageList, imagenum);
003246  003524  // Notes : disable image in a image list
003247  003525  //       : returns true if index was ok and function was successful.
003248  003526  //       : you must turn off an image so when img_Refresh is called,
003249  003527  //       : the image will not be shown.
003250  003528  //       : if index is set to -1, all of the images are disabled
003251  003529        
003252  003530        
003253  003531  func img_Darken("handle", "index"), 1;
003254  003532  // Syntax: img_Darken(handle, index);
003255  003533  // Usage : r := img_Darken(hImageList, imagenum);
003256  003534  // Notes : darken image in a image list
003257  003535  //       : returns true if index was ok and function was successful.
003258  003536  //       : if index is set to -1, all of the images are darkened
003259  003537  //       : NB:- this feature will only work for the next refresh, then
003260  003538  //       : the image reverts back to normal when displayed again.
003261  003539        
003262  003540        
003263  003541  func img_Lighten("handle", "index"), 1;
003264  003542  // Syntax: img_Lighten(handle, index);
003265  003543  // Usage : r := img_Lighten(hImageList, imagenum);
003266  003544  // Notes : lighten image in a image list
003267  003545  //       : returns true if index was ok and function was successful.
003268  003546  //       : if index is set to -1, all of the images are lightened
003269  003547  //       : NB:- this feature will only work for the next refresh, then
003270  003548  //       : the image reverts back to normal when displayed again.
003271  003549        
003272  003550  func img_SetWord("handle", "index", "offset", "word"), 1;
003273  003551  // Syntax: img_SetWord(handle, index, offset, word);
003274  003552  // Usage : img_SetWord(hndl, 5, IMAGE_XPOS, 10);
003275  003553  // Notes : set specified word (0-7) in a image entry
003276  003554  //       : returns TRUE if successful, return value usually ignored.
003277  003555        
003278  003556  func img_GetWord("handle", "index", "offset"), 1;
003279  003557  // Syntax: myvar := img_GetWord("handle", "index", "offset");
003280  003558  // Usage : myvar := img_GetWord(hndl, 5, IMAGE_YPOS);
003281  003559  // Notes : returns specified word (0-14) from an image entry
003282  003560  //       : refer to image control entry offsets.
003283  003561        
003284  003562  func img_Show("handle", "index"), 1;
003285  003563  // Syntax: img_Show(handle, index);
003286  003564  // Usage : display image entry (regardless of enable/disable)
003287  003565  //       : returns TRUE if successful, return value usually ignored.
003288  003566        
003289  003567  func img_SetAttributes("handle", "index","value"), 1;
003290  003568  // Syntax: img_SetAttributes("handle", "index","offset");
003291  003569  // Usage : img_SetAttributes(hndl, 5, I_TOPMOST);
003292  003570  // Notes : This function SETS one or more bits in the IMAGE_FLAGS field
003293  003571  //       : of an image control entry. "value" refers to various bits in
003294  003572  //       : the image control entry (see image attribute flags).
003295  003573  //       : A '1' bit in the "value" field SETS the respective bit
003296  003574  //       : in the IMAGE_FLAGS field of the image control entry.
003297  003575  //       : returns TRUE if successful, return value usually ignored.
003298  003576        
003299  003577  func img_ClearAttributes("handle", "index","value"), 1;
003300  003578  // Syntax: img_ClearAttributes("handle", "index","offset");
003301  003579  // Usage : img_ClearAttributes(hndl, 5, I_TOPMOST);
003302  003580  // Notes : This function CLEARS one or more bits in the IMAGE_FLAGS field
003303  003581  //       : of an image control entry. "value" refers to various bits in
003304  003582  //       : the image control entry (see image attribute flags)
003305  003583  //       : a '1' bit in the "value" field CLEARS the respective bit
003306  003584  //       : in the IMAGE_FLAGS field of the image control entry.
003307  003585  //       : returns TRUE if successful, return value usually ignored.
003308  003586        
003309  003587  func img_Touched("handle", "index"), 1;
003310  003588  // Syntax: r := img_Touched(handle, index);
003311  003589  // Usage : img_Touched(hndl, 17);
003312  003590  //       : returns -1 if image not touched, or returns index
003313  003591  // Notes : if index is passed as -1, function tests all images,
003314  003592  //       : and returns -1 if image not touched, or returns index.
003315  003593        
003316  003594        
003317  003595  func img_SelectReadPosition("handle", "index", "frame", "x", "y"), 1;
003318  003596  // Syntax: img_SelectReadPosition(handle, index, frame, xpos, ypos);
003319  003597  // Usage : r := img_SelectReadPosition(hImageList, imagenum, frame, x, y);
003320  003598  // Notes : set a position in an image control for sequential reading
003321  003599  //       : of pixels from the uSD card (fat16 or raw modes supported)
003322  003600  //       : No image window area is set, the image will not be shown
003323  003601  //       : This function provides a means of preparing to load an image,
003324  003602  //       : or part of an image, to an array. (see img_SequentialRead)
003325  003603  //Returns: returns true if index was ok and function was successful.
003326  003604        
003327  003605        
003328  003606  func img_SequentialRead("count", "ptr"), 1;  // read pixels from selected read position of an image
003329  003607  // Syntax: img_SequentialRead(count, ptr);
003330  003608  // Usage1: r := img_SequentialRead(imgwidth, myArray);    // read 1 line from image control to array
003331  003609  // Usage2: r := img_SequentialRead(123, 0);            // skip 123 words from sequential stream
003332  003610  // Usage3: r := img_SequentialRead(20, 1);            // write 20 pixels to current GRAM position from stream
003333  003611  // Notes : once a position has ben set with the img_SelectReadPosition function,
003334  003612  //       : this function can then used for sequential reading of pixels from
003335  003613  //       : image storage.
003336  003614  //       : if "ptr" is 0, "count" pixels from the stream are simply skipped.
003337  003615  //       : if "ptr" is 1, "count" pixels are written to the GRAM area,
003338  003616  //       : else "ptr" must point to a valid array that is at least
003339  003617  //       : the size of "count".
003340  003618  //       : or part of an image, to an array. (see img_SequentialRead)
003341  003619  //       : returns TRUE if function succeded.
003342  003620        
003343  003621  func __reserved43(), 0; // do not remove
003344  003622  func __reserved44(), 0; // do not remove
003345  003623  func __reserved45(), 0; // do not remove
003346  003624  func __reserved46(), 0; // do not remove
003347  003625        
003348  003626  // image control header offsets
003349  003627  #CONST
003350  003634  #END
003351  003635        
003352  003636  // image control entry offsets
003353  003637  #CONST
003354  003652  #END
003355  003653        
003356  003654  // image attribute flags (in IMAGE_FLAGS)
003357  003655  // for img_SetAttributes(...) and img_ClearAttributes(...)
003358  003656  #CONST
003359  003670  #END
003360  003671        
003361  003672        
003362  003673  //------------------------------------------------------------------//
003363  003674  //        Timer Function Prototypes
003364  003675  //------------------------------------------------------------------//
003365  003676  func sys_T(), 1;
003366  003677  // Syntax: sys_T();
003367  003678  // Usage : t := sys_T();
003368  003679  // Notes : return the current value of the rolling system timer (1msec) LO word
003369  003680        
003370  003681  func sys_T_HI(), 1;
003371  003682  // Syntax: sys_T_HI();
003372  003683  // Usage : t := sys_T_HI();
003373  003684  // Notes : return the current value of the rolling system timer (1msec) HI word
003374  003685        
003375  003686  func sys_SetTimer("timernum","value"), 0;
003376  003687  // Syntax: sys_SetTimer("timernum", "value");
003377  003688  // Usage : sys_SetTimer(TIMER5, 10000);
003378  003689  // Notes : set a countdown on the selected timer, or 'top up' if required.
003379  003690  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003380  003691  //       : Maximum timeout period is 65.535 seconds
003381  003692  //       : A timer can be read with the sys_GetTimer("timernum") function
003382  003693        
003383  003694  func sys_GetTimer("timernum"), 1;
003384  003695  // Syntax: t := sys_GetTimer("timernum");
003385  003696  // Usage : t := sys_GetTimer(TIMER3);
003386  003697  // Notes : returns 0 if timer has expired, or the current countdown value.
003387  003698  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003388  003699  //       : Maximum timeout period is 65.535 seconds
003389  003700  //       : A timer must be set with the sys_SetTimer("timernum","value") function
003390  003701        
003391  003702  func sys_SetTimerEvent("timernum","function"), 1;
003392  003703  // Syntax: sys_SetTimerFunction("timernum", "function");
003393  003704  // Usage : sys_SetTimer(TIMER5, myfunc);
003394  003705  // Notes : set a function to be called for selected timer.
003395  003706  //       : When the timer reaches zero, the function is called.
003396  003707  //       : The called function must not have any parameters
003397  003708  //       : sys_SetTimerEvent returns any previous event function
003398  003709  //       : address, or zero if there was no previous function.
003399  003710        
003400  003711  func sys_EventQueue(), 1;
003401  003712  // Syntax: sys_EventQueue();
003402  003713  // Usage : tasks := sys_EventQueue();
003403  003714  // Notes : returns the max number of events that were pending
003404  003715  //       : in the timer queue since the last call to this function.
003405  003716  //       : This can be used to assess timer event overhead burden,
003406  003717  //       : especially after or during a sys_EventsPostpone action.
003407  003718        
003408  003719  func sys_EventsPostpone(), 0;
003409  003720  // Syntax: sys_EventPostpone();
003410  003721  // Usage : sys_EventPostpone();   // postpone the event queue
003411  003722  // Notes : postpone any events until the sys_EventResume function is executed
003412  003723  //       : The timer event queue will continue to queue events, but no action
003413  003724  //       : will take place untill a sys_EventResume function is encountered.
003414  003725  //       : The queue will continue to receive up to 32 events before discarding
003415  003726  //       : any further events. This function is required to allow a sequence of
003416  003727  //       : instructions or functions to occur that would otherwise be corrupted
003417  003728  //       : by an event occuring during the sequence of instructions or functions.
003418  003729  //       : A good example of this is when you set a position to print, if there
003419  003730  //       : was no way of locking the current sequence, an event may occur which
003420  003731  //       : does a similar thing, and a contention would occur - printing to
003421  003732  //       : the wrong position. This function should be used wisely, if any action
003422  003733  //       : that is required would take considerable time, it is better to disable
003423  003734  //       : any conflicting event functions with a bypass flag, then restart the
003424  003735  //       : conflicting event by re-issuing a timer value.
003425  003736        
003426  003737  func sys_EventsResume(), 0;
003427  003738  // Syntax: sys_EventsResume();
003428  003739  // Usage : sys_EventsResume();   // resume the event queue
003429  003740  // Notes : resume any postponed events. The queue will try to execute any timer
003430  003741  //       : events that were incurred during the postponed period.
003431  003742        
003432  003743        
003433  003744  func sys_GetTime(), 0;
003434  003745  // Syntax: sys_GetTime();
003435  003746  // Usage : to(mystring); sys_GetTime();   // save current time string to buffer
003436  003747  // Notes : print the system time in the format eg "6:10:45"
003437  003748  //       : Can be captured to a buffer using the to( function
003438  003749  //       : Returns nothing.
003439  003750        
003440  003751  func sys_SetTime("hours", "mins", "secs"), 1;
003441  003752  // Syntax: sys_SetTime(h, m, s);
003442  003753  // Usage : sys_SetTime(10, 0, 0);   // set the system time
003443  003754  // Notes : Used to set clock to correct time after power up or suspension
003444  003755  //Returns: Returns true if valid time.
003445  003756        
003446  003757  func sys_GetDate(), 0;
003447  003758  // Syntax: sys_GetDate();
003448  003759  // Usage : to(mystring); sys_GetDate();   // save current time string to buffer
003449  003760  // Notes : print the system date in the format eg "25-09-2012"
003450  003761  //       : Can be captured to a buffer using the to( function
003451  003762  //       : Returns nothing.
003452  003763        
003453  003764  func sys_SetDate("year", "month", "day"), 1;
003454  003765  // Syntax: sys_SetDate(y, m, d);
003455  003766  // Usage : sys_SetDate(10, 0, 0);   // set the system time
003456  003767  // Notes : Used to set clock to correct date after power up or suspension
003457  003768  //Returns: Returns true if valid date.
003458  003769        
003459  003770  func sys_Sleep("units"), 1;
003460  003771  // Syntax: t := sys_Sleep("units");
003461  003772  // Usage : t := sys_Sleep(10);
003462  003773  // Notes : sets the display into low power mode for a period of time.
003463  003774  //       : Touching the touch screen will also wake from sleep.
003464  003775  //       : as will bus Change Interrupts.
003465  003776  //       : Returns remaining sleep units.
003466  003777        
003467  003778  func iterator("offset"), 0;
003468  003779  // Syntax: t :=  iterator("offset");
003469  003780  // Usage : t :=  iterator(10);
003470  003781  // Notes : set the iterator size for ++/--
003471  003782  //       : The next postinc,postdec,preinc of predec will alter
003472  003783  //       : by the specified value.
003473  003784  //       : The offset will return to 1 after the next operation.
003474  003785        
003475  003786  func sys_DeepSleep("units"), 1;               // put the module into its lowest power consumption mode. New in v0.7
003476  003787  // Syntax: t := sys_DeepSleep("units");    New in v0.7
003477  003788  // Usage : t := sys_DeepSleep(10);
003478  003789  // Notes : sets the display and processor into lowest power mode for a period of time.
003479  003790  //       : When returning from DeepSleep the display should be reinitialised
003480  003791  //       : with disp_Init().
003481  003792  //       : Touching the touch screen will also wake from sleep.
003482  003793  //       : Returns remaining sleep units.
003483  003794        
003484  003795  //------------------------------------------------------------------//
003485  003796  //         Touch Screen Function Prototypes
003486  003797  //------------------------------------------------------------------//
003487  003798        
003488  003799  func touch_DetectRegion("x1" ,"y1", "x2", "y2"), 0;
003489  003800  // Syntax: touch_DetectRegion(x1, y1, x2, y2);
003490  003801  // Usage : touch_DetectRegion(arg1, arg2, arg3, arg4);
003491  003802  // Notes : Specifies a new touch detect region on the screen
003492  003803  //       : such that only touch activity in that region will
003493  003804  //       : be reported by the status poll touch_Get(TOUCH_STATUS);
003494  003805        
003495  003806  func touch_Set("mode"), 0;
003496  003807  // Syntax: touch_Set(mode);
003497  003808  // Usage : touch_Set(arg);
003498  003809  // Notes : Sets various Touch Screen related parameters
003499  003810  //       :
003500  003811  //       : mode = TOUCH_ENABLE (mode 0)  Enable Touch Screen
003501  003812  //       : touch_Set(TOUCH_ENABLE);
003502  003813  //       : Enables and initialises Touch Screen hardware
003503  003814  //       :
003504  003815  //       : mode = TOUCH_DISABLE (mode 1)  Disable Touch Screen
003505  003816  //       : touch_Set(TOUCH_DISABLE );
003506  003817  //       : Disables the Touch Screen
003507  003818  //       : Note: Touch Screen runs in the background and disabling
003508  003819  //       : it when not in use will free up extra resources
003509  003820  //       : such as 4DVM CPU cycles.
003510  003821  //       :
003511  003822  //       : mode = TOUCH_REGIONDEFAULT (mode 2)  Default Touch Region
003512  003823  //       : touch_Set(TOUCH_REGIONDEFAULT);
003513  003824  //       : This will reset the current active region to default
003514  003825  //       : to the full screen without the application having to
003515  003826  //       : set a new active region for the full screen.
003516  003827  //       : (NB for 'no touch' devices - like uVGAII or OLED's/LCD's
003517  003828  //       : that requre to be interfaced with an external pointing
003518  003829  //       : device, values that are poked into TOUCH_DRIVE will be
003519  003830  //       : read with the touch_Get() function)
003520  003831        
003521  003832        
003522  003833  func touch_Get("mode"), 1;
003523  003834  // Syntax: touch_Get(mode);
003524  003835  // Usage : arg1 := touch_Get(arg);
003525  003836  // Notes : Returns various Touch Screen parameters to caller
003526  003837  //       :
003527  003838  //       : mode = TOUCH_STATUS  (mode 0)
003528  003839  //       : var := touch_Get(TOUCH_STATUS);
003529  003840  //       : Returns the various states of the touch screen
003530  003841  //       : 0 = NOTOUCH
003531  003842  //       : 1 = TOUCH_PRESSED
003532  003843  //       : 2 = TOUCH_RELEASED
003533  003844  //       : 3 = TOUCH_MOVING
003534  003845  //       :
003535  003846  //       : mode = TOUCH_GETX   (mode 1)
003536  003847  //       : var := touch_Get(TOUCH_GETX);
003537  003848  //       : Returns the X coordinates of the touch
003538  003849  //       :
003539  003850  //       : mode = TOUCH_GETY   (mode 2)
003540  003851  //       : var := touch_Get(TOUCH_GETY);
003541  003852  //       : Returns the Y coordinates of the touch
003542  003853        
003543  003854        
003544  003855  //touch_Set() related constants
003545  003856  #CONST
003546  003860  #END
003547  003861        
003548  003862  //touch_Get() related constants
003549  003863  #CONST
003550  003871  #END
003551  003872        
003552  003873  func touch_TestBox("&rect"), 1;
003553  003874  // Syntax   : touch_Test(rect);
003554  003875  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
003555  003876  //          : result := touch_Test(r); // check area at 100,200,119,229
003556  003877  // Notes    : rect is an array of 4 vars, x1, y1, width, height (using boxed co-ordinates)
003557  003878  // returns  : Returns true if last touch co-ordinates are within the boxed test area.
003558  003879        
003559  003880  func touch_TestArea("&rect"), 1;
003560  003881  // Syntax   : touch_Test(rect);
003561  003882  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
003562  003883  //          : result := touch_Test(r); // check area at 100,200,119,229
003563  003884  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 (using absolute co-ordinates)
003564  003885  // returns  : Returns true if last touch co-ordinates are within the absolute co-ordinate test area.
003565  003886        
003566  003887        
003567  003888  func __reserved51(), 0; // do not remove
003568  003889  func __reserved52(), 0; // do not remove
003569  003890        
003570  003891  //------------------------------------------------------------------//
003571  003892  //        Memory Allocation Function Prototypes
003572  003893  //------------------------------------------------------------------//
003573  003894        
003574  003895  func mem_Alloc("size"), 1;
003575  003896  // Syntax: mem_Alloc(bytesize);
003576  003897  // Usage : myvar := mem_Alloc(100);
003577  003898  // Notes : Allocate a block of memory to pointer myvar
003578  003899  //       : The allocated memory contains garbage but is a fast allocation.
003579  003900  //       : The block must later be released with mem_Free();
003580  003901  //       : returns 0 if function fails
003581  003902        
003582  003903  func mem_AllocV("size"), 1;
003583  003904  // Syntax: mem_AllocV(bytesize);
003584  003905  // Usage : myvar := mem_AllocV(100);
003585  003906  // Notes : Allocate a block of memory to pointer myvar
003586  003907  //       : The block of memory is filled with signature values
003587  003908  //       : the block starts with A5,5A then fills with incrementing
003588  003909  //       : number eg:- A5,5A,00,01,02,03...FF,00,11....
003589  003910  //       : This can be helpful when debugging
003590  003911  //       : The block must later be released with mem_Free();
003591  003912  //       : returns 0 if function fails
003592  003913        
003593  003914  func mem_AllocZ("size"), 1;
003594  003915  // Syntax: mem_AllocZ(bytesize);
003595  003916  // Usage : myvar := mem_AllocC(100);
003596  003917  // Notes : Allocate a zeroed block of memory to pointer myvar
003597  003918  //       : The block of memory is filled with zeroes
003598  003919  //       : The block must later be released with mem_Free();
003599  003920  //       : returns 0 if function fails
003600  003921        
003601  003922  func mem_Realloc("ptr", "size"), 1;
003602  003923  // Syntax: myvar := mem_Realloc("ptr", "size");
003603  003924  // Usage : myvar := mem_Realloc(ptr, size);
003604  003925  // Notes : The function may move the memory block to a new location,
003605  003926  //       : in which case the new location is returned.
003606  003927  //       : The content of the memory block is preserved up to the lesser
003607  003928  //       : of the new and old sizes, even if the block is moved.
003608  003929  //       : If the new size is larger, the value of the newly allocated
003609  003930  //       : portion is indeterminate. In case that ptr is NULL,
003610  003931  //       : the function behaves exactly as mem_Alloc, assigning a new block
003611  003932  //       : of size bytes and returning a pointer to the beginning of it.
003612  003933  //       : In case that the size is 0, the memory previously allocated in
003613  003934  //       : ptr is deallocated as if a call to mem_Free()was made, and a NULL
003614  003935  //       : pointer is returned.
003615  003936        
003616  003937  func mem_Free("allocation"), 1;
003617  003938  // Syntax: myvar := mem_Free(allocation);
003618  003939  // Usage : myvar := mem_Free(myvar);
003619  003940  // Notes : De-allocate a block of memory previously created with
003620  003941  //       : mem_Alloc(...), mem_AllocV(...); or mem_AllocZ(...);
003621  003942  //       : returns 0 if function fails
003622  003943        
003623  003944  func mem_Heap(), 1;
003624  003945  // Syntax: myvar := mem_Heap();
003625  003946  // Usage : myvar := mem_Heap();
003626  003947  // Notes : returns bytecount available in heap
003627  003948  //       :
003628  003949        
003629  003950  func mem_Set("ptr","char","size"), 1;
003630  003951  // Syntax: mem_Set(ptr,char,bytesize);
003631  003952  // Usage : mem_Set(p, 'A', 100);
003632  003953  // Notes : fill a block of memory with a byte value
003633  003954  //       : Note that count is a byte count, this facilitates
003634  003955  //       : clearing word aligned byte arrays when using word
003635  003956  //       : aligned packed strings.
003636  003957  //       : returns ptr
003637  003958        
003638  003959  func mem_Copy("src", "dest", "bytecount"), 1;
003639  003960  // Syntax: myvar := mem_Copy(src, dest, bytesize);
003640  003961  // Usage : myvar := mem_Copy(p1, p2, 100);
003641  003962  // Notes : copy a word aligned block of memory from src to dest
003642  003963  //       : Note that count is a byte count, this facilitates
003643  003964  //       : copying word aligned byte arrays when using word
003644  003965  //       : aligned packed strings.
003645  003966  //       : returns src
003646  003967        
003647  003968  func mem_Compare("ptr1","ptr2","count"), 1;
003648  003969  // Syntax: myvar := mem_Compare(ptr1,ptr2,bytesize);
003649  003970  // Usage : myvar := mem_Compare(p1, p2, 100);
003650  003971  // Notes : compare word aligned blocks of memory at src, dest
003651  003972  //       : Note that count is a byte count, this facilitates
003652  003973  //       : comparing word aligned byte arrays when using word
003653  003974  //       : aligned packed strings.
003654  003975  //       : returns 0 if we have a match
003655  003976        
003656  003977  func __reserved53(), 0; // do not remove
003657  003978  func __reserved54(), 0; // do not remove
003658  003979        
003659  003980  //------------------------------------------------------------------//
003660  003981  //        FAT16 Function Prototypes
003661  003982  //------------------------------------------------------------------//
003662  003983        
003663  003984  func file_Error(), 1;
003664  003985  // Syntax: myvar := file_Error();
003665  003986  // Usage : e := file_Error();
003666  003987  // Notes : return the most recent file error.
003667  003988  //       :
003668  003989        
003669  003990  func file_Count("filename"), 1;
003670  003991  // Syntax: count := file_Count("filename");
003671  003992  // Usage : count := file_Count("*.4dg");
003672  003993  // Notes : returns number of files found that match the criteria
003673  003994        
003674  003995  func file_Dir("filename"), 1;
003675  003996  // Syntax: count := file_Dir("filename");
003676  003997  // Usage : count := file_Dir("*.4dg");
003677  003998  // Notes : streams a string of filenames that agree with the search key
003678  003999  //       : returns number of files found that match the criteria
003679  004000        
003680  004001  func file_FindFirst("fname"), 1;
003681  004002  // Syntax: res := file_FindFirst("fname");
003682  004003  // Usage : if (file_FindFirst("*.4xe") ....
003683  004004  // Notes : returns true if at least 1 file exists
003684  004005  //       : that satisfies the file argument.
003685  004006  //       : Wildcards are usually used so if
003686  004007  //       : file_FindFirst returns true, further
003687  004008  //       : tests can be made using file_FindNext();
003688  004009  //       : to find all the files that match the
003689  004010  //       : wildcard class. Note that the stream behaviour
003690  004011  //       : is the same as file_Dir.
003691  004012  //       :
003692  004013        
003693  004014  func file_FindNext(), 1;
003694  004015  // Syntax: res := file_FindNext();
003695  004016  // Usage : while ((file_FindNext()) ....
003696  004017  // Notes : returns true if more file exists
003697  004018  //       : that satisfies the file argument
003698  004019  //       : that was given for  file_FindFirst.
003699  004020  //       : Wildcards must be used for
003700  004021  //       : file_FindFirst, else this function will
003701  004022  //       : always return zero as the only occurence
003702  004023  //       : will have already been found.
003703  004024  //       : Note that the stream behaviour
003704  004025  //       : is the same as file_Dir.
003705  004026  //       :
003706  004027        
003707  004028  func file_Exists("fname"), 1;
003708  004029  // Syntax: res := file_Exists("fname"),
003709  004030  // Usage : if(file_Exists("myfile") ....
003710  004031  // Notes : returns true if file exists
003711  004032  //       :
003712  004033        
003713  004034  func file_Open("fname", "mode"), 1;
003714  004035  // Syntax: handle := file_Open("fname","mode"),
003715  004036  // Usage : handle := file_Open("myfile.txt", 'r');
003716  004037  // Notes : returns handle if file exists
003717  004038  //       :
003718  004039        
003719  004040  func file_Close("handle"), 1;
003720  004041  // Syntax: res := file_Close("handle");
003721  004042  // Usage : res := file_Close(hnd1);
003722  004043  // Notes : returns true if file closed ok
003723  004044  //       :
003724  004045        
003725  004046  func file_Read("*dest", "size", "handle"), 1;
003726  004047  // Syntax: res := file_Read("*dest", "size", "handle"),
003727  004048  // Usage : res := file_Read(memblock,20,hnd1);
003728  004049  // Notes : returns number of characters read
003729  004050  //       : if "dest" is zero, data is read direct to GRAM window
003730  004051  //       :
003731  004052        
003732  004053        
003733  004054  func file_Seek("handle", "HiWord", "LoWord"), 1;
003734  004055  // Syntax: res := file_Seek("handle", "HiWord", "LoWord")
003735  004056  // Usage : res := file_Seek(hSource, 0, 0x1234);
003736  004057  // Notes : set file position to 0x00001234 (byte position 4660)
003737  004058  //       : for the file handle so subsequent data may be read
003738  004059  //       : from that position onwards with file_GetC(...),
003739  004060  //       : file_GetW(...) or file_GetS(...), or an image
003740  004061  //       : can be displayed with file_Image(...)
003741  004062  // Notes : returns true if ok, usually ignored
003742  004063        
003743  004064  func file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003744  004065  // Syntax: file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003745  004066  // Usage : res := file_Index(hsource, 0, 1000, 123), 1;
003746  004067  // Notes : set file seek position to 123000
003747  004068  //       : for the file handle so subsequent data may be read
003748  004069  //       : from that record position onwards with file_GetC(...),
003749  004070  //       : file_GetW(...) or file_GetS(...), or an image
003750  004071  //       : can be displayed with file_Image(...)
003751  004072  // Notes : returns true if ok, usually ignored
003752  004073        
003753  004074  func file_Tell("handle", "&HiWord", "&LoWord"), 1;
003754  004075  // Syntax: file_Tell("handle", &HiWord, &LoWord);
003755  004076  // Usage : file_Tell(fhndl, &SizeHi, &SizeLo);
003756  004077  // Notes : Reads the 32 bit file pointer and stores it into 2 variables.
003757  004078  //       : returns true if function succeeded
003758  004079        
003759  004080  func file_Write("*source", "size", "handle"), 1;
003760  004081  // Syntax: res := fwrite("*source", "size", "handle"),
003761  004082  // Usage : res := fwrite(memblock, 20, hnd1);
003762  004083  // Notes : returns number of bytes written
003763  004084  //       :
003764  004085        
003765  004086  func file_Size("handle", "&HiWord", "&LoWord"), 1;
003766  004087  // Syntax: file_Size("handle", &HiWord, &LoWord);
003767  004088  // Usage : file_Size(fhndl, &SizeHi, &SizeLo);
003768  004089  // Notes : Reads the 32 bit file size and stores it into 2 variables.
003769  004090  //       : returns true if function succeeded
003770  004091        
003771  004092  func file_Image("x", "y", "handle"), 1;
003772  004093  // Syntax: file_Image(x, y, handle);
003773  004094  // Usage : file_Image(10, 10, hnd1);
003774  004095  // Notes : Display an image from a file at the current file position.
003775  004096  //       : The image is displayed at x,y (with respect to top left corner).
003776  004097  //       : If there is more than 1 image in the file, it can be
003777  004098  //       : accessed with file_Seek(...)
003778  004099        
003779  004100  func file_ScreenCapture("x", "y", "width", "height", "handle"), 1;
003780  004101  // Syntax: file_ScreenCapture(x, y, w, h, handle);
003781  004102  // Usage : file_ScreenCapture(10, 10, 50,50, hnd1);
003782  004103  // Notes : Save a image from screen to file at the current file position.
003783  004104  //       : The image can later be displayed with file_Image(...);
003784  004105  //       : The file may be opened in append mode to accumulate multiple
003785  004106  //       : images. Later, the images can be accessed with file_Seek(...);
003786  004107  //       : Note that the image will be sector aligned.
003787  004108  //       : All image headers must start on a sector boundary.
003788  004109  //       : The image is saved from x, y (with respect to top left corner)
003789  004110  //       : and the capture area is determined by "width" and "height".
003790  004111  //       : returns 0 if function succeeded
003791  004112        
003792  004113  func file_PutC("char","handle"), 1;
003793  004114  // Syntax: file_PutC("char", "handle");
003794  004115  // Usage : file_PutC('x', hndl);
003795  004116  // Notes : returns true if function succeeded
003796  004117        
003797  004118  func file_GetC("handle"), 1;
003798  004119  // Syntax: file_GetC("handle");
003799  004120  // Usage : mychar := fgetC("handle");
003800  004121  // Notes : returns next char from file
003801  004122        
003802  004123  func file_PutW("word","handle"), 1;
003803  004124  // Syntax: file_PutW("word","handle");
003804  004125  // Usage : file_PutW(0x1234, hndl);
003805  004126  // Notes : returns true if function succeeded
003806  004127        
003807  004128  func file_GetW("handle"), 1;
003808  004129  // Syntax: file_GetW("handle");
003809  004130  // Usage : myword := fgetW("handle");
003810  004131  // Notes : returns next word in file
003811  004132        
003812  004133  func file_PutS("*source", "handle"), 1;
003813  004134  // Syntax: res := file_Puts("*source", "handle"),
003814  004135  // Usage : res := file_Puts(mystring, hnd1);
003815  004136  // Notes : returns number of characters written
003816  004137  //       :
003817  004138        
003818  004139  func file_GetS("*string", "size", "handle"), 1;
003819  004140  // Syntax: res := file_Gets("*string", "size", "handle");
003820  004141  // Usage : res := file_Gets(mystr , 81, hnd1); // read up to 80 chars
003821  004142  // Notes : get a string from a file
003822  004143  //       : returns pointer to string or null if failed.
003823  004144  //       : file_GetS(...) automatically appends a null-terminator to the data read.
003824  004145  //       : NB:- only reads up to "size-1" characters into "string"
003825  004146  //       : file_GetS(...) will stop reading when any of the following conditions are true:
003826  004147  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
003827  004148  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
003828  004149  //       : C] It reaches the end of file
003829  004150  //       : D] A read error occurs.
003830  004151        
003831  004152        
003832  004153  func file_Erase("fname"), 1;
003833  004154  // Syntax: res := file_Erase("fname");
003834  004155  // Usage : res := file_Erase("myfile.txt");
003835  004156  // Notes : returns true if successful
003836  004157  //       :
003837  004158        
003838  004159  func file_Rewind("handle"), 1;
003839  004160  // Syntax: res := file_Rewind("handle");
003840  004161  // Usage : res := file_Rewind(hnd1);
003841  004162  // Notes : returns true if file rewound ok (usually ignored)
003842  004163  //       : resets the file pointer the the beginning of the open file.
003843  004164        
003844  004165  func file_LoadFunction("fname.4xe"), 1;
003845  004166  // Syntax: res := file_LoadFunction("fname.4fn");
003846  004167  // Usage : myfunc := file_LoadFunction(myfuncname);
003847  004168  // Notes : Load a function or program from disk and
003848  004169  //       : return a function pointer to the allocation.
003849  004170  //       : The function can then be invoked just like any other
003850  004171  //       : function would be called via a function pointer.
003851  004172  //       : Parameters may be passed to it in a conventional way.
003852  004173  //       : The function may be discarded at any time when no
003853  004174  //       : longer required, thus freeing its memory resources.
003854  004175  //       : The loaded function can be discarded with mem_Free(..)
003855  004176  //       : eg:
003856  004177  //       : popupWindow := file_LoadFunction("popupWindow1.4fn");
003857  004178  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
003858  004179  //       : then elsewhere in your program:-
003859  004180  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
003860  004181  //       : if(res == QUIT_APPLICATION) goto exitApp;
003861  004182  //       : Later in your program, when popupWindow is no longer
003862  004183  //       : required for the application:-
003863  004184  //       : res := mem_Free(popupWindow);
003864  004185  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
003865  004186  //       : The callers stack is shared by the loaded function,
003866  004187  //       : however any global variables in the loaded function
003867  004188  //       : are private to that function.
003868  004189  //
003869  004190        
003870  004191  func file_Run("fname.4xe", "arglistptr"), 1;
003871  004192  // Syntax: res := file_Run("fname.4xe","arglistptr");
003872  004193  // Usage : res := file_Run(fname, argptr);
003873  004194  // Notes : current program releases any allocated memory but
003874  004195  //       : retains the stack and global memory.
003875  004196  //       : If arglistptr is 0, no arguments are passed, else
003876  004197  //       : arglist points to an array, the first element being
003877  004198  //       : the number of elements in the array.
003878  004199  //       : func 'main' in the called program accepts
003879  004200  //       : the arguments, if any. The arguments can only
003880  004201  //       : be passed by value, no pointers or references can be
003881  004202  //       : used as all memory is cleared before the file
003882  004203  //       : is loaded. Refer to file_Exec and file_LoadFunction
003883  004204  //       : for functions that can pass by reference.
003884  004205        
003885  004206  func file_Exec("fname.4xe", "arglistptr"), 1;
003886  004207  // Syntax: res := file_Exec("fname.4xe","arglistptr");
003887  004208  // Usage : res := file_Exec("fname.4xe","arglistptr");
003888  004209  // Notes : returns like a function, current program
003889  004210  //       : calling program is kept active and control returns to it.
003890  004211  //       : If arglistptr is 0, no arguments are passed, else
003891  004212  //       : arglist points to an array, the first element being
003892  004213  //       : the number of elements in the array.
003893  004214  //       : func 'main' in the called program accepts the arguments.
003894  004215  //       : This function is similar to file_LoadFunction(...), however,
003895  004216  //       : the function argument list is passed by pointer, and
003896  004217  //       : the memory consumed by the function is released as
003897  004218  //       : soon as the function completes.
003898  004219        
003899  004220  func file_LoadImageControl("fname1", "fname2", "mode"), 1;
003900  004221  // Syntax: hImagelist := file_LoadImageControl ("controlfile", "imagefile", "mode"),
003901  004222  // Usage : hImagelist := file_LoadImageControl ("resource.dat", "resource.gci", 0);
003902  004223  // Notes : Reads a control file to create an image list.
003903  004224  //       : Returns NULL if function fails.
003904  004225  //       : Returns a handle (pointer to the memory allocation) to the
003905  004226  //       : image control list that has been created.
003906  004227  //       : "fname1" is the control list filename "*.dat"
003907  004228  //       : "fname2" is the image filename "*.gci"
003908  004229        
003909  004230  // Notes : This function Calculates the size of a chunk of memory required for
003910  004231  //       : a image list and populates it from the image control file ("*.dat")
003911  004232  //       : therefore, when imagelist is no longer required, you must de-allocate
003912  004233  //       : the image list memory by using eg:- mem_Free(hImagelist);
003913  004234  //       : to restore the heap.
003914  004235  //       :
003915  004236  //       : mode 0:- it is assumed that there is a graphics file with the
003916  004237  //       : file extension "fname2.gci". In this case, the images have been stored
003917  004238  //       : in a FAT16 file concurrently, and the offsets that ar derived from the
003918  004239  //       : "fname1.dat" file are saved in the image control so that the image control
003919  004240  //       : can open the file (*.gci) and us file_Seek to get to the position of the
003920  004241  //       : image which can then automatically be displayed using file_Image(xpos, ypos, hSource);
003921  004242  //       : mode 0 builds the image control quickly as it only scans the *.dat file
003922  004243  //       : for the file offsets and save them in the relevant entries in the image control.
003923  004244  //       : The penalty is that images take longer to find when displayed due to file_Seek
003924  004245  //       : overheads.
003925  004246  //
003926  004247  //       : mode 1:- it is assumed that there is a graphics file with the
003927  004248  //       : file extension "fname2.gci". In this case, the images have been stored
003928  004249  //       : in a FAT16 file concurrently, and the offset of the images are saved
003929  004250  //       : in the image control so that image file (*.gci) can be mapped to directly.
003930  004251  //       : The absolute cluster/sector is mapped so file seek does not need to be called
003931  004252  //       : internally. This means that there is no seek time penalty, however, the
003932  004253  //       : image list takes a lot longer to build, as all the seeking is done at control
003933  004254  //       : build time.
003934  004255        
003935  004256  //       : mode 2:- the graphics file with the is placed in a partitioned area
003936  004257  //       : In this case, the images have been stored in a in a known raw area of the FAT16
003937  004258  //       : disk, and the absolute address of the images are saved in the DAT file
003938  004259  //       : This is the fastest operation of the image control as there is no seeking
003939  004260  //       : or other disk activity taking place.
003940  004261        
003941  004262  func file_Mount(), 1;
003942  004263  // Syntax: r := file_Mount();
003943  004264  // Usage : r := file_Mount();
003944  004265  // Notes : Create a control block for FAT16 and mount the File System
003945  004266        
003946  004267  func file_Unmount(), 0;
003947  004268  // Syntax: file_Unmount();
003948  004269  // Usage : file_Unmount();
003949  004270  // Notes : release any control block and buffers for FAT16
003950  004271  //       : and unmount the File System
003951  004272        
003952  004273  func file_PlayWAV("fname1"), 1;
003953  004274  // Syntax: file_PlayWAV("fname1");
003954  004275  // Usage : file_PlayWAV("ding.wav");
003955  004276  // Notes : Play a wave file with filename "fname1"
003956  004277  //       : This function automatically grabs a chunk
003957  004278  //       : of memory for a file buffer, and a wave
003958  004279  //       : buffer. The minimum memory requirement is
003959  004280  //       : about 580 bytes for the disk io service and
003960  004281  //       : a minimum wave buffer size of 1024. The siz
003961  004282  //       : of the wave buffer allocation
003962  004283  //       : can be increased by the snd_BufSize function.
003963  004284  //       : The default size 1024 bytes.
003964  004285  //       : NB the memory is only required during the
003965  004286  //       : duration of play, and is automatically
003966  004287  //       : released while not in use.
003967  004288  //       : See the Sound Class services for other associated controls.
003968  004289  //       : If there are no errors, returns number of blocks to play (1 to 32767)
003969  004290  //       : If errors occured, the folling is returned
003970  004291  //       : -7  : Insufficient memory available for WAV buffer and file
003971  004292  //       : -6  : cant play this rate
003972  004293  //       : -5  : no data chunk found in first rsector
003973  004294  //       : -4  : no format data
003974  004295  //       : -3  : no wave chunk signature
003975  004296  //       : -2  : bad wave file format
003976  004297  //       : -1  : file not found
003977  004298        
003978  004299  func file_Rename("fname1", "fname2"), 1;     // rename a file
003979  004300  // Syntax: file_Rename ("oldname", "newname"),
003980  004301  // Usage : file_Rename ("file.txt", "file.bak");
003981  004302  // Notes : Renames a file on uSD.
003982  004303  //       : Returns FALSE if function fails. (file does not exist, or new filename already exists)
003983  004304  //       : Returns TRUE, if successful.
003984  004305        
003985  004306  func file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second") , 1; // Sets date and time for an open file
003986  004307  // Syntax: res := file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second) ;
003987  004308  // Usage : res := file_SetDate(hndl, 2014, 10, 31, 10, 0, 0)
003988  004309  // Notes : year is a 4 digit year
003989  004310  //       : Due to limitations of FAT16 only even seconds are stored
003990  004311  //       : The handle must be closed before the file information is updated
003991  004312  //       : returns TRUE if date + time + handle valid
003992  004313  //       : returns FLAST if handle invalid, or date or time not valid (only simple checking performed).
003993  004314        
003994  004315  func __reserved57(), 0; // do not remove
003995  004316  func __reserved58(), 0; // do not remove
003996  004317        
003997  004318  //------------------------------------------------------------------------------
003998  004319  // FILEIO Error Code Constants
003999  004320  //------------------------------------------------------------------------------
004000  004321  #CONST
004001  004347  #END
004002  004348        
004003  004349  //------------------------------------------------------------------------------
004004  004350  // DISK struct offsets
004005  004351  //------------------------------------------------------------------------------
004006  004352  #CONST
004007  004369  #END
004008  004370        
004009  004371  //------------------------------------------------------------------------------
004010  004372  // FILE struct offsets
004011  004373  //------------------------------------------------------------------------------
004012  004374  #CONST
004013  004393  #END
004014  004394        
004015  004395        
004016  004396  //------------------------------------------------------------------//
004017  004397  //        Sound Class Services
004018  004398  //------------------------------------------------------------------//
004019  004399        
004020  004400  func snd_Volume("var"), 0;
004021  004401  // Syntax: snd_Volume("var");
004022  004402  // Usage : snd_Volume(30);
004023  004403  // Notes : set sound playback volume.  Var must
004024  004404  //       : be in the range from 8 (min volume)
004025  004405  //       : to 127 (max volume). If var is less
004026  004406  //       : than 8 volume is set to 8, and if
004027  004407  //       : var > 127 it is set to 127.
004028  004408        
004029  004409  func snd_Pitch("pitch"), 1;
004030  004410  // func snd_Pitch("freq"), 1;
004031  004411  // func snd_Pitch(7000), 1; // play the wave file with a sample frequency of 7khz
004032  004412  // Notes : sets the samples playback rate to a different frequency
004033  004413  //       : The minimum value is 4khz
004034  004414  //       : Setting the pitch to zero restores the original sample rate
004035  004415  //       : Return value is the samples original sample rate.
004036  004416        
004037  004417  func snd_BufSize("var"), 0;
004038  004418  // Syntax: snd_BufSize("var");
004039  004419  // Usage : snd_BufSize(2);
004040  004420  // Notes : specify the a memory chunk size for the wavefile buffer.
004041  004421  //       : default size 1024 bytes.
004042  004422  //       : 0 = 1024 bytes (default)
004043  004423  //       : 1 = 2048 bytes
004044  004424  //       : 2 = 4096 bytes
004045  004425  //       : 3 = 8192 bytes
004046  004426        
004047  004427  func snd_Stop(), 0;
004048  004428  // Syntax: snd_Stop();
004049  004429  // Usage : snd_Stop();
004050  004430  // Notes : stop any sound that is playing, releasing
004051  004431  //       : buffers and closes any open wav file.
004052  004432        
004053  004433  func snd_Pause(), 0;
004054  004434  // Syntax: snd_Pause();
004055  004435  // Usage : snd_Pause();
004056  004436  // Notes : pauses any sound that is playing, does nothing
004057  004437  //       : until sound is resumed with snd_Continue().
004058  004438  //       : The sample cam be terminated with snd_Stop.
004059  004439  //       : buffers and closes any open wav file.
004060  004440        
004061  004441  func snd_Continue(), 0;
004062  004442  // Syntax: snd_Continue();
004063  004443  // Usage : snd_Continue();
004064  004444  // Notes : resume any sound that is paused by snd_Pause.
004065  004445        
004066  004446  func snd_Playing(), 1;
004067  004447  // Syntax: snd_Playing();
004068  004448  // Usage : r := snd_Playing();
004069  004449  // Notes : returns 0 if sound has finished playing,
004070  004450  //       : else return number of 512 byte blocks to go.
004071  004451        
004072  004452  func snd_Freq("Freq", "Duration"), 1;
004073  004453  // Syntax: snd_Freq("Freq", "Duration");
004074  004454  // Usage : r := snd_Freq(1000, 2000);
004075  004455  // Notes : Returns 0 if note cannot be played because a wav file is playing
004076  004456  //       : else return True.
004077  004457  //       : Minimum Freq is 20
004078  004458  //       : This will produce a pure Square wave and is designed for driving
004079  004459  //       : Piezo transducers which require this sort of drive. It can also be
004080  004460  //       : used to drive the amp on displays with audio.
004081  004461        
004082  004462        
004083  004463  func __reserved60(), 0; // do not remove
004084  004464  func __reserved61(), 0; // do not remove
004085  004465  func __reserved62(), 0; // do not remove
004086  004466        
004087  004467  //=========================================================================================================
004088  004468  // String functions
004089  004469  //=========================================================================================================
004090  004470        
004091  004471  func str_Ptr("&var"), 1;
004092  004472  // Syntax: str_Ptr(&var);
004093  004473  // Usage : p := str_Ptr(&var);
004094  004474  // Notes : return a byte pointer to a word region
004095  004475        
004096  004476  func str_GetD("&ptr", "&var"), 1;
004097  004477  // Syntax: str_GetD(&ptr, &var);
004098  004478  // Usage : ok := str_GetD(&ptr, &var);
004099  004479  // Notes : convert number in a string to DWORD ( myvar[2] )
004100  004480  //       : returns true if function succeeds, advancing ptr
004101  004481        
004102  004482  func str_GetW("&ptr", "&var"), 1;
004103  004483  // Syntax: str_GetW(&ptr, &var);
004104  004484  // Usage : ok := str_GetW(&ptr, &var);
004105  004485  // Notes : convert number in a string to WORD ( myvar )
004106  004486  //       : returns true if function succeeds, advancing ptr
004107  004487        
004108  004488  func str_GetHexW("&ptr", "&var"), 1;
004109  004489  // Syntax: str_GetHexW(&ptr, &var);
004110  004490  // Usage : ok := str_GetHexW(&ptr, &var);
004111  004491  // Notes : convert HEX number in a string to WORD ( myvar )
004112  004492  //       : returns true if function succeeds, advancing ptr
004113  004493        
004114  004494  func str_GetC("&ptr", "&var"), 1;
004115  004495  // Syntax: str_GetC(&ptr, &var);
004116  004496  // Usage : ok := str_GetC(&ptr, &var);
004117  004497  // Notes : get a valid ascii char in a string to WORD ( myvar )
004118  004498  //       : returns true if function succeeds, advancing ptr
004119  004499        
004120  004500  func str_GetByte("ptr"), 1;
004121  004501  // Syntax: str_GetByte(ptr);
004122  004502  // Usage : myvar := str_GetByte(ptr);
004123  004503  // Notes : get a byte to myvar
004124  004504  //       : returns value
004125  004505        
004126  004506  func str_GetWord("ptr"), 1;
004127  004507  // Syntax: GetWord(ptr);
004128  004508  // Usage : GetWord(ptr);
004129  004509  // Notes : get a word to myvar
004130  004510  //       : returns value
004131  004511        
004132  004512  func str_PutByte("ptr","val"), 0;
004133  004513  // Syntax: str_PutByte(ptr);
004134  004514  // Usage : myvar := str_PutByte(ptr);
004135  004515  // Notes : put a byte at ptr
004136  004516  //       : returns value
004137  004517        
004138  004518  func str_PutWord("ptr","val"), 0;
004139  004519  // Syntax: str_PutWord("ptr","val");
004140  004520  // Usage : str_PutWord(p,100);
004141  004521  // Notes : put word 100 at current pointer location
004142  004522  //       : returns value
004143  004523        
004144  004524  func str_Match("&ptr", "*str"), 1;
004145  004525  // Syntax: str_Match(&ptr, *str);
004146  004526  // Usage : r := str_Match(&p, "hello");
004147  004527  // Notes : Case sensitive match
004148  004528  //       : returns true if function succeded, andvancing pointer to position past
004149  004529  //       : the matched item. Note that any whitespace characters are skipped
004150  004530  //       : in the source string prior to the test.
004151  004531        
004152  004532  func str_MatchI("&ptr", "*str"), 1;
004153  004533  // Syntax: str_MatchI(&ptr, *str);
004154  004534  // Usage : r := str_MatchI(&p, "hello");
004155  004535  // Notes : Case insensitive match
004156  004536  //       : returns true if function succeded, andvancing pointer to position past
004157  004537  //       : the matched item. Note that any whitespace characters are skipped
004158  004538  //       : in the source string prior to the test.
004159  004539        
004160  004540  func str_Find("&ptr", "*str"), 1;
004161  004541  // Syntax: str_Find(&ptr, *str);
004162  004542  // Usage : n := str_Find(&p, "hello");
004163  004543  // Notes : given the address of a pointer to a source string as the
004164  004544  //       : first argument, and a pointer to a test string as the second
004165  004545  //       : argument, attempt to find the position of the matching string
004166  004546  //       : in the source string. The test is performed with case sensitivity.
004167  004547  //       : return 0 if not found, else returns the address of the first
004168  004548  //       : character of the match. NB:- The source pointer is not altered.
004169  004549        
004170  004550  func str_FindI("&ptr", "*str"), 1;
004171  004551  // Syntax: str_Find(&ptr, *str);
004172  004552  // Usage : n := str_Find(&p, "hello");
004173  004553  // Notes : given the address of a pointer to a source string as the
004174  004554  //       : first argument, and a pointer to a test string as the second
004175  004555  //       : argument, attempt to find the position of the matching string
004176  004556  //       : in the source string. The test is performed with no case
004177  004557  //       : sensitivity, eg upper and lower case chars are accepted.
004178  004558  //       : return 0 if not found, else returns the address of the first
004179  004559  //       : character of the match. NB:- The source pointer is not altered.
004180  004560        
004181  004561  func str_Length("ptr"), 1;
004182  004562  // Syntax: str_Length(ptr);
004183  004563  // Usage : len := str_Ptr(mystring);
004184  004564  // Notes : return the length of a byte aligned string excluding terminator
004185  004565        
004186  004566  func str_Printf("&ptr", "*format"), 1;
004187  004567  // Syntax: str_Printf("&ptr", "*format");
004188  004568  // Usage : r := str_Printf(&p, "hello");
004189  004569  // Notes : refer to documentation
004190  004570  //       :
004191  004571        
004192  004572  func str_Cat("dest","src"), 1;
004193  004573  // Syntax: str_Append("&dest","&src");
004194  004574  // Usage : str_Append(&buf,"Hello");
004195  004575  // Notes : Appends a copy of the source string to the destination string.
004196  004576  //       : The terminating null character in destination is overwritten by
004197  004577  //       : the first character of source, and a new null-character is appended
004198  004578  //       : at the end of the new string formed by the concatenation of both in destination.
004199  004579  //       : returns destination.
004200  004580        
004201  004581  func str_CatN("dest","src","count"), 1;
004202  004582  // Syntax: str_Append("&dest","&src","count");
004203  004583  // Usage : str_Append(&buf,"Monday",3);
004204  004584  // Notes : Appends a copy of the source string to the destination string.
004205  004585  //       : The number of characters copied is limited by "count".
004206  004586  //       : The terminating null character in destination is overwritten by
004207  004587  //       : the first character of source, and a new null-character is appended
004208  004588  //       : at the end of the new string formed by the concatenation of both in destination.
004209  004589  //       : returns destination.
004210  004590        
004211  004591        
004212  004592  func str_ByteMove("src", "dest", "count"), 1;
004213  004593  // Syntax   : str_ByteMove(src, dest, bytecount);
004214  004594  // Input    : STR *source points to byte aligned source.
004215  004595  //          : STR *dest   points to byte aligned destination.
004216  004596  //          : VAR count   number of bytes to transfer.
004217  004597  // Usage    : nextpos := str_ByteMove(s, d, 100);
004218  004598  // Notes    : copy bytes from "src" to "dest", stopping only
004219  004599  //          : when "count" is exhausted.
004220  004600  //          : No terminator is appended, it is purely a
004221  004601  //          : byte copy, and any zeroes encountered will
004222  004602  //          : also be copied.
004223  004603  // Returns  : returns a pointer to the end of the destination
004224  004604  //          : (which is "dest" + "count")
004225  004605        
004226  004606        
004227  004607  func str_Copy("dest", "src"), 1;
004228  004608  // Syntax   : str_Copy(dest, src);
004229  004609  // Input    : STR *dest   points to byte aligned destination.
004230  004610  //          : STR *source points to byte aligned source.
004231  004611  // Usage    : nextplace := str_Copy(d, s);
004232  004612  // Notes    : copy a string from "src" to "dest", stopping only
004233  004613  //          : when the end of source string "src" is encountered
004234  004614  //          : (0x00 terminator).
004235  004615  //          : The terminator is always appended, even if "src" is
004236  004616  //          : an empty string.
004237  004617  // Returns  : returns a pointer to the 0x00 string terminator at
004238  004618  //          : end of "dest" (which is "dest" + str_Length(src); )
004239  004619        
004240  004620        
004241  004621  func str_CopyN("dest", "src", "count"), 1;
004242  004622  // Syntax   : str_CopyN(dest, src, bytecount);
004243  004623  // Input    : STR *dest   points to byte aligned destination.
004244  004624  //          : STR *source points to byte aligned source.
004245  004625  //          : VAR count   max number of chars to copy.
004246  004626  // Usage    : nextplace := str_CopyN(d, s, 100);
004247  004627  // Notes    : copy a string from "src" to "dest", stopping only
004248  004628  //          : when "count" is exhausted, or end of source
004249  004629  //          : string "str" is encountered (0x00 string terminator).
004250  004630  //          : The terminator is always appended, even if
004251  004631  //          : "count" is zero, or "src" is a null string.
004252  004632  // Returns  : returns a pointer to the 0x00 string terminator
004253  004633  //          : (which is "dest" + whatever was copied)
004254  004634        
004255  004635        
004256  004636  func __reserved63(), 0; // do not remove
004257  004637  func __reserved64(), 0; // do not remove
004258  004638  func __reserved65(), 0; // do not remove
004259  004639  func __reserved66(), 0; // do not remove
004260  004640        
004261  004641  //=========================================================================================================
004262  004642  // FLASH memory functions
004263  004643  //=========================================================================================================
004264  004644  func flash_GetByte("bank", "ptr"), 1;
004265  004645  // Syntax   : flash_GetByte(bank, ptr);
004266  004646  // Usage    : myvar := flash_GetByte(FLASHBANK_2, 0x0017); // read first byte in data statement of bank 2
004267  004647  // Notes    : Reads a single byte from any flash location.
004268  004648  //          : If the bank is read protected, only the first 2 bytes can be read (0x55, 0xAA)
004269  004649  //          : which is the header signature for a valid program.
004270  004650  // Returns  : the byte value from the location
004271  004651        
004272  004652        
004273  004653  func flash_GetWord("bank", "ptr"), 1;
004274  004654  // Syntax   : flash_GetWord(bank, ptr);
004275  004655  // Usage    : myvar := flash_GetWord(FLASHBANK_2, 0x0000); // read first word in flash bank  (0xAA55)
004276  004656  // Notes    : Reads a single word from any flash location.
004277  004657  //          : The pointer is byte aligned.
004278  004658  //          : If the bank is read protected, only the first word can be read
004279  004659  //          : which is the header signature for a valid program (0xAA55).
004280  004660  // Returns  : the byte value from the location
004281  004661        
004282  004662        
004283  004663  func flash_Copy("bank", "ptr", "dest", "count"), 1;
004284  004664  // Syntax   : flash_Copy(bank, ptr);
004285  004665  // Usage    : myvar := flash_Copy(FLASHBANK_2, 0x1234, mybuf, 20); // read 20 bytes from FLASHBANK_2 starting from 0x1234
004286  004666  // Notes    : Copies bytes from any flash locations to a user buffer.
004287  004667  //          : The destination pointer is byte aligned, so a str_Ptr must be raised to get correct address.
004288  004668  //          : If the bank is read protected, 0 bytes will be read
004289  004669  //          : which is the header signature for a valid program (0xAA55).
004290  004670  // Returns  : the count of bytes transferred.
004291  004671        
004292  004672        
004293  004673  func flash_Run("bank"), 1;
004294  004674  // Syntax    : flash_Run(bankx);
004295  004675  // Usage     : res := flash_Run(FLASHBANK_5);
004296  004676  // Notes     : Restarts the processor, running code from the required
004297  004677  //           : flash bank. bank may be a variable, or one of the
004298  004678  //           : pre-defined constants:-
004299  004679  //           :    FLASHBANK_0                 //0x00
004300  004680  //           :    FLASHBANK_1                 //0x01
004301  004681  //           :    FLASHBANK_2                 //0x02
004302  004682  //           :    FLASHBANK_3                 //0x03
004303  004683  //           :    FLASHBANK_4                 //0x04
004304  004684  //           :    FLASHBANK_5                 //0x05
004305  004685  // returns    : This function should net return as it restarts
004306  004686  //        : the processor and jumps to the required bank,
004307  004687  //        : If it does return, -1 indicates incorrect/invalid
004308  004688  //        : bank number, and -2 indicates no valid program
004309  004689  //        : in the selected bank.
004310  004690        
004311  004691  func flash_Bank(), 1;
004312  004692  // Syntax   : flash_Bank();
004313  004693  // Usage    : myvar := flash_Bank();
004314  004694  // Notes    : Identifies which flash bank the code is running from.
004315  004695  // Returns  : The FLASH bank that code is currently running from, 0-5.
004316  004696        
004317  004697        
004318  004698  func flash_EraseBank("bank", "confirmation"), 1;
004319  004699  // Syntax   : flash_EraseBank(bank, confirmation);
004320  004700  // Usage    : result := flash_EraseBank(FLASHBANK_3, 0xDEAD); // erase an entire flash bank, confirm overwrite of protected program
004321  004701  // Notes    : This function should be used with extreme caution.
004322  004702  //          : The selected bank will be completely erased regardless of FLASH_WRITE_PROTECT status
004323  004703  //          : if the confirmation value is set to hex 0xDEAD. If confirmation is any other value,
004324  004704  //          : a protected bank will not be erased, and function will return with 0
004325  004705  //          : If the destination bank is the same as the execution bank, the processor will reset
004326  004706  //          : upon completion of erase. If the "bank" argument is set to ALL (-1) and confirmation is set to 0xDEAD
004327  004707  //          : FLASHBANK_0 thru FLASHBANK_5 are cleared.
004328  004708  //          : Used with caution, this is a good way to 'clean up' the entire flash when starting new projects.
004329  004709  // Returns  : returns true if the function succeeded
004330  004710  //          : NB:- reset processor if program is erasing itself, or the ALL bank option is selected.
004331  004711        
004332  004712  func flash_LoadFile("bank", "filename"), 1;
004333  004713  // Syntax   : flash_LoadFile(bank, ptr);
004334  004714  // Usage    : result := flash_LoadFile(FLASHBANK_2, "TETRIS10.EXE"); // load the file from disk into FLASHBANK_2
004335  004715  // Notes    : Copies a file from uSD to the required flashbank.
004336  004716  //          : The destination bank cannont be the execution bank, or a bank that is write protected
004337  004717  // Returns  : returns true if the function succeeded.
004338  004718        
004339  004719        
004340  004720  func flash_WriteBlock("sourceptr", "bank", "page"), 1;
004341  004721  // Syntax   : flash_WriteBlock(pbuf, bank, page);
004342  004722  // Usage    : result := flash_WriteBlock(buffer, FLASHBANK_5, 8); // store the 2k buffer to FLASHBANK_5, location 16384
004343  004723  // Notes    : Copies a 2kbyte buffer to the required flashbank in block 0-15.
004344  004724  //          : The address of each block is 0, 2048, 4096 etc, determined by the page number 0-15.
004345  004725  //          : The destination bank cannot be an execution bank, or a program bank that is write protected.
004346  004726  // Returns  : returns true if the function succeeded.
004347  004727        
004348  004728        
004349  004729  func flash_putstr("bank", "ptr"), 1;
004350  004730  // Syntax   : flash_putstr(bank, ptr);
004351  004731  // Usage    : flash_Copy(FLASHBANK_2, 350); // print a string from FLASHBANK_2, location 350
004352  004732  // Notes    : Works the same as putstr, however, the source of the asciiz string is in FLASH storage
004353  004733  //          : Output may be redirected with the to(..) function. Bit15 of ptr is assumed 0.
004354  004734  // Returns  : True if function succeeds, usually ignored. 0 if bank is read protected
004355  004735        
004356  004736  func flash_Blit16("bank", "offset", "count"), 1;
004357  004737  // Syntax   : flash_Blit16(bank, offset, pixelcount);
004358  004738  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit16(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (800 bytes)
004359  004739  // Notes    : Blit an image to a GRAM window from FLASH storage.
004360  004740  //          : Image is stored 16bits per pixel (565) in a linear fashion to suit the GRAM mechanism
004361  004741  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004362  004742        
004363  004743  func flash_Blit8("bank", "offset", "count"), 1;
004364  004744  // Syntax   : flash_Blit8(bank, offset, pixelcount);
004365  004745  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit8(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (400 bytes)
004366  004746  // Notes    : Blit an image to a GRAM window from FLASH storage.
004367  004747  //          : Image is stored 8 bits per pixel (332 format) in a linear fashion to suit the GRAM mechanism
004368  004748  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004369  004749        
004370  004750  func flash_Blit4("bank", "offset", "count", "palette16colour"), 1;
004371  004751  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal16);
004372  004752  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit4(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (200 bytes packed 4:4)
004373  004753  // Notes    : Blit an image to a GRAM window from FLASH storage.
004374  004754  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 16 x 16bit colours
004375  004755  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004376  004756        
004377  004757  func flash_Blit2("bank", "offset", "count", "palette4colour"), 1;
004378  004758  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal4);
004379  004759  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit2(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (100 bytes packed 2:2:2:2)
004380  004760  // Notes    : Blit an image to a GRAM window from FLASH storage.
004381  004761  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 4 x 16bit colours
004382  004762  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004383  004763        
004384  004764  func flash_Blit1("bank", "offset", "count", "pallete2colour"), 1;
004385  004765  // Syntax   : flash_Blit1(bank, offset, pixelcount, pal2);
004386  004766  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit1(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (50 bytes packed 1:1:1:1:1:1:1:1)
004387  004767  // Notes    : Blit an image to a GRAM window from FLASH storage.
004388  004768  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 2 x 16bit colours
004389  004769  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004390  004770        
004391  004771  func flash_Exec("bank", "arglistptr"), 1;
004392  004772  // Syntax: res := flash_Exec("bank","arglistptr");
004393  004773  // Usage : res := flash_Exec("bank","arglistptr");
004394  004774  // Notes : returns like a function, current program
004395  004775  //       : calling program is kept active and control returns to it.
004396  004776  //       : If arglistptr is 0, no arguments are passed, else
004397  004777  //       : arglist points to an array, the first element being
004398  004778  //       : the number of elements in the array.
004399  004779  //       : func 'main' in the called bank accepts the arguments.
004400  004780  // WARNING Not currently implemented!
004401  004781        
004402  004782        
004403  004783  func __reserved68(), 0; // do not remove
004404  004784  func __reserved69(), 0; // do not remove
004405  004785  func __reserved70(), 0; // do not remove
004406  004786        
004407  004787  //=========================================================================================================
004408  004788  // I/O and hardware functions
004409  004789  //=========================================================================================================
004410  004790        
004411  004791        
004412  004792        
004413  004793        
004414  004794  func pin_Pulseout("pin", "value"), 1;        // non blocking (program execution continues during pulse)
004415  004795  func pin_PulseoutB("pin", "value"), 1;    // blocking (program execution suspended during pulse)
004416  004796  // Syntax: pin_Pulseout(pin, value);
004417  004797  // Usage : pin_Pulseout(PA3, 100);                 // output 100msec pulse on PA3
004418  004798  // Notes : only available on PA0 to PA9
004419  004799  //       : Invert the state of an output for "value" milliseconds.
004420  004800  //       : pulseout is non blocking, that is, code execution may continue while
004421  004801  //       : a pulse is occuring, and pulses can occur on multiple pins simultaneously.
004422  004802  //       : If not already an output, pin is automatically made a push/pull output,
004423  004803  //       : and the last state of its output latch will determine pulse polarity.
004424  004804  //       : It's its open drain state is not altered if the pin was already an output.
004425  004805  //       : If pulseout is called while pulseout is still active, the pulse timer
004426  004806  //       : will simply be updated with the new "value" and the pulse will continue
004427  004807  //       : with the extended value.
004428  004808  //       : returns true if the pin number is legal (usually ignored)
004429  004809        
004430  004810        
004431  004811  func pin_Counter("pin", "mode", "OVFfunction"), 1;
004432  004812  // Syntax: pin_Counter(pin, mode, userfunc);
004433  004813  // Usage : pin_Counter(PA5, 1, stopfunc);         // count rising edge pulses on pin PA5, call stopfunc on overflow
004434  004814  // Notes : only available on PA4 to PA9
004435  004815  //       : Connect a counter to a pin to count transistions, and optionally call an event function
004436  004816  //       : when the 16bit counter wraps from 0xFFFF to zero. The counter can be read or written
004437  004817  //       : to at any time with peekW and pokeW, therefore, the count may be set to eg 0xFFF0 so that eg:
004438  004818  //       : user function "OVFfuction" will be called after 16 pulses. If "OVFfunction" is set to zero, only the
004439  004819  //       : counter will increment, and simply wrap back to zero from 0xFFFF. If "OVFfunction" points to a user
004440  004820  //       : function, wnen the event fires, pin_Counter will be disabled, and will need to be re-armed (ie '1shot' operation)
004441  004821  //       : The pin may be configured as an input or output, the function behaves the same.
004442  004822  //       : All six pin counters may be active simultaneously, and the maximum frequency of pin transistions
004443  004823  //       : should not exceed a few Khz in mode 1 and 2and are usually used for simple process control counting.
004444  004824  //       : "mode" has the following effect:-
004445  004825  //       : mode COUNT_OFF(0)  = disconnect the counter from the pin, "OVFfunction" therefore ignored, and counting is inhibited.
004446  004826  //       : mode COUNT_RISE(1) = increment on every rising edge
004447  004827  //       : mode COUNT_FALL(2) = increment on every falling edge
004448  004828  //       : mode COUNT_EDGE(3) = increment on every rising and falling edge
004449  004829        
004450  004830  //------------------------------------------------------------------//
004451  004831  // pin counter mode constants                                       //
004452  004832  //------------------------------------------------------------------//
004453  004833  #CONST
004454  004838  #END
004455  004839        
004456  004840  func Qencoder1("PHApin", "PHBpin", "mode"), 1;
004457  004841  // Syntax: Qencoder1(pinA, pinB, mode);
004458  004842  // Usage : Qencoder1(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #1
004459  004843  // Notes : not available on pins PA14 and PA15
004460  004844  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004461  004845  //       : or written to at any time with peekW and pokeW using the following constants:-
004462  004846  //       : It is necessary to configure the pins first, depending on your requirements, eg
004463  004847  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004464  004848  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004465  004849  //       : Returns true if the pin numbers are legal (usually ignored)
004466  004850  //    QEN1_COUNTER_LO
004467  004851  //    QEN1_COUNTER_HI
004468  004852  //    QEN1_DELTA This is reset to 0 when read
004469  004853        
004470  004854  func Qencoder2("PHApin", "PHBpin", "mode"), 1;
004471  004855  // Syntax: Qencoder2(pinA, pinB, mode);
004472  004856  // Usage : Qencoder2(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #2
004473  004857  // Notes : not available on pins PA14 and PA15
004474  004858  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004475  004859  //       : or written to at any time with peekW and pokeW using the following constants:-
004476  004860  //       : It is necessary to configure the pins first, depending on your requirements, eg
004477  004861  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004478  004862  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004479  004863  //       : Returns true if the pin numbers are legal (usually ignored)
004480  004864  //    QEN2_COUNTER_LO
004481  004865  //    QEN2_COUNTER_HI
004482  004866  //    QEN2_DELTA This is reset to 0 when read
004483  004867        
004484  004868        
004485  004869  func Qencoder1Reset(), 0;
004486  004870  // Syntax: Qencoder1Reset();
004487  004871  // Usage : Qencoder1Reset();     // reset the counter and delta value for encoder #1
004488  004872  // Notes :
004489  004873  //    QEN1_COUNTER_LO is reset to zero
004490  004874  //    QEN1_COUNTER_HI is reset to zero
004491  004875  //    QEN1_DELTA is reset to zero
004492  004876        
004493  004877  func Qencoder2Reset(), 0;
004494  004878  // Syntax: Qencoder2Reset();
004495  004879  // Usage : Qencoder2Reset();     // reset the counter and delta value for encoder #2
004496  004880  // Notes :
004497  004881  //    QEN2_COUNTER_LO is reset to zero
004498  004882  //    QEN2_COUNTER_HI is reset to zero
004499  004883  //    QEN2_DELTA is reset to zero
004500  004884        
004501  004885        
004502  004886  func pin_PulseoutCount("pin", "freq", "count", "function"), 1;        // pulse pin at freq count times calling function when complete
004503  004887  // Syntax: pin_PulseoutCount(pin, freq, count, function);
004504  004888  // Usage : pin_PulseoutCount(PA4, 1000, 5000, 0);            // output 5000 1msec pulses on PA3
004505  004889  // Notes : only available on PA4 to PA9, maximum 3 active at any one time
004506  004890  //       : Invert the state of an output at a "freq" freuency "count" times.
004507  004891  //       : PulseoutCount is non blocking, that is, code execution may continue while
004508  004892  //       : pulses are occuring, and pulses can occur on multiple pins simultaneously.
004509  004893  //       : If not already an output, pin is automatically made a push/pull output,
004510  004894  //       : and the last state of its output latch will determine pulse polarity.
004511  004895  //       : It's its open drain state is not altered if the pin was already an output.
004512  004896  //       : If PulseoutCount is called while PulseoutCount is still active, the pulse counter
004513  004897  //       : will simply have the new "value" added to it.
004514  004898  //       : returns false if the pin number is illegal, freq is < 10, or all counters in use
004515  004899  //       : returns true if the pin number is legal (usually ignored)
004516  004900        
004517  004901  func __reserved72(), 0; // do not remove
004518  004902        
004519  004903  func pwm_Init("pin", "mode", "value"), 1;    // set pin PA4-PA9 for the required PWM mode and select its source
004520  004904  // Syntax: pwm_Init(pin, value);
004521  004905  // Usage : pwm_Init(PA4, 1, 500);                 // output 50% duty cycle on PA4
004522  004906  // Notes : only available on PA4 to PA9
004523  004907  //       : Mode PWM_OFF(0)    : Turn off the PWM (pin is left as output)
004524  004908  //       : Mode PWM_PLAIN(1)  : Plain PWM value is 0-1000, corresponding to 0-100% duty cycle.
004525  004909  //       :                    : Raw frequency ~70khz. A value of 1 is not valid
004526  004910  //       : Mode PWM_SERVO(2)  : Servo PWM value is 100-200, corresponding to 1.00 to 2.00 ms
004527  004911  //       :                    : Values of 0 to 600 are valid (0-6ms), but should be used with caution.
004528  004912  //       :                    : Repetition rate ~50hz or 20ms
004529  004913  //       : Mode PWM_BINARY(3) : Binary PWM value is 0-1024, corresponding to 0-100% duty cycle.
004530  004914  //       :                    : Raw frequency ~68khz. A value of 1 is not valid
004531  004915  //       : pwm_Init is non blocking and the pwm continues until turn off
004532  004916  //       : Returns true if the pin number is legal (usually ignored)
004533  004917        
004534  004918  //------------------------------------------------------------------------------
004535  004919  // PWM Constants
004536  004920  //------------------------------------------------------------------------------
004537  004921  #CONST
004538  004934  #END
004539  004935        
004540  004936  func OW_Reset("pin"), 1;                             // issue 1wire reset command
004541  004937  // Syntax   : OW_Reset(PA0);
004542  004938  // Usage    : OW_Reset(PA0);
004543  004939  // Notes    : Only available on PA0 to PA13
004544  004940  //          : Resets  ONEWIRE device
004545  004941  //          : Returns the status, 0 = ACK.
004546  004942  //          :
004547  004943        
004548  004944  func OW_Read("pin"), 1;                              // read data from 1wire bus
004549  004945  // Syntax   : OW_Read(PA0);
004550  004946  // Usage    : arg1 := OW_Read(PA0);
004551  004947  // Notes    : Only available on PA0 to PA13
004552  004948  //          : Reads value of the ONEWIRE pin
004553  004949  //          : that was previously selected for ONEWIRE comms.
004554  004950  //          :
004555  004951  //          : pin = 0 : the next byte from the ONEWIRE bus
004556  004952        
004557  004953  func OW_Read9("pin"), 1;                             // read data from 1wire bus, 9bit mode
004558  004954  // Syntax   : OW_Read9(PA0);
004559  004955  // Usage    : OW_Read9(PA0);
004560  004956  // Notes    : Only available on PA0 to PA13
004561  004957  //          : Reads 9 bit value of the appropriate ONEWIRE pin
004562  004958  //          : that was previously selected for ONEWIRE comms.
004563  004959  //          :
004564  004960  //          : read the 9 bits from the ONEWIRE bus
004565  004961        
004566  004962  func OW_Write("pin", "value"), 0;                      // write value to 1wire device
004567  004963  // Syntax   : OW_Write(PA0, arg);
004568  004964  // Usage    : OW_Write(PA0, arg);
004569  004965  // Notes    : Only available on PA0 to PA13
004570  004966  //          : Sends ONEWIRE data on the appropriate
004571  004967  //          : pin that was previously  selected as ONEWIRE comms.
004572  004968  //          :
004573  004969  //          : write arg to the ONEWIRE bus
004574  004970        
004575  004971  func __reserved77(), 0; // do not remove
004576  004972  func __reserved78(), 0; // do not remove
004577  004973        
004578  004974  func sys_GetDateVar("&year", "&month", "&day"), 0;              // get year, month, day into variables
004579  004975  // Syntax: sys_GetDateVar(&year, &month, &day);
004580  004976  // Usage : sys_GetDateVar(&year, &month, &day);
004581  004977  // Notes : Retrieves the date values into variables
004582  004978        
004583  004979  func sys_GetTimeVar("&hour", "&minute", "&second", "&msecs"), 0;              // get hour, minute, second, millseconds into variables
004584  004980  // Syntax: sys_GetTimeVar(&hour, &minute, &second, &msecs);
004585  004981  // Usage : sys_GetTimeVar(&hour, &minute, &second, &msecs);
004586  004982  // Notes : Retrieves the time values into variables
004587  004983        
004588  004984  func sys_PmmC(), 0;
004589  004985  // Syntax: sys_PmmC();
004590  004986  // Usage : to(mystring); sys_PmmC();   // save PmmC name and revision string to buffer
004591  004987  // Notes : print the system PmmC name and revision eg "Diablo16\n1.0"
004592  004988  //       : Can be captured to a buffer using the to( function
004593  004989  //       : Returns nothing.
004594  004990        
004595  004991  func sys_Driver(), 0;
004596  004992  // Syntax: sys_Driver();
004597  004993  // Usage : to(mystring); sys_Driver();   // save Driver name and date string to buffer
004598  004994  // Notes : print the system PmmC name and revision eg "uLCD-32WDTU-A\n130411"
004599  004995  //       : Can be captured to a buffer using the to( function
004600  004996  //       : Returns nothing.
004601  004997        
004602  004998  func gfx_Scope("left", "width", "yzero", "n", "xstep", "Yamp", "colorbg", "&old_y1", "&new_y1", "color1", "&old_y2", "&new_y2", "color2", "&old_y3", "&new_y3", "color3", "&old_y4", "&new_y4", "color4"), 0;
004603  004999  // Notes : Draws up to 4 waveforms from table(s) of vertices at the specified origin.
004604  005000  //       : "Left" is the left margin, "Width" is the width, "yzero" is the y position
004605  005001  //       : that corresponds to a y value of zero, normally "Top" + "Height" for
004606  005002  //       : a graph, or "Top" + "Height"/2 for a scope. "n" is the number of
004607  005003  //       : elements in each buffer. This will need to be greater than "width" for negative
004608  005004  //       : "xstep" values. "Yamp" is for amplification in the Y direction, 100 is unity.
004609  005005  //       : pass 0 as the address for any unused traces
004610  005006  //       : X position is incremented each point by "xstep" pixels.
004611  005007  //       : Y values are derived from a Y buffer "newy" (signed values).
004612  005008  //       : 2 buffers need to be supplied, "newy" contains new
004613  005009  //       : points to be drawn, "oldy" contains most recent set
004614  005010  //       : of points to be un-drawn. After the waveform is drawn,
004615  005011  //       : "newy" buffer is automatically copied to "oldy" buffer.
004616  005012        
004617  005013        
004618  005014  func ana_HS("rate", "samples", "&IO1", "&IO2", "&IO3", "&IO4", "COMPLETEfunction"), 0;
004619  005015  // Syntax: ana_HS(rate, samples, IO1buf, IO2buf, IO3buf, IO4buf, userFunction);
004620  005016  // Usage : ana_HS(1000, 10, IO1buf, 0, 0, 0, myFunc);
004621  005017  // Notes : Collects "samples" samples at "rate" frequency for 0 to 4 analogue pins
004622  005018  //       : and calls "COMPLETEfunction" when done.
004623  005019  //       : "rate" is samples in 100 of samples per second
004624  005020  //       : Any unused IOx pins should have their buffer addresses set to 0
004625  005021  //       : For performance reasons samples are taken in chunks of 32, thus if you
004626  005022  //       : request 33 samples there will be a delay of 31 samples before
004627  005023  //       : "COMPLETEfunction" is called
004628  005024  //       : If Touch is enabled this function should be called no more than once per
004629  005025  //       : millisecond, otherwise touch behaviour could be eratic.
004630  005026        
004631  005027        
004632  005028  func sys_ErrorMessage("msgnum"), 1;
004633  005029        
004634  005030  //==============================//
004635  005031  // NeoPixel specific functions  //
004636  005032  //==============================//
004637  005033        
004638  005034  func NP_Write("pin", "data", "size", "Options", "RepeatFirst", "Repeat", "RepeatLast"), 1;    // Write a string of colours to a NeoPixel 'display'
004639  005035  // Syntax: NP_Write(pin, data, size, Options, RepeatFirst, Repeat, RepeatLast);
004640  005036  // Usage : NP_Write(PA4, data, 50, NP_565, 10, 0, 0);                 
004641  005037  // Notes : pin         : The I/O pin for the operation PA0 to PA13
004642  005038  //       : data        : Address of data to be sent
004643  005039  //       : size        : number of colour 'sets' to follow
004644  005040  //       : Options     : format of colour data to be sent, NP_565, NP_RGB, or NP_XRGB. i.e. 2, 3 or 4 bytes per colour
004645  005041  //       : RepeatFirst : Number of times to repeat the first colour (0 means first colour is not considered 'special')
004646  005042  //       : Repeat      : Number of times to repeat the colours between first and last
004647  005043  //       : RepeatLast  : Number of times to repeat the last colour (0 means last colour is not considered 'special')
004648  005044  //       : Returns true if the pin number is legal (usually ignored)
004649  005045  //       : Due to the critical timing requirements of the NeoPixel, the system Timer is disabled during this operation.
004650  005046  //       : Comms Interrupts should also be disabled by the user, otherwise errors may occur.
004651  005047        
004652  005048  // NeoPixel related constants
004653  005049  #CONST
004654  005053  #END
004655  005054        
004656  005055  func __reserved85(), 0; // do not remove
004657  005056  func __reserved86(), 0; // do not remove
004658  005057        
004659  005058  //==============================================//
004660  005059  // spi flash device specific functions          //
004661  005060  //==============================================//
004662  005061        
004663  005062  func spiflash_SIG("spi#", "enablepin"), 1;         // read Jedec signature from SPI Flash device
004664  005063  // Syntax   : spiflash_SIG("spi#","enablepin");
004665  005064  // Usage    : var := spiflash_SIG(SPI1, PA0);
004666  005065  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004667  005066  //          : spi_Init(...) function, the Electronic Signature of the device can be read using this function. The only
004668  005067  //          : devices supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004669  005068  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004670  005069  //          : Release from Deep Power-down, and Read Electronic Signature. Only the low order byte is valid, the upper
004671  005070  //          : byte is ignored.
004672  005071        
004673  005072  func spiflash_ID("spi#", "enablepin"), 1;          // read ID code from FLASH device
004674  005073  // Syntax   : spiflash_ID("spi#","enablepin");
004675  005074  // Usage    : var := spiflash_ID(SPI1, PA0);
004676  005075  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004677  005076  //          : spi_Init(...) function, the memory type and capacity from the flash device can be read using this function
004678  005077  //          : The only devices supported so far M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004679  005078  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004680  005079  //          : Reads the memory type and capacity from the serial FLASH device. Hi byte contains type, and low byte
004681  005080  //          : contains capacity. Refer to the device data sheet for further information.
004682  005081        
004683  005082  func spiflash_BulkErase("spi#", "enablepin"), 0;    // erase the entire FLASH device
004684  005083  // Syntax   : spiflash_BulkErase("spi#","enablepin");
004685  005084  // Usage    : spiflash_BulkErase(SPI1, PA0);
004686  005085  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004687  005086  //          : spi_Init(...) function, the FLASH device can be completely erased using this function. The only devices
004688  005087  //          : supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004689  005088  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004690  005089  //          : Erases the entire flash media device. The function returns no value, and the operation can take up to 80
004691  005090  //          : seconds depending on the size of the flash device. Note that not all devices support this command.
004692  005091        
004693  005092  func spiflash_BlockErase("spi#", "enablepin", "block"), 0;            // erase the required 64k flash block
004694  005093  // Syntax   : spiflash_BlockErase("spi#", "enablepin", "block")
004695  005094  // Usage    : var := spiflash_BlockErase(SPI1, PA0, block_num)
004696  005095  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004697  005096  //          : spi_Init(...) function, the FLASH block can be erased using this function. The only devices supported so
004698  005097  //          : far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004699  005098  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004700  005099  //          : E.g. there are 32 x 64K blocks on a 2Mb flash device.
004701  005100  //          : blockAddress The address of the 64k FLASH block to be erased.
004702  005101  //          : Erases the required block in a FLASH media device. The function returns no value, and the operation
004703  005102  //          : can take up to 3 milliseconds.
004704  005103        
004705  005104  func spiflash_SetAdd("spi#", "HiWord", "LoWord"), 0;           // set stream byte address
004706  005105  // Syntax: spiflash_SetAdd(AddHiWord, AddLoWord);
004707  005106  // Usage : spiflash_SetAdd(SPI1, arg1, arg2);
004708  005107  // Notes : Set FLASH internal Address pointer for bytewise access on the specified SPI port
004709  005108        
004710  005109  func spiflash_Read("*dest", "size", "spi#", "enablepin"), 1;
004711  005110  // Syntax: res := spiflash_Read("*dest", "size", "spi#", "enablepin"),
004712  005111  // Usage : res := spiflash_Read(memblock, 20, SPI1, PA0);
004713  005112  // Notes : Reads the specified number of bytes from the FLASH memory device on the specified SPI port and enable pin
004714  005113  //       : into the specified destination. The destination is a string pointer (i.e. BYTE aligned). The source
004715  005114  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004716  005115  //       : returns number of characters read
004717  005116  //       : if "dest" is zero, data is read direct to GRAM window
004718  005117  //       :
004719  005118        
004720  005119  func spiflash_Write("*source", "size", "spi#", "enablepin"), 1;
004721  005120  // Syntax: res := fwrite("*source", "size", "spi#", "enablepin"),
004722  005121  // Usage : res := fwrite(memblock, 20, SPI1, PA0);
004723  005122  // Notes : Writes the specified number of bytes to the FLASH memory device on the specified SPI port and enable pin
004724  005123  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004725  005124  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004726  005125  //       : returns number of bytes written
004727  005126  //       :
004728  005127        
004729  005128  func spiflash_Image("x", "y", "spi#", "enablepin"), 1;
004730  005129  // Syntax: spiflash_Image(x, y, "spi#", "enablepin");
004731  005130  // Usage : spiflash_Image(10, 10, SPI1, PA0);
004732  005131  // Notes : Display an image from a file at the current FLASH position set by spiflash_SetAdd()
004733  005132  //       : The image is displayed at x,y (with respect to top left corner).
004734  005133        
004735  005134  func spiflash_PutC("char", "spi#", "enablepin"), 0;
004736  005135  // Syntax: spiflash_PutC("char", "spi#", "enablepin");
004737  005136  // Usage : spiflash_PutC('x', SPI1, PA0);
004738  005137  // Notes : Writes a character (or byte) to the FLASH memory device on the specified SPI port and enable pin
004739  005138  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004740  005139  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004741  005140        
004742  005141  func spiflash_GetC("spi#", "enablepin"), 1;
004743  005142  // Syntax: spiflash_GetC("spi#", "enablepin");
004744  005143  // Usage : mychar := fgetC(SPI1, PA0);
004745  005144  // Notes : Reads a character (or byte) from the FLASH memory device on the specified SPI port and enable pin
004746  005145  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004747  005146  //       : by subsequent reads or writes.
004748  005147  //       : returns next char from file
004749  005148        
004750  005149  func spiflash_PutW("word", "spi#", "enablepin"), 0;
004751  005150  // Syntax: spiflash_PutW("word", "spi#", "enablepin");
004752  005151  // Usage : spiflash_PutW(0x1234, SPI1, PA0);
004753  005152  // Notes : Writes a word to the FLASH memory device on the specified SPI port and enable pin
004754  005153  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004755  005154  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004756  005155        
004757  005156  func spiflash_GetW("spi#", "enablepin"), 1;
004758  005157  // Syntax: spiflash_GetW("spi#", "enablepin");
004759  005158  // Usage : myword := fgetW(SPI1, PA0);
004760  005159  // Notes : Reads a word from the FLASH memory device on the specified SPI port and enable pin
004761  005160  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004762  005161  //       : by subsequent reads or writes.
004763  005162  // Notes : returns next word in file
004764  005163        
004765  005164  func spiflash_PutS("*source", "spi#", "enablepin"), 1;
004766  005165  // Syntax: res := spiflash_Puts("*source", "spi#", "enablepin"),
004767  005166  // Usage : res := spiflash_Puts(mystring, SPI1, PA0);
004768  005167  // Notes : Writes a string to the FLASH memory device on the specified SPI port and enable pin
004769  005168  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004770  005169  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004771  005170  //       : returns number of characters written
004772  005171  //       :
004773  005172        
004774  005173  func spiflash_GetS("*string", "size", "spi#", "enablepin"), 1;
004775  005174  // Syntax: res := spiflash_Gets("*string", "size", "spi#", "enablepin");
004776  005175  // Usage : res := spiflash_Gets(mystr , 81, SPI1, PA0); // read up to 80 chars
004777  005176  // Notes : Reads a string from the FLASH memory device on the specified SPI port and enable pin
004778  005177  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004779  005178  //       : by subsequent reads or writes.
004780  005179  //       : returns pointer to string or null if failed.
004781  005180  //       : spiflash_GetS(...) automatically appends a null-terminator to the data read.
004782  005181  //       : NB:- only reads up to "size-1" characters into "string"
004783  005182  //       : spiflash_GetS(...) will stop reading when any of the following conditions are true:
004784  005183  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
004785  005184  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
004786  005185  //       : C] It reaches the end of file
004787  005186  //       : D] A read error occurs.
004788  005187        
004789  005188  func spiflash_LoadFunction("spi#", "enablepin"), 1;
004790  005189  // Syntax: res := spiflash_LoadFunction("spi#", "enablepin");
004791  005190  // Usage : myfunc := spiflash_LoadFunction(SPI1, PA0);
004792  005191  // Notes : Load a function or program from the FLASH memory device on the specified SPI port and enable pin at
004793  005192  //       : the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes and
004794  005193  //       : return a function pointer to the allocation.
004795  005194  //       : The function can then be invoked just like any other
004796  005195  //       : function would be called via a function pointer.
004797  005196  //       : Parameters may be passed to it in a conventional way.
004798  005197  //       : The function may be discarded at any time when no
004799  005198  //       : longer required, thus freeing its memory resources.
004800  005199  //       : The loaded function can be discarded with mem_Free(..)
004801  005200  //       : eg:
004802  005201  //       : popupWindow := spiflash_LoadFunction("popupWindow1.4fn");
004803  005202  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
004804  005203  //       : then elsewhere in your program:-
004805  005204  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
004806  005205  //       : if(res == QUIT_APPLICATION) goto exitApp;
004807  005206  //       : Later in your program, when popupWindow is no longer
004808  005207  //       : required for the application:-
004809  005208  //       : res := mem_Free(popupWindow);
004810  005209  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
004811  005210  //       : The callers stack is shared by the loaded function,
004812  005211  //       : however any global variables in the loaded function
004813  005212  //       : are private to that function.
004814  005213  //
004815  005214        
004816  005215  func spiflash_Run("spi#", "enablepin", "arglistptr"), 1;
004817  005216  // Syntax: res := spiflash_Run("spi#", "enablepin", "arglistptr");
004818  005217  // Usage : res := spiflash_Run(SPI1, PA0, argptr);
004819  005218  // Notes : current program releases any allocated memory but
004820  005219  //       : retains the stack and global memory.
004821  005220  //       : If arglistptr is 0, no arguments are passed, else
004822  005221  //       : arglist points to an array, the first element being
004823  005222  //       : the number of elements in the array.
004824  005223  //       : func 'main' in the called program accepts
004825  005224  //       : the arguments, if any. The arguments can only
004826  005225  //       : be passed by value, no pointers or references can be
004827  005226  //       : used as all memory is cleared before the file
004828  005227  //       : is loaded. Refer to spiflash_Exec and spiflash_LoadFunction
004829  005228  //       : for functions that can pass by reference.
004830  005229        
004831  005230  func spiflash_Exec("spi#", "enablepin", "arglistptr"), 1;
004832  005231  // Syntax: res := spiflash_Exec("spi#", "enablepin", "arglistptr");
004833  005232  // Usage : res := spiflash_Exec(SPI1, PA0, "arglistptr");
004834  005233  // Notes : returns like a function, current program
004835  005234  //       : calling program is kept active and control returns to it.
004836  005235  //       : If arglistptr is 0, no arguments are passed, else
004837  005236  //       : arglist points to an array, the first element being
004838  005237  //       : the number of elements in the array.
004839  005238  //       : func 'main' in the called program accepts the arguments.
004840  005239  //       : This function is similar to spiflash_LoadFunction(...), however,
004841  005240  //       : the function argument list is passed by pointer, and
004842  005241  //       : the memory consumed by the function is released as
004843  005242  //       : soon as the function completes.
004844  005243        
004845  005244  func spiflash_LoadImageControl("spi#", "enablepin"), 1;
004846  005245  // Syntax: hImagelist := spiflash_LoadImageControl ("spi#", "enablepin"),
004847  005246  // Usage : hImagelist := spiflash_LoadImageControl (SPI1, PA0);
004848  005247  // Notes : Reads a control file to create an image list from the FLASH memory device on the specified SPI port
004849  005248  //       : and enable pin. The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004850  005249  //       : or writes. The ".dat" file is first and is immediately followed a ^Z and then by the ".gci' file.
004851  005250  //       : Returns NULL if function fails.
004852  005251  //       : Returns a handle (pointer to the memory allocation) to the
004853  005252  //       : image control list that has been created.
004854  005253        
004855  005254  // Notes : This function Calculates the size of a chunk of memory required for
004856  005255  //       : a image list and populates it from the image control file ("*.dat")
004857  005256  //       : therefore, when imagelist is no longer required, you must de-allocate
004858  005257  //       : the image list memory by using eg:- mem_Free(hImagelist);
004859  005258  //       : to restore the heap.
004860  005259  //       :
004861  005260        
004862  005261  func spiflash_PlayWAV("spi#", "enablepin"), 1;
004863  005262  // Syntax: spiflash_PlayWAV("spi#", "enablepin");
004864  005263  // Usage : spiflash_PlayWAV(SPI1, PA0);
004865  005264  // Notes : Play a wave file from the FLASH memory device on the specified SPI port and enable pin.
004866  005265  //       : The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004867  005266  //       : or writes.
004868  005267  //       : This function automatically grabs a chunk
004869  005268  //       : of memory for a file buffer, and a wave
004870  005269  //       : buffer. The minimum memory requirement is
004871  005270  //       : about 580 bytes for the disk io service and
004872  005271  //       : a minimum wave buffer size of 1024. The size
004873  005272  //       : of the wave buffer allocation
004874  005273  //       : can be increased by the snd_BufSize function.
004875  005274  //       : The default size 1024 bytes.
004876  005275  //       : NB the memory is only required during the
004877  005276  //       : duration of play, and is automatically
004878  005277  //       : released while not in use.
004879  005278  //       : See the Sound Class services for other associated controls.
004880  005279  //       : If there are no errors, returns number of blocks to play (1 to 32767)
004881  005280  //       : If errors occured, the folling is returned
004882  005281  //       : -7  : Insufficient memory available for WAV buffer and file
004883  005282  //       : -6  : cant play this rate
004884  005283  //       : -5  : no data chunk found in first rsector
004885  005284  //       : -4  : no format data
004886  005285  //       : -3  : no wave chunk signature
004887  005286  //       : -2  : bad wave file format
004888  005287  //       : -1  : file not found
004889  005288        
004890  005289  //==============================================//
004891  005290  // more com functions                           //
004892  005291  //==============================================//
004893  005292        
004894  005293  func com1_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004895  005294  // Syntax   : com1_TXblock("buf", "bufsize");
004896  005295  // Usage    : com1_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004897  005296  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004898  005297  //          : if a transmit buffer is active and space is available this function will return almost
004899  005298  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004900  005299        
004901  005300  func com1_RXblock("buf", "bufsize"), 0;                       // commence a block reception
004902  005301  // Syntax   : com1_RXblock("buf", "bufsize");
004903  005302  // Usage    : com1_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004904  005303  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004905  005304  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004906  005305  //          : immediately otherwise it will block until until the required bytes are received.
004907  005306        
004908  005307  func com2_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004909  005308  // Syntax   : com_TXblock("buf", "bufsize");
004910  005309  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004911  005310  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004912  005311  //          : if a transmit buffer is active and space is available this function will return almost
004913  005312  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004914  005313        
004915  005314  func com2_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004916  005315  // Syntax   : com_RXblock("buf", "bufsize");
004917  005316  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004918  005317  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004919  005318  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004920  005319  //          : immediately otherwise it will block until until the required bytes are received.
004921  005320        
004922  005321  func com3_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004923  005322  // Syntax   : com_TXblock("buf", "bufsize");
004924  005323  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004925  005324  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004926  005325  //          : if a transmit buffer is active and space is available this function will return almost
004927  005326  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004928  005327        
004929  005328  func com3_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004930  005329  // Syntax   : com_RXblock("buf", "bufsize");
004931  005330  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004932  005331  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004933  005332  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004934  005333  //          : immediately otherwise it will block until until the required bytes are received.
004935  005334        
004936  005335  func disp_BlitPixelsFromCOM1(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004937  005336  // Syntax: disp_BlitPixelsFromCOM1();                  New in v1.1
004938  005337  // Usage : disp_BlitPixelsFromCOM1();
004939  005338  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004940  005339  //       : display from the specified com port.
004941  005340        
004942  005341  func disp_BlitPixelsFromCOM2(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004943  005342  // Syntax: disp_BlitPixelsFromCOM2();                  New in v1.1
004944  005343  // Usage : disp_BlitPixelsFromCOM2();
004945  005344  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004946  005345  //       : display from the specified com port.
004947  005346        
004948  005347  func disp_BlitPixelsFromCOM3(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004949  005348  // Syntax: disp_BlitPixelsFromCOM3();                  New in v1.1
004950  005349  // Usage : disp_BlitPixelsFromCOM3();
004951  005350  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004952  005351  //       : display from the specified com port.
004953  005352        
004954  005353        
004955  005354  //==============================================//
004956  005355  // crc generation functions                     //
004957  005356  //==============================================//
004958  005357        
004959  005358  func crc_CSUM_8("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate the 8bit LRC
004960  005359  // *Notes   : (if you calculate all of the incoming data
004961  005360  //          : INCLUDING the CRC, the result should be 0x00
004962  005361  //          : This is equivalent to simple addition of all bytes
004963  005362  //          : and returning the negated sum an 8 bit value.
004964  005363  //          : For the standard test string "123456789",
004965  005364  //          : crc_CSUM_8 will return 0x0023.
004966  005365        
004967  005366        
004968  005367  func crc_16("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate CRC16
004969  005368  // *Notes   : The "mode" argument may be READ, WRITE or CHECK
004970  005369  //          : (if you calculate all of the incoming data
004971  005370  //          : INCLUDING the CRC, the result should be 0x0000
004972  005371  //          : For the standard test string "123456789",
004973  005372  //          : crc_16 will return 0xBB3D.
004974  005373        
004975  005374        
004976  005375  func crc_MODBUS("buf","count"), 1;                  // given a pointer to a buffer and a byte count, calculate CRC16 for MODBUS
004977  005376  // *Notes   : (if you calculate all of the incoming data
004978  005377  //          : INCLUDING the CRC, the result should be 0x0000
004979  005378  //          : For the standard test string "123456789",
004980  005379  //          : crc_MODBUS will return 0x4B37.
004981  005380        
004982  005381        
004983  005382  func crc_CCITT("buf","count","seed"), 1;            // given a pointer to a buffer, byte count and seed, calculate the 16bit CRC for seed
004984  005383  // *Notes   : (if you calculate all of the incoming data
004985  005384  //          : INCLUDING the CRC, the result should be 0x0000
004986  005385  //          : For the standard test string "123456789",
004987  005386  //          : crc_CCITT will return the following:-
004988  005387  //          : seed = 0 (XMODEM protocol) result = 0x31C3
004989  005388  //          : seed = 0xFFFF, result = 0x29B1
004990  005389  //          : seed = 0x1D0F, result = 0xE5CC
004991  005390        
004992  005391  func __reserved87(), 0; // do not remove
004993  005392  func __reserved88(), 0; // do not remove
004994  005393  func __reserved89(), 0; // do not remove
004995  005394        
004996  005395  //----------------------------------------------------------------------------//
004997  005396  //  functions to support buffered transmission and reception of break signal  //
004998  005397  //----------------------------------------------------------------------------//
004999  005398        
005000  005399  func com_TXbufferBrk("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
005001  005400  // Usage : com_TXbufferBrk(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
005002  005401  // Usage : com_TXbufferBrk(0, 0, 0);             // revert to non buffered service
005003  005402  // Notes : initialize a serial buffer for the COM0 output.
005004  005403  //       : The program must declare a var array as a circular buffer.
005005  005404  //       : When a TX buffer is declared for comms, the transmission
005006  005405  //       : of characters becomes non blocking. If the buffer has
005007  005406  //       : insufficient space to accept the next character from a
005008  005407  //       : serout_x() function, the excess characters will be ignored,
005009  005408  //       : and the com_Full_x() error will be asserted.   If the
005010  005409  //       : TX buffer is no longer required, just set the buffer pointer
005011  005410  //       : to zero, the size in this case doesnt matter and is ignored.
005012  005411  //       : The function can resize or reallocated to another buffer at
005013  005412  //       : any time. The buffer is flushed before any changes are made.
005014  005413  //       : "pin" designates an IO pin to control a bi-directional
005015  005414  //       : control device for half duplex mode. "pin" will go HI at the
005016  005415  //       : start of a transmission, and will return low after the final
005017  005416  //       : byte is transmitted. If not required, just set "pin" to zero.
005018  005417        
005019  005418  func com1_TXbufferBrk("buf", "bufsize", "pin"), 0;
005020  005419  // Usage : com1_TXbufferBrk(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
005021  005420  // Usage : com1_TXbufferBrk(0, 0, 0);              // revert to non buffered service
005022  005421  // Notes : initialize a serial buffer for the COM0 output.
005023  005422  //       : The program must declare a var array as a circular buffer.
005024  005423  //       : When a TX buffer is declared for comms, the transmission
005025  005424  //       : of characters becomes non blocking. If the buffer has
005026  005425  //       : insufficient space to accept the next character from a
005027  005426  //       : serout_x() function, the excess characters will be ignored,
005028  005427  //       : and the com_Full_x() error will be asserted.   If the
005029  005428  //       : TX buffer is no longer required, just set the buffer pointer
005030  005429  //       : to zero, the size in this case doesnt matter and is ignored.
005031  005430  //       : The function can resize or reallocated to another buffer at
005032  005431  //       : any time. The buffer is flushed before any changes are made.
005033  005432  //       : "pin" designates an IO pin to control a bi-directional
005034  005433  //       : control device for half duplex mode. "pin" will go HI at the
005035  005434  //       : start of a transmission, and will return low after the final
005036  005435  //       : byte is transmitted. If not required, just set "pin" to zero.
005037  005436        
005038  005437  func com2_TXbufferBrk("buf", "bufsize", "pin"), 0;
005039  005438  // Usage : com2_TXbufferBrk(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
005040  005439  // Usage : com2_TXbufferBrk(0, 0, 0);              // revert to non buffered service
005041  005440  // Notes : initialize a serial buffer for the COM0 output.
005042  005441  //       : The program must declare a var array as a circular buffer.
005043  005442  //       : When a TX buffer is declared for comms, the transmission
005044  005443  //       : of characters becomes non blocking. If the buffer has
005045  005444  //       : insufficient space to accept the next character from a
005046  005445  //       : serout_x() function, the excess characters will be ignored,
005047  005446  //       : and the com_Full_x() error will be asserted.   If the
005048  005447  //       : TX buffer is no longer required, just set the buffer pointer
005049  005448  //       : to zero, the size in this case doesnt matter and is ignored.
005050  005449  //       : The function can resize or reallocated to another buffer at
005051  005450  //       : any time. The buffer is flushed before any changes are made.
005052  005451  //       : "pin" designates an IO pin to control a bi-directional
005053  005452  //       : control device for half duplex mode. "pin" will go HI at the
005054  005453  //       : start of a transmission, and will return low after the final
005055  005454  //       : byte is transmitted. If not required, just set "pin" to zero.
005056  005455        
005057  005456  func com3_TXbufferBrk("buf", "bufsize", "pin"), 0;
005058  005457  // Usage : com3_TXbufferBrk(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
005059  005458  // Usage : com3_TXbufferBrk(0, 0, 0);              // revert to non buffered service
005060  005459  // Notes : initialize a serial buffer for the COM0 output.
005061  005460  //       : The program must declare a var array as a circular buffer.
005062  005461  //       : When a TX buffer is declared for comms, the transmission
005063  005462  //       : of characters becomes non blocking. If the buffer has
005064  005463  //       : insufficient space to accept the next character from a
005065  005464  //       : serout_x() function, the excess characters will be ignored,
005066  005465  //       : and the com_Full_x() error will be asserted.   If the
005067  005466  //       : TX buffer is no longer required, just set the buffer pointer
005068  005467  //       : to zero, the size in this case doesnt matter and is ignored.
005069  005468  //       : The function can resize or reallocated to another buffer at
005070  005469  //       : any time. The buffer is flushed before any changes are made.
005071  005470  //       : "pin" designates an IO pin to control a bi-directional
005072  005471  //       : control device for half duplex mode. "pin" will go HI at the
005073  005472  //       : start of a transmission, and will return low after the final
005074  005473  //       : byte is transmitted. If not required, just set "pin" to zero.
005075  005474        
005076  005475  func com_InitBrk("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
005077  005476  // Syntax: com_InitBrk(buffer, bufsize, qualifier);
005078  005477  // Usage1: com_InitBrk(mybuf, 20, 0);
005079  005478  // Usage2: com_InitBrk(mybuf, 20, ':');
005080  005479  // Notes : initialize a serial capture buffer for the comms input
005081  005480  //       : The program must declare a var array as a circular buffer.
005082  005481  //       : Usage1 declares a circular buffer which will continually
005083  005482  //       : buffer characters.
005084  005483  //       : Usage2 must receive ':' before any characters will
005085  005484  //       : accumulate in the buffer.
005086  005485        
005087  005486  func com1_InitBrk("buf","bufsize","qualifier"), 0;
005088  005487  // Syntax: com1_InitBrk(buffer, bufsize, qualifier);
005089  005488  // Usage1: com1_InitBrk(mybuf, 20, 0);
005090  005489  // Usage2: com1_InitBrk(mybuf, 20, ':');
005091  005490  // Notes : initialize a serial capture buffer for the comms input
005092  005491  //       : The program must declare a var array as a circular buffer.
005093  005492  //       : Usage1 declares a circular buffer which will continually
005094  005493  //       : buffer characters.
005095  005494  //       : Usage2 must receive ':' before any characters will
005096  005495  //       : accumulate in the buffer.
005097  005496        
005098  005497  func com2_InitBrk("buf","bufsize","qualifier"), 0;
005099  005498  // Syntax: com2_InitBrk(buffer, bufsize, qualifier);
005100  005499  // Usage1: com2_InitBrk(mybuf, 20, 0);
005101  005500  // Usage2: com2_InitBrk(mybuf, 20, ':');
005102  005501  // Notes : initialize a serial capture buffer for the comms input
005103  005502  //       : The program must declare a var array as a circular buffer.
005104  005503  //       : Usage1 declares a circular buffer which will continually
005105  005504  //       : buffer characters.
005106  005505  //       : Usage2 must receive ':' before any characters will
005107  005506  //       : accumulate in the buffer.
005108  005507        
005109  005508  func com3_InitBrk("buf","bufsize","qualifier"), 0;
005110  005509  // Syntax: com3_InitBrk(buffer, bufsize, qualifier);
005111  005510  // Usage1: com3_InitBrk(mybuf, 20, 0);
005112  005511  // Usage2: com3_Init(mybuf, 20, ':');
005113  005512  // Notes : initialize a serial capture buffer for the comms input
005114  005513  //       : The program must declare a var array as a circular buffer.
005115  005514  //       : Usage1 declares a circular buffer which will continually
005116  005515  //       : buffer characters.
005117  005516  //       : Usage2 must receive ':' before any characters will
005118  005517  //       : accumulate in the buffer.
005119  005518        
005120  005519  //------------------------------------------------------------------//
005121  005520  //     break control constant                                       //
005122  005521  //------------------------------------------------------------------//
005123  005522  #constant BREAK      0xFFFD    // interpretation of the break signal
005124  005522  #constant BREAK      0xFFFD    // interpretation of the break signal
005125  005523        
005126  005524  //------------------------------------------------------------------//
005127  005525  // CONSTANTS
005128  005526  //------------------------------------------------------------------//
005129  005527        
005130  005528  #CONST
005131  005532  #END
005132  005533        
005133  005534  // timebase constants for timebase_init
005134  005535  // NB only TB2 and TB4 can be used for synchronous A2D sampling.
005135  005536  #CONST
005136  005547  #END
005137  005548        
005138  005549        
005139  005550  // generic constants
005140  005551  #CONST
005141  005559  #END
005142  005560        
005143  005561        
005144  005562        
005145  005563  //gfx_Get() related constants
005146  005564  #CONST
005147  005573  #END
005148  005574        
005149  005575        
005150  005576        
005151  005577        
005152  005578  #CONST
005153  005591  #END
005154  005592        
005155  005593        
005156  005594  #CONST
005157  005619  #END
005158  005620        
005159  005621        
005160  005622        
005161  005623        
005162  005624  // timer control  related constants
005163  005625  #CONST
005164  005634  #END
005165  005635        
005166  005636        
005167  005637        
005168  005638  //------------------------------------------------------------------------------
005169  005639  // system WORD variables accesible with peekW and pokeW or pointer access
005170  005640  // Note that the txt_Set variables (0-15) and gfx_set variables (16-31)
005171  005641  // can also be accessed with peekW and pokeW
005172  005642  //------------------------------------------------------------------------------
005173  005643        
005174  005644  #CONST
005175  005739  #END
005176  005740        
005177  005741  #CONST
005178  005906  #END
005179  005907        
005180  005908        
005181  005909        
005182  005910  //==================================================================================================
005183  005911        
005184  005912        
005185  005913        
005186  000013      #ENDIF
005187  000014        
005188  000015        
005189  000016  //===========================================================================================
005190  000017        
005191  000018        
005192  000002        
005193  000003        
005194  000004  // generated 28/08/2018 12:33:49
005195  000005        
005196  000006  #MODE FLASHBANK_1
005197  000007        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\4DGL_16bitColours.fnc

005198  000008  #inherit "4DGL_16bitColours.fnc"
005199  000008  #inherit "4DGL_16bitColours.fnc"
005200  000004  */
005201  000005        
005202  000006        
005203  000007        
005204  000008  #CONST
005205  000149  #END
005206  000150        
005207  000009        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\VisualConst.inc

005208  000010  #inherit "VisualConst.inc"
005209  000010  #inherit "VisualConst.inc"
005210  000001  // Line Patterns
005211  000002  #constant  LPCOARSE    0xF0F0
005212  000002  #constant  LPCOARSE    0xF0F0
005213  000003  #constant  LPMEDIUM    0x3333
005214  000003  #constant  LPMEDIUM    0x3333
005215  000004  #constant  LPFINE      0xAAAA
005216  000004  #constant  LPFINE      0xAAAA
005217  000005  #constant  LPDASHDOT   0x03CF
005218  000005  #constant  LPDASHDOT   0x03CF
005219  000006  #constant  LPDASHDOTDOT 0x0333
005220  000006  #constant  LPDASHDOTDOT 0x0333
005221  000007  #constant  LPSOLID     0x0000
005222  000007  #constant  LPSOLID     0x0000
005223  000011        
005224  000012        
file C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAXConst.inc

005225  000013  #inherit "BCN3D_SIGMAXConst.inc"
005226  000013  #inherit "BCN3D_SIGMAXConst.inc"
005227  000001  // File generated 28/08/2018 12:33:11
005228  000002  // Warning! This is a generated file, any manual changes will be
005229  000003  // lost during the next generation.
005230  000004        
005231  000005  #constant  Strings3Count    0
005232  000005  #constant  Strings3Count    0
005233  000006  #constant  Strings3Size     1
005234  000006  #constant  Strings3Size     1
005235  000007  #constant  Strings1Count    0
005236  000007  #constant  Strings1Count    0
005237  000008  #constant  Strings1Size     1
005238  000008  #constant  Strings1Size     1
005239  000009  #constant  Strings8Count    0
005240  000009  #constant  Strings8Count    0
005241  000010  #constant  Strings8Size     1
005242  000010  #constant  Strings8Size     1
005243  000011  #constant  Strings12Count    0
005244  000011  #constant  Strings12Count    0
005245  000012  #constant  Strings12Size     1
005246  000012  #constant  Strings12Size     1
005247  000013  #constant  Strings23Count    0
005248  000013  #constant  Strings23Count    0
005249  000014  #constant  Strings23Size     1
005250  000014  #constant  Strings23Size     1
005251  000015  #constant  Strings16Count    0
005252  000015  #constant  Strings16Count    0
005253  000016  #constant  Strings16Size     1
005254  000016  #constant  Strings16Size     1
005255  000017  #constant  Strings2Count    0
005256  000017  #constant  Strings2Count    0
005257  000018  #constant  Strings2Size     1
005258  000018  #constant  Strings2Size     1
005259  000019  #constant  Strings7Count    0
005260  000019  #constant  Strings7Count    0
005261  000020  #constant  Strings7Size     1
005262  000020  #constant  Strings7Size     1
005263  000021  #constant  Strings9Count    0
005264  000021  #constant  Strings9Count    0
005265  000022  #constant  Strings9Size     1
005266  000022  #constant  Strings9Size     1
005267  000023  #constant  Strings10Count    0
005268  000023  #constant  Strings10Count    0
005269  000024  #constant  Strings10Size     1
005270  000024  #constant  Strings10Size     1
005271  000025  #constant  Strings27Count    0
005272  000025  #constant  Strings27Count    0
005273  000026  #constant  Strings27Size     1
005274  000026  #constant  Strings27Size     1
005275  000027  #constant  Strings48Count    0
005276  000027  #constant  Strings48Count    0
005277  000028  #constant  Strings48Size     1
005278  000028  #constant  Strings48Size     1
005279  000029  #constant  Strings13Count    0
005280  000029  #constant  Strings13Count    0
005281  000030  #constant  Strings13Size     1
005282  000030  #constant  Strings13Size     1
005283  000031  #constant  Strings38Count    0
005284  000031  #constant  Strings38Count    0
005285  000032  #constant  Strings38Size     1
005286  000032  #constant  Strings38Size     1
005287  000033  #constant  Strings53Count    0
005288  000033  #constant  Strings53Count    0
005289  000034  #constant  Strings53Size     1
005290  000034  #constant  Strings53Size     1
005291  000035  #constant  Strings11Count    1
005292  000035  #constant  Strings11Count    1
005293  000036  #constant  Strings11Size     7
005294  000036  #constant  Strings11Size     7
005295  000037  #constant  Strings39Count    0
005296  000037  #constant  Strings39Count    0
005297  000038  #constant  Strings39Size     1
005298  000038  #constant  Strings39Size     1
005299  000039  #constant  Strings44Count    0
005300  000039  #constant  Strings44Count    0
005301  000040  #constant  Strings44Size     1
005302  000040  #constant  Strings44Size     1
005303  000041  #constant  Strings49Count    1
005304  000041  #constant  Strings49Count    1
005305  000042  #constant  Strings49Size     12
005306  000042  #constant  Strings49Size     12
005307  000043  #constant  Strings50Count    0
005308  000043  #constant  Strings50Count    0
005309  000044  #constant  Strings50Size     1
005310  000044  #constant  Strings50Size     1
005311  000045  #constant  Strings55Count    0
005312  000045  #constant  Strings55Count    0
005313  000046  #constant  Strings55Size     1
005314  000046  #constant  Strings55Size     1
005315  000047  #constant  Strings6Count    1
005316  000047  #constant  Strings6Count    1
005317  000048  #constant  Strings6Size     6
005318  000048  #constant  Strings6Size     6
005319  000049  #constant  Strings0Count    0
005320  000049  #constant  Strings0Count    0
005321  000050  #constant  Strings0Size     1
005322  000050  #constant  Strings0Size     1
005323  000051  // object indexes into ImageControl
005324  000052  #CONST
005325  000725  #END
005326  000726        
005327  000727  #constant  Strings4Size     0
005328  000727  #constant  Strings4Size     0
005329  000728  #constant  Strings4StartH   0
005330  000728  #constant  Strings4StartH   0
005331  000729  #constant  Strings4StartL   0
005332  000729  #constant  Strings4StartL   0
005333  000730  #constant  Strings5Size     0
005334  000730  #constant  Strings5Size     0
005335  000731  #constant  Strings5StartH   0
005336  000731  #constant  Strings5StartH   0
005337  000732  #constant  Strings5StartL   0
005338  000732  #constant  Strings5StartL   0
005339  000733  #constant  Strings14Size     0
005340  000733  #constant  Strings14Size     0
005341  000734  #constant  Strings14StartH   0
005342  000734  #constant  Strings14StartH   0
005343  000735  #constant  Strings14StartL   0
005344  000735  #constant  Strings14StartL   0
005345  000736  #constant  Strings15Size     0
005346  000736  #constant  Strings15Size     0
005347  000737  #constant  Strings15StartH   0
005348  000737  #constant  Strings15StartH   0
005349  000738  #constant  Strings15StartL   0
005350  000738  #constant  Strings15StartL   0
005351  000739  #constant  Strings17Size     0
005352  000739  #constant  Strings17Size     0
005353  000740  #constant  Strings17StartH   0
005354  000740  #constant  Strings17StartH   0
005355  000741  #constant  Strings17StartL   0
005356  000741  #constant  Strings17StartL   0
005357  000742  #constant  Strings18Size     0
005358  000742  #constant  Strings18Size     0
005359  000743  #constant  Strings18StartH   0
005360  000743  #constant  Strings18StartH   0
005361  000744  #constant  Strings18StartL   0
005362  000744  #constant  Strings18StartL   0
005363  000745  #constant  Strings19Size     0
005364  000745  #constant  Strings19Size     0
005365  000746  #constant  Strings19StartH   0
005366  000746  #constant  Strings19StartH   0
005367  000747  #constant  Strings19StartL   0
005368  000747  #constant  Strings19StartL   0
005369  000748  #constant  Strings20Size     0
005370  000748  #constant  Strings20Size     0
005371  000749  #constant  Strings20StartH   0
005372  000749  #constant  Strings20StartH   0
005373  000750  #constant  Strings20StartL   0
005374  000750  #constant  Strings20StartL   0
005375  000751  #constant  Strings21Size     0
005376  000751  #constant  Strings21Size     0
005377  000752  #constant  Strings21StartH   0
005378  000752  #constant  Strings21StartH   0
005379  000753  #constant  Strings21StartL   0
005380  000753  #constant  Strings21StartL   0
005381  000754  #constant  Strings22Size     0
005382  000754  #constant  Strings22Size     0
005383  000755  #constant  Strings22StartH   0
005384  000755  #constant  Strings22StartH   0
005385  000756  #constant  Strings22StartL   0
005386  000756  #constant  Strings22StartL   0
005387  000757  #constant  Strings24Size     0
005388  000757  #constant  Strings24Size     0
005389  000758  #constant  Strings24StartH   0
005390  000758  #constant  Strings24StartH   0
005391  000759  #constant  Strings24StartL   0
005392  000759  #constant  Strings24StartL   0
005393  000760  #constant  Strings25Size     0
005394  000760  #constant  Strings25Size     0
005395  000761  #constant  Strings25StartH   0
005396  000761  #constant  Strings25StartH   0
005397  000762  #constant  Strings25StartL   0
005398  000762  #constant  Strings25StartL   0
005399  000763  #constant  Strings26Size     0
005400  000763  #constant  Strings26Size     0
005401  000764  #constant  Strings26StartH   0
005402  000764  #constant  Strings26StartH   0
005403  000765  #constant  Strings26StartL   0
005404  000765  #constant  Strings26StartL   0
005405  000766  #constant  Strings28Size     0
005406  000766  #constant  Strings28Size     0
005407  000767  #constant  Strings28StartH   0
005408  000767  #constant  Strings28StartH   0
005409  000768  #constant  Strings28StartL   0
005410  000768  #constant  Strings28StartL   0
005411  000769  #constant  Strings29Size     0
005412  000769  #constant  Strings29Size     0
005413  000770  #constant  Strings29StartH   0
005414  000770  #constant  Strings29StartH   0
005415  000771  #constant  Strings29StartL   0
005416  000771  #constant  Strings29StartL   0
005417  000772  #constant  Strings30Size     0
005418  000772  #constant  Strings30Size     0
005419  000773  #constant  Strings30StartH   0
005420  000773  #constant  Strings30StartH   0
005421  000774  #constant  Strings30StartL   0
005422  000774  #constant  Strings30StartL   0
005423  000775  #constant  Strings31Size     0
005424  000775  #constant  Strings31Size     0
005425  000776  #constant  Strings31StartH   0
005426  000776  #constant  Strings31StartH   0
005427  000777  #constant  Strings31StartL   0
005428  000777  #constant  Strings31StartL   0
005429  000778  #constant  Strings32Size     0
005430  000778  #constant  Strings32Size     0
005431  000779  #constant  Strings32StartH   0
005432  000779  #constant  Strings32StartH   0
005433  000780  #constant  Strings32StartL   0
005434  000780  #constant  Strings32StartL   0
005435  000781  #constant  Strings33Size     0
005436  000781  #constant  Strings33Size     0
005437  000782  #constant  Strings33StartH   0
005438  000782  #constant  Strings33StartH   0
005439  000783  #constant  Strings33StartL   0
005440  000783  #constant  Strings33StartL   0
005441  000784  #constant  Strings34Size     0
005442  000784  #constant  Strings34Size     0
005443  000785  #constant  Strings34StartH   0
005444  000785  #constant  Strings34StartH   0
005445  000786  #constant  Strings34StartL   0
005446  000786  #constant  Strings34StartL   0
005447  000787  #constant  Strings35Size     0
005448  000787  #constant  Strings35Size     0
005449  000788  #constant  Strings35StartH   0
005450  000788  #constant  Strings35StartH   0
005451  000789  #constant  Strings35StartL   0
005452  000789  #constant  Strings35StartL   0
005453  000790  #constant  Strings36Size     0
005454  000790  #constant  Strings36Size     0
005455  000791  #constant  Strings36StartH   0
005456  000791  #constant  Strings36StartH   0
005457  000792  #constant  Strings36StartL   0
005458  000792  #constant  Strings36StartL   0
005459  000793  #constant  Strings37Size     0
005460  000793  #constant  Strings37Size     0
005461  000794  #constant  Strings37StartH   0
005462  000794  #constant  Strings37StartH   0
005463  000795  #constant  Strings37StartL   0
005464  000795  #constant  Strings37StartL   0
005465  000796  #constant  Strings40Size     0
005466  000796  #constant  Strings40Size     0
005467  000797  #constant  Strings40StartH   0
005468  000797  #constant  Strings40StartH   0
005469  000798  #constant  Strings40StartL   0
005470  000798  #constant  Strings40StartL   0
005471  000799  #constant  Strings41Size     0
005472  000799  #constant  Strings41Size     0
005473  000800  #constant  Strings41StartH   0
005474  000800  #constant  Strings41StartH   0
005475  000801  #constant  Strings41StartL   0
005476  000801  #constant  Strings41StartL   0
005477  000802  #constant  Strings42Size     0
005478  000802  #constant  Strings42Size     0
005479  000803  #constant  Strings42StartH   0
005480  000803  #constant  Strings42StartH   0
005481  000804  #constant  Strings42StartL   0
005482  000804  #constant  Strings42StartL   0
005483  000805  #constant  Strings43Size     0
005484  000805  #constant  Strings43Size     0
005485  000806  #constant  Strings43StartH   0
005486  000806  #constant  Strings43StartH   0
005487  000807  #constant  Strings43StartL   0
005488  000807  #constant  Strings43StartL   0
005489  000808  #constant  Strings45Size     0
005490  000808  #constant  Strings45Size     0
005491  000809  #constant  Strings45StartH   0
005492  000809  #constant  Strings45StartH   0
005493  000810  #constant  Strings45StartL   0
005494  000810  #constant  Strings45StartL   0
005495  000811  #constant  Strings46Size     0
005496  000811  #constant  Strings46Size     0
005497  000812  #constant  Strings46StartH   0
005498  000812  #constant  Strings46StartH   0
005499  000813  #constant  Strings46StartL   0
005500  000813  #constant  Strings46StartL   0
005501  000814  #constant  Strings47Size     0
005502  000814  #constant  Strings47Size     0
005503  000815  #constant  Strings47StartH   0
005504  000815  #constant  Strings47StartH   0
005505  000816  #constant  Strings47StartL   0
005506  000816  #constant  Strings47StartL   0
005507  000817  #constant  Strings51Size     0
005508  000817  #constant  Strings51Size     0
005509  000818  #constant  Strings51StartH   0
005510  000818  #constant  Strings51StartH   0
005511  000819  #constant  Strings51StartL   0
005512  000819  #constant  Strings51StartL   0
005513  000820  #constant  Strings52Size     0
005514  000820  #constant  Strings52Size     0
005515  000821  #constant  Strings52StartH   0
005516  000821  #constant  Strings52StartH   0
005517  000822  #constant  Strings52StartL   0
005518  000822  #constant  Strings52StartL   0
005519  000823  #constant  Strings54Size     0
005520  000823  #constant  Strings54Size     0
005521  000824  #constant  Strings54StartH   0
005522  000824  #constant  Strings54StartH   0
005523  000825  #constant  Strings54StartL   0
005524  000825  #constant  Strings54StartL   0
005525  000826  #constant  Strings3StartH   0x0
005526  000826  #constant  Strings3StartH   0x0
005527  000827  #constant  Strings3StartL   0x0
005528  000827  #constant  Strings3StartL   0x0
005529  000828  #constant  Strings1StartH   0x0
005530  000828  #constant  Strings1StartH   0x0
005531  000829  #constant  Strings1StartL   0x200
005532  000829  #constant  Strings1StartL   0x200
005533  000830  #constant  Strings8StartH   0x0
005534  000830  #constant  Strings8StartH   0x0
005535  000831  #constant  Strings8StartL   0x400
005536  000831  #constant  Strings8StartL   0x400
005537  000832  #constant  Strings12StartH   0x0
005538  000832  #constant  Strings12StartH   0x0
005539  000833  #constant  Strings12StartL   0x600
005540  000833  #constant  Strings12StartL   0x600
005541  000834  #constant  Strings23StartH   0x0
005542  000834  #constant  Strings23StartH   0x0
005543  000835  #constant  Strings23StartL   0x800
005544  000835  #constant  Strings23StartL   0x800
005545  000836  #constant  Strings16StartH   0x0
005546  000836  #constant  Strings16StartH   0x0
005547  000837  #constant  Strings16StartL   0xA00
005548  000837  #constant  Strings16StartL   0xA00
005549  000838  #constant  Strings2StartH   0x0
005550  000838  #constant  Strings2StartH   0x0
005551  000839  #constant  Strings2StartL   0xC00
005552  000839  #constant  Strings2StartL   0xC00
005553  000840  #constant  Strings7StartH   0x0
005554  000840  #constant  Strings7StartH   0x0
005555  000841  #constant  Strings7StartL   0xE00
005556  000841  #constant  Strings7StartL   0xE00
005557  000842  #constant  Strings9StartH   0x0
005558  000842  #constant  Strings9StartH   0x0
005559  000843  #constant  Strings9StartL   0x1000
005560  000843  #constant  Strings9StartL   0x1000
005561  000844  #constant  Strings10StartH   0x0
005562  000844  #constant  Strings10StartH   0x0
005563  000845  #constant  Strings10StartL   0x1200
005564  000845  #constant  Strings10StartL   0x1200
005565  000846  #constant  Strings27StartH   0x0
005566  000846  #constant  Strings27StartH   0x0
005567  000847  #constant  Strings27StartL   0x1400
005568  000847  #constant  Strings27StartL   0x1400
005569  000848  #constant  Strings48StartH   0x0
005570  000848  #constant  Strings48StartH   0x0
005571  000849  #constant  Strings48StartL   0x1600
005572  000849  #constant  Strings48StartL   0x1600
005573  000850  #constant  Strings13StartH   0x0
005574  000850  #constant  Strings13StartH   0x0
005575  000851  #constant  Strings13StartL   0x1800
005576  000851  #constant  Strings13StartL   0x1800
005577  000852  #constant  Strings38StartH   0x0
005578  000852  #constant  Strings38StartH   0x0
005579  000853  #constant  Strings38StartL   0x1A00
005580  000853  #constant  Strings38StartL   0x1A00
005581  000854  #constant  Strings53StartH   0x0
005582  000854  #constant  Strings53StartH   0x0
005583  000855  #constant  Strings53StartL   0x1C00
005584  000855  #constant  Strings53StartL   0x1C00
005585  000856  #constant  Strings11StartH   0x0
005586  000856  #constant  Strings11StartH   0x0
005587  000857  #constant  Strings11StartL   0x1E00
005588  000857  #constant  Strings11StartL   0x1E00
005589  000858  #constant  Strings39StartH   0x0
005590  000858  #constant  Strings39StartH   0x0
005591  000859  #constant  Strings39StartL   0x2000
005592  000859  #constant  Strings39StartL   0x2000
005593  000860  #constant  Strings44StartH   0x0
005594  000860  #constant  Strings44StartH   0x0
005595  000861  #constant  Strings44StartL   0x2200
005596  000861  #constant  Strings44StartL   0x2200
005597  000862  #constant  Strings49StartH   0x0
005598  000862  #constant  Strings49StartH   0x0
005599  000863  #constant  Strings49StartL   0x2400
005600  000863  #constant  Strings49StartL   0x2400
005601  000864  #constant  Strings50StartH   0x0
005602  000864  #constant  Strings50StartH   0x0
005603  000865  #constant  Strings50StartL   0x2600
005604  000865  #constant  Strings50StartL   0x2600
005605  000866  #constant  Strings55StartH   0x0
005606  000866  #constant  Strings55StartH   0x0
005607  000867  #constant  Strings55StartL   0x2800
005608  000867  #constant  Strings55StartL   0x2800
005609  000868  #constant  Strings6StartH   0x0
005610  000868  #constant  Strings6StartH   0x0
005611  000869  #constant  Strings6StartL   0x2A00
005612  000869  #constant  Strings6StartL   0x2A00
005613  000870  #constant  Strings0StartH   0x0
005614  000870  #constant  Strings0StartH   0x0
005615  000871  #constant  Strings0StartL   0x2C00
005616  000871  #constant  Strings0StartL   0x2C00
005617  000872  #IFNOT EXISTS NOGLOBALS
005618  000873  var hndl ;
005619  000874  #ENDIF
005620  000014        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\CLPrintStrings.inc

005621  000015  #inherit "CLPrintStrings.inc"
005622  000015  #inherit "CLPrintStrings.inc"
005623  000001  func PrintStrings(var ID, var *msgid, var String)
005624  000002      var StringID, i, ch, offs32[2], res32[2];
005625  000003      StringID := oStringss[1+ID] ;
005626  000004      if (String)
005627  000005          stringsCV[ID] := -1 ;
005628  000006      else
005629  000007          stringsCV[ID] := msgid ;
005630  000008      endif
005631  000009      if ((StringID == -1) || (*(StringID + Ofs_String_Form) != CurrentForm)) return ;
005632  000010      txt_FontID(hFonts[ID]) ;
005633  000011      txt_Attributes(*(StringID + Ofs_String_FontAttribs)) ; // >> 4 fix for r25,6,7,8 PmmC
005634  000012  //    txt_Opacity(*(StringID + STTransparent)) ;
005635  000013        
005636  000014      if (*(StringID + Ofs_String_Transparent))
005637  000015          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), *(StringID + Ofs_String_BGColor));
005638  000016      else if (FormBGcolors[CurrentForm] != ColorBGimage)
005639  000017          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), FormBGcolors[CurrentForm]);
005640  000018      else
005641  000019          gfx_ClipWindow(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2)) ;
005642  000020          gfx_Clipping(ON) ;
005643  000021          img_Show(hndl,FormStartIndex[CurrentForm]) ;
005644  000022          gfx_Clipping(OFF) ;
005645  000023        
005646  000024      endif
005647  000025        
005648  000026      txt_FGcolour(*(StringID + Ofs_String_FGColor)) ;
005649  000027      txt_BGcolour(*(StringID + Ofs_String_BGColor)) ;
005650  000028      txt_Opacity(TRANSPARENT);                // 8  text OPAQUE or TRANSPARENT
005651  000029        
005652  000030      gfx_MoveTo(*(StringID + Ofs_String_x1) , *(StringID + Ofs_String_y1)) ;
005653  000031        
005654  000032      if (String)
005655  000033          i := 0 ;
005656  000034          ch := msgid[i++] ;
005657  000035          while (ch != 0)
005658  000036              putch(ch) ;
005659  000037              ch := msgid[i++] ;
005660  000038          wend
005661  000039      else
005662  000040          umul_1616(offs32, *(StringID + Ofs_String_Size), msgid);
005663  000041          res32[1] := *(StringID + Ofs_String_StartH) ;
005664  000042          res32[0] := *(StringID + Ofs_String_StartL) ;
005665  000043          uadd_3232(res32,res32,offs32) ;
005666  000044          file_Seek(hstrings, res32[1], res32[0]);
005667  000045          repeat
005668  000046              if (*(StringID + Ofs_String_Ansi))
005669  000047                  ch := file_GetC(hstrings) ;
005670  000048              else
005671  000049                  ch := file_GetW(hstrings) ;
005672  000050              endif
005673  000051              putch(ch) ;
005674  000052          until (ch == 0) ;
005675  000053      endif
005676  000054        
005677  000055  endfunc
005678  000056        
005679  000016        
005680  000017  #constant IPDatasize 22
005681  000017  #constant IPDatasize 22
005682  000018        
005683  000019  #CONST
005684  000023  #END
005685  000024        
005686  000025  #CONST
005687  000135  #END
005688  000136        
005689  000987  #END
5690  4CA0
5691  4CA1
5692  4CA2
5693  4CA3
5694  4CA4
5695  4CA5
5696  4CA6
5697  4CA7
5698  4CA8
5699  4CA9
5700  4CAA
5701  4CAB
5702  4CAC
5703  4CAD
5704  4CAE
5705  4CAF
5706  4CB0
5707  4CB1
5708  4CB2
5709  4CB3
5710  4CB4
5711  4CB5
5712  4CB6
5713  4CB7
5714  4CB8
5715  4CB9
5716  4CBA
5717  4CBB
5718  4CBC
5719  4CBD
5720  4CBE
5721  4CBF
5722  4CC0
5723  4CC1
5724  4CC2
5725  4CC3
5726  4CC4
5727  4CC5
5728  4CC6
5729  4CC7
5730  4CC8
5731  4CC9
5732  4CCA
5733  4CCB
5734  4CCC
5735  4CCD
5736  4CCE
5737  4CCF
5738  4CD0
5739  4CD1
5740  4CD2
5741  4CD3
5742  4CD4
5743  4CD5
5744  4CD6
5745  4CD7
5746  4CD8
5747  4CD9
5748  4CDA
5749  4CDB
5750  4CDC
5751  4CDD
5752  4CDE
5753  4CDF
5754  4CE0
5755  4CE1
5756  4CE2
5757  4CE3
5758  4CE4
5759  4CE5
5760  4CE6
5761  4CE7
5762  4CE8
5763  4CE9
5764  4CEA
5765  4CEB
5766  4CEC
5767  4CED
5768  4CEE
5769  4CEF
5770  4CF0
5771  4CF1
5772  4CF2
5773  4CF3
5774  4CF4
5775  4CF5
5776  4CF6
5777  4CF7
5778  4CF8
5779  4CF9
5780  4CFA
5781  4CFB
5782  4CFC
5783  4CFD
5784  4CFE
5785  4CFF
5786  4D00
5787  4D01
5788  4D02
5789  4D03
5790  4D04
5791  4D05
5792  4D06
5793  4D07
5794  4D08
5795  4D09
5796  4D0A
5797  4D0B
5798  4D0C
5799  4D0D
5800  4D0E
5801  4D0F
5802  4D10
5803  4D11
5804  4D12
5805  4D13
5806  4D14
5807  4D15
5808  4D16
5809  4D17
5810  4D18
5811  4D19
5812  4D1A
5813  4D1B
5814  4D1C
5815  4D1D
5816  4D1E
5817  4D1F
5818  4D20
5819  4D21
5820  4D22
5821  4D23
5822  4D24
5823  4D25
5824  4D26
5825  4D27
5826  4D28
5827  4D29
5828  4D2A
5829  4D2B
5830  4D2C
5831  4D2D
5832  4D2E
5833  4D2F
5834  4D30
5835  4D31
5836  4D32
5837  4D33
5838  4D34
5839  4D35
5840  4D36
5841  4D37
5842  4D38
5843  4D39
5844  4D3A
5845  4D3B
5846  4D3C
5847  4D3D
5848  4D3E
5849  4D3F
5850  4D40
5851  4D41
5852  4D42
5853  4D43
5854  4D44
5855  4D45
5856  4D46
5857  4D47
5858  4D48
5859  4D49
5860  4D4A
5861  4D4B
5862  4D4C
5863  4D4D
5864  4D4E
5865  4D4F
5866  4D50
5867  4D51
5868  4D52
5869  4D53
5870  4D54
5871  4D55
5872  4D56
5873  4D57
5874  4D58
5875  4D59
5876  4D5A
5877  4D5B
5878  4D5C
5879  4D5D
5880  4D5E
5881  4D5F
5882  4D60
5883  4D61
5884  4D62
5885  4D63
5886  4D64
5887  4D65
5888  4D66
5889  4D67
5890  4D68
5891  4D69
5892  4D6A
5893  4D6B
5894  4D6C
5895  4D6D
5896  4D6E
5897  4D6F
5898  4D70
5899  4D71
5900  4D72
5901  4D73
5902  4D74
5903  4D75
5904  4D76
5905  4D77
5906  4D78
5907  4D79
5908  4D7A
5909  4D7B
5910  4D7C
5911  4D7D
5912  4D7E
5913  4D7F
5914  4D80
5915  4D81
5916  4D82
5917  4D83
5918  4D84
5919  4D85
5920  4D86
5921  4D87
5922  4D88
5923  4D89
5924  4D8A
5925  4D8B
5926  4D8C
5927  4D8D
5928  4D8E
5929  4D8F
5930  4D90
5931  4D91
5932  4D92
5933  4D93
5934  4D94
5935  4D95
5936  4D96
5937  4D97
5938  4D98
5939  4D99
5940  4D9A
5941  4D9B
5942  4D9C
5943  4D9D
5944  4D9E
5945  4D9F
5946  4DA0
5947  4DA1
5948  4DA2
5949  4DA3
5950  4DA4
5951  4DA5
5952  4DA6
5953  4DA7
5954  4DA8
5955  4DA9
5956  4DAA
5957  4DAB
5958  4DAC
5959  4DAD
5960  4DAE
5961  4DAF
5962  4DB0
5963  4DB1
5964  4DB2
5965  4DB3
5966  4DB4
5967  4DB5
5968  4DB6
5969  4DB7
5970  4DB8
5971  4DB9
5972  4DBA
5973  4DBB
5974  4DBC
5975  4DBD
5976  4DBE
5977  4DBF
5978  4DC0
5979  4DC1
5980  4DC2
5981  4DC3
5982  4DC4
5983  4DC5
5984  4DC6
5985  4DC7
5986  4DC8
5987  4DC9
5988  4DCA
5989  4DCB
5990  4DCC
5991  4DCD
5992  4DCE
5993  4DCF
5994  4DD0
5995  4DD1
5996  4DD2
5997  4DD3
5998  4DD4
5999  4DD5
6000  4DD6
6001  4DD7
6002  4DD8
6003  4DD9
6004  4DDA
6005  4DDB
6006  4DDC
6007  4DDD
6008  4DDE
6009  4DDF
6010  4DE0
6011  4DE1
6012  4DE2
6013  4DE3
6014  4DE4
6015  4DE5
6016  4DE6
6017  4DE7
6018  4DE8
6019  4DE9
6020  4DEA
6021  4DEB
6022  4DEC
6023  4DED
6024  4DEE
6025  4DEF
6026  4DF0
6027  4DF1
6028  4DF2
6029  4DF3
6030  4DF4
6031  4DF5
6032  4DF6
6033  4DF7
6034  4DF8
6035  4DF9
6036  4DFA
6037  4DFB
6038  4DFC
6039  4DFD
6040  4DFE
6041  4DFF
6042  4E00
6043  4E01
6044  4E02
6045  4E03
6046  4E04
6047  4E05
6048  4E06
6049  4E07
6050  4E08
6051  4E09
6052  4E0A
6053  4E0B
6054  4E0C
6055  4E0D
6056  4E0E
6057  4E0F
6058  4E10
6059  4E11
6060  4E12
6061  4E13
6062  4E14
6063  4E15
6064  4E16
6065  4E17
6066  4E18
6067  4E19
6068  4E1A
6069  4E1B
6070  4E1C
6071  4E1D
6072  4E1E
6073  4E1F
6074  4E20
6075  4E21
6076  4E22
6077  4E23
6078  4E24
6079  4E25
6080  4E26
6081  4E27
6082  4E28
6083  4E29
6084  4E2A
6085  4E2B
6086  4E2C
6087  4E2D
6088  4E2E
6089  4E2F
6090  4E30
6091  4E31
6092  4E32
6093  4E33
6094  4E34
6095  4E35
6096  4E36
6097  4E37
6098  4E38
6099  4E39
6100  4E3A
6101  4E3B
6102  4E3C
6103  4E3D
6104  4E3E
6105  4E3F
6106  4E40
6107  4E41
6108  4E42
6109  4E43
6110  4E44
6111  4E45
6112  4E46
6113  4E47
6114  4E48
6115  4E49
6116  4E4A
6117  4E4B
6118  4E4C
6119  4E4D
6120  4E4E
6121  4E4F
6122  4E50
6123  4E51
6124  4E52
6125  4E53
6126  4E54
6127  4E55
6128  4E56
6129  4E57
6130  4E58
6131  4E59
6132  4E5A
6133  4E5B
6134  4E5C
6135  4E5D
6136  4E5E
6137  4E5F
6138  4E60
6139  4E61
6140  4E62
6141  4E63
6142  4E64
6143  4E65
6144  4E66
6145  4E67
6146  4E68
6147  4E69
6148  4E6A
6149  4E6B
6150  4E6C
6151  4E6D
6152  4E6E
6153  4E6F
6154  4E70
6155  4E71
6156  4E72
6157  4E73
6158  4E74
6159  4E75
6160  4E76
6161  4E77
6162  4E78
6163  4E79
6164  4E7A
6165  4E7B
6166  4E7C
6167  4E7D
6168  4E7E
6169  4E7F
6170  4E80
6171  4E81
6172  4E82
6173  4E83
6174  4E84
6175  4E85
6176  4E86
6177  4E87
6178  4E88
6179  4E89
6180  4E8A
6181  4E8B
6182  4E8C
6183  4E8D
6184  4E8E
6185  4E8F
6186  4E90
6187  4E91
6188  4E92
6189  4E93
6190  4E94
6191  4E95
6192  4E96
6193  4E97
6194  4E98
6195  4E99
6196  4E9A
6197  4E9B
6198  4E9C
6199  4E9D
6200  4E9E
6201  4E9F
6202  4EA0
6203  4EA1
6204  4EA2
6205  4EA3
6206  4EA4
6207  4EA5
6208  4EA6
6209  4EA7
6210  4EA8
6211  4EA9
6212  4EAA
6213  4EAB
6214  4EAC
6215  4EAD
6216  4EAE
6217  4EAF
6218  4EB0
6219  4EB1
6220  4EB2
6221  4EB3
6222  4EB4
6223  4EB5
6224  4EB6
6225  4EB7
6226  4EB8
6227  4EB9
6228  4EBA
6229  4EBB
6230  4EBC
6231  4EBD
6232  4EBE
6233  4EBF
6234  4EC0
6235  4EC1
6236  4EC2
6237  4EC3
6238  4EC4
6239  4EC5
6240  4EC6
6241  4EC7
6242  4EC8
6243  4EC9
6244  4ECA
6245  4ECB
6246  4ECC
6247  4ECD
6248  4ECE
6249  4ECF
6250  4ED0
6251  4ED1
6252  4ED2
6253  4ED3
6254  4ED4
6255  4ED5
6256  4ED6
6257  4ED7
6258  4ED8
6259  4ED9
6260  4EDA
6261  4EDB
6262  4EDC
6263  4EDD
6264  4EDE
6265  4EDF
6266  4EE0
6267  4EE1
6268  4EE2
6269  4EE3
6270  4EE4
6271  4EE5
6272  4EE6
6273  4EE7
6274  4EE8
6275  4EE9
6276  4EEA
6277  4EEB
6278  4EEC
6279  4EED
6280  4EEE
6281  4EEF
6282  4EF0
6283  4EF1
6284  4EF2
6285  4EF3
6286  4EF4
6287  4EF5
6288  4EF6
6289  4EF7
6290  4EF8
6291  4EF9
6292  4EFA
6293  4EFB
6294  4EFC
6295  4EFD
6296  4EFE
6297  4EFF
6298  4F00
6299  4F01
6300  4F02
6301  4F03
6302  4F04
6303  4F05
6304  4F06
6305  4F07
6306  4F08
6307  4F09
6308  4F0A
6309  4F0B
6310  4F0C
6311  4F0D
6312  4F0E
6313  4F0F
6314  4F10
6315  4F11
6316  4F12
6317  4F13
6318  4F14
6319  4F15
6320  4F16
6321  4F17
6322  4F18
6323  4F19
6324  4F1A
6325  4F1B
6326  4F1C
6327  4F1D
6328  4F1E
6329  4F1F
6330  4F20
6331  4F21
6332  4F22
6333  4F23
6334  4F24
6335  4F25
6336  4F26
6337  4F27
6338  4F28
6339  4F29
6340  4F2A
6341  4F2B
6342  4F2C
6343  4F2D
6344  4F2E
6345  4F2F
6346  4F30
6347  4F31
6348  4F32
6349  4F33
6350  4F34
6351  4F35
6352  4F36
6353  4F37
6354  4F38
6355  4F39
6356  4F3A
6357  4F3B
6358  4F3C
6359  4F3D
6360  4F3E
6361  4F3F
6362  4F40
6363  4F41
6364  4F42
6365  4F43
6366  4F44
6367  4F45
6368  4F46
6369  4F47
6370  4F48
6371  4F49
6372  4F4A
6373  4F4B
6374  4F4C
6375  4F4D
6376  4F4E
6377  4F4F
6378  4F50
6379  4F51
6380  4F52
6381  4F53
6382  4F54
6383  4F55
6384  4F56
6385  4F57
6386  4F58
6387  4F59
6388  4F5A
6389  4F5B
6390  4F5C
6391  4F5D
6392  4F5E
6393  4F5F
6394  4F60
6395  4F61
6396  4F62
6397  4F63
6398  4F64
6399  4F65
6400  4F66
6401  4F67
6402  4F68
6403  4F69
6404  4F6A
6405  4F6B
6406  4F6C
6407  4F6D
6408  4F6E
6409  4F6F
6410  4F70
6411  4F71
6412  4F72
6413  4F73
6414  4F74
6415  4F75
6416  4F76
6417  4F77
6418  4F78
6419  4F79
6420  4F7A
6421  4F7B
6422  4F7C
6423  4F7D
6424  4F7E
6425  4F7F
6426  4F80
6427  4F81
6428  4F82
6429  4F83
6430  4F84
6431  4F85
6432  4F86
6433  4F87
6434  4F88
6435  4F89
6436  4F8A
6437  4F8B
6438  4F8C
6439  4F8D
6440  4F8E
6441  4F8F
6442  4F90
6443  4F91
6444  4F92
6445  4F93
6446  4F94
6447  4F95
6448  4F96
6449  4F97
6450  4F98
6451  4F99
6452  4F9A
6453  4F9B
6454  4F9C
6455  4F9D
6456  4F9E
6457  4F9F
6458  4FA0
6459  4FA1
6460  4FA2
6461  4FA3
6462  4FA4
6463  4FA5
6464  4FA6
6465  4FA7
6466  4FA8
6467  4FA9
6468  4FAA
6469  4FAB
6470  4FAC
6471  4FAD
6472  4FAE
6473  4FAF
6474  4FB0
6475  4FB1
6476  4FB2
6477  4FB3
6478  4FB4
6479  4FB5
6480  4FB6
6481  4FB7
6482  4FB8
6483  4FB9
6484  4FBA
6485  4FBB
6486  4FBC
6487  4FBD
6488  4FBE
6489  4FBF
6490  4FC0
6491  4FC1
6492  4FC2
6493  4FC3
6494  4FC4
6495  4FC5
6496  4FC6
6497  4FC7
6498  4FC8
6499  4FC9
6500  4FCA
6501  4FCB
6502  4FCC
6503  4FCD
6504  4FCE
6505  4FCF
6506  4FD0
6507  4FD1
6508  4FD2
6509  4FD3
6510  4FD4
6511  4FD5
6512  4FD6
6513  4FD7
6514  4FD8
6515  4FD9
6516  4FDA
6517  4FDB
6518  4FDC
6519  4FDD
6520  4FDE
6521  4FDF
6522  4FE0
6523  4FE1
6524  4FE2
6525  4FE3
6526  4FE4
6527  4FE5
6528  4FE6
6529  4FE7
6530  4FE8
6531  4FE9
6532  4FEA
6533  4FEB
6534  4FEC
6535  4FED
6536  4FEE
6537  4FEF
6538  4FF0
6539  4FF1
6540  4FF2
6541  4FF3
6542  4FF4
6543  4FF5
6544  4FF6
6545  4FF7
6546  4FF8
6547  4FF9
6548  4FFA
6549  4FFB
6550  4FFC
6551  4FFD
6552  4FFE
6553  4FFF
6554  5000
6555  5001
6556  5002
6557  5003
6558  5004
6559  5005
6560  5006
6561  5007
6562  5008
6563  5009
6564  500A
6565  500B
6566  500C
6567  500D
6568  500E
6569  500F
6570  5010
6571  5011
6572  5012
6573  5013
6574  5014
6575  5015
6576  5016
6577  5017
6578  5018
6579  5019
6580  501A
6581  501B
6582  501C
6583  501D
6584  501E
6585  501F
6586  5020
6587  5021
6588  5022
6589  5023
6590  5024
6591  5025
6592  5026
6593  5027
6594  5028
6595  5029
6596  502A
6597  502B
6598  502C
6599  502D
6600  502E
6601  502F
6602  5030
6603  5031
6604  5032
6605  5033
6606  5034
6607  5035
6608  5036
6609  5037
6610  5038
6611  5039
6612  503A
6613  503B
6614  503C
6615  503D
6616  503E
6617  503F
6618  5040
6619  5041
6620  5042
6621  5043
6622  5044
6623  5045
6624  5046
6625  5047
6626  5048
6627  5049
6628  504A
6629  504B
6630  504C
6631  504D
6632  504E
6633  504F
6634  5050
6635  5051
6636  5052
6637  5053
6638  5054
6639  5055
6640  5056
6641  5057
6642  5058
6643  5059
6644  505A
6645  505B
6646  505C
6647  505D
6648  505E
6649  505F
6650  5060
6651  5061
6652  5062
6653  5063
6654  5064
6655  5065
6656  5066
6657  5067
6658  5068
6659  5069
6660  506A
6661  506B
6662  506C
6663  506D
6664  506E
6665  506F
6666  5070
6667  5071
6668  5072
6669  5073
6670  5074
6671  5075
6672  5076
6673  5077
6674  5078
6675  5079
6676  507A
6677  507B
6678  507C
6679  507D
6680  507E
6681  507F
6682  5080
6683  5081
6684  5082
6685  5083
6686  5084
6687  5085
6688  5086
6689  5087
6690  5088
6691  5089
6692  508A
6693  508B
6694  508C
6695  508D
6696  508E
6697  508F
6698  5090
6699  5091
6700  5092
6701  5093
6702  5094
6703  5095
6704  5096
6705  5097
6706  5098
6707  5099
6708  509A
6709  509B
6710  509C
6711  509D
6712  509E
6713  509F
6714  50A0
6715  50A1
6716  50A2
6717  50A3
6718  50A4
6719  50A5
6720  50A6
6721  50A7
6722  50A8
6723  50A9
6724  50AA
6725  50AB
6726  50AC
6727  50AD
6728  50AE
6729  50AF
6730  50B0
6731  50B1
6732  50B2
6733  50B3
6734  50B4
6735  50B5
6736  50B6
6737  50B7
6738  50B8
6739  50B9
6740  50BA
6741  50BB
6742  50BC
6743  50BD
6744  50BE
6745  50BF
6746  50C0
6747  50C1
6748  50C2
6749  50C3
6750  50C4
6751  50C5
6752  50C6
6753  50C7
6754  50C8
6755  50C9
6756  50CA
6757  50CB
6758  50CC
6759  50CD
6760  50CE
6761  50CF
6762  50D0
6763  50D1
6764  50D2
6765  50D3
6766  50D4
6767  50D5
6768  50D6
6769  50D7
6770  50D8
6771  50D9
6772  50DA
6773  50DB
6774  50DC
6775  50DD
6776  50DE
6777  50DF
6778  50E0
6779  50E1
6780  50E2
6781  50E3
6782  50E4
6783  50E5
6784  50E6
6785  50E7
6786  50E8
6787  50E9
6788  50EA
6789  50EB
6790  50EC
6791  50ED
6792  50EE
6793  50EF
6794  50F0
6795  50F1
6796  50F2
6797  50F3
6798  50F4
6799  50F5
6800  50F6
6801  50F7
6802  50F8
6803  50F9
6804  50FA
6805  50FB
6806  50FC
6807  50FD
6808  50FE
6809  50FF
6810  5100
6811  5101
6812  5102
6813  5103
6814  5104
6815  5105
6816  5106
6817  5107
6818  5108
6819  5109
6820  510A
6821  510B
6822  510C
6823  510D
6824  510E
6825  510F
6826  5110
6827  5111
6828  5112
6829  5113
6830  5114
6831  5115
6832  5116
6833  5117
6834  5118
6835  5119
6836  511A
6837  511B
6838  511C
6839  511D
6840  511E
6841  511F
6842  5120
6843  5121
6844  5122
6845  5123
6846  5124
6847  5125
6848  5126
6849  5127
6850  5128
6851  5129
6852  512A
6853  512B
6854  512C
6855  512D
6856  512E
6857  512F
6858  5130
6859  5131
6860  5132
6861  5133
6862  5134
6863  5135
6864  5136
6865  5137
6866  5138
6867  5139
6868  513A
6869  513B
6870  513C
6871  513D
6872  513E
6873  513F
6874  5140
6875  5141
6876  5142
6877  5143
6878  5144
6879  5145
6880  5146
6881  5147
6882  5148
6883  5149
6884  514A
6885  514B
6886  514C
6887  514D
6888  514E
6889  514F
6890  5150
6891  5151
6892  5152
6893  5153
6894  5154
6895  5155
6896  5156
6897  5157
6898  5158
6899  5159
6900  515A
6901  515B
6902  515C
6903  515D
6904  515E
6905  515F
6906  5160
6907  5161
6908  5162
6909  5163
6910  5164
6911  5165
6912  5166
6913  5167
6914  5168
6915  5169
6916  516A
6917  516B
6918  516C
6919  516D
6920  516E
6921  516F
6922  5170
6923  5171
6924  5172
6925  5173
6926  5174
6927  5175
6928  5176
6929  5177
6930  5178
6931  5179
6932  517A
6933  517B
6934  517C
6935  517D
6936  517E
6937  517F
6938  5180
6939  5181
6940  5182
6941  5183
6942  5184
6943  5185
6944  5186
6945  5187
6946  5188
6947  5189
6948  518A
6949  518B
6950  518C
6951  518D
6952  518E
6953  518F
6954  5190
6955  5191
6956  5192
6957  5193
6958  5194
6959  5195
6960  5196
6961  5197
6962  5198
6963  5199
6964  519A
6965  519B
6966  519C
6967  519D
6968  519E
6969  519F
6970  51A0
6971  51A1
6972  51A2
6973  51A3
6974  51A4
6975  51A5
6976  51A6
6977  51A7
6978  51A8
6979  51A9
6980  51AA
6981  51AB
6982  51AC
6983  51AD
6984  51AE
6985  51AF
6986  51B0
6987  51B1
6988  51B2
6989  51B3
6990  51B4
6991  51B5
6992  51B6
6993  51B7
6994  51B8
6995  51B9
6996  51BA
6997  51BB
6998  51BC
6999  51BD
7000  51BE
7001  51BF
7002  51C0
7003  51C1
7004  51C2
7005  51C3
7006  51C4
7007  51C5
7008  51C6
7009  51C7
7010  51C8
7011  51C9
7012  51CA
7013  51CB
7014  51CC
7015  51CD
7016  51CE
7017  51CF
7018  51D0
7019  51D1
7020  51D2
7021  51D3
7022  51D4
7023  51D5
7024  51D6
7025  51D7
7026  51D8
7027  51D9
7028  51DA
7029  51DB
7030  51DC
7031  51DD
7032  51DE
7033  51DF
7034  51E0
7035  51E1
7036  51E2
7037  51E3
7038  51E4
7039  51E5
7040  51E6
7041  51E7
7042  51E8
7043  51E9
7044  51EA
7045  51EB
7046  51EC
7047  51ED
7048  51EE
7049  51EF
7050  51F0
7051  51F1
7052  51F2
7053  51F3
7054  51F4
7055  51F5
7056  51F6
7057  51F7
7058  51F8
7059  51F9
7060  51FA
7061  51FB
7062  51FC
7063  51FD
7064  51FE
7065  51FF
7066  5200
7067  5201
7068  5202
7069  5203
7070  5204
7071  5205
7072  5206
7073  5207
7074  5208
7075  5209
7076  520A
7077  520B
7078  520C
7079  520D
7080  520E
7081  520F
7082  5210
7083  5211
7084  5212
7085  5213
7086  5214
7087  5215
7088  5216
7089  5217
7090  5218
7091  5219
7092  521A
7093  521B
7094  521C
7095  521D
7096  521E
7097  521F
7098  5220
7099  5221
7100  5222
7101  5223
7102  5224
7103  5225
7104  5226
7105  5227
7106  5228
7107  5229
7108  522A
7109  522B
7110  522C
7111  522D
7112  522E
7113  522F
7114  5230
7115  5231
7116  5232
7117  5233
7118  5234
7119  5235
7120  5236
7121  5237
7122  5238
7123  5239
7124  523A
7125  523B
7126  523C
7127  523D
7128  523E
7129  523F
7130  5240
7131  5241
7132  5242
7133  5243
7134  5244
7135  5245
7136  5246
7137  5247
7138  5248
7139  5249
7140  524A
7141  524B
7142  524C
7143  524D
7144  524E
7145  524F
7146  5250
7147  5251
7148  5252
7149  5253
7150  5254
7151  5255
7152  5256
7153  5257
7154  5258
7155  5259
7156  525A
7157  525B
7158  525C
7159  525D
7160  525E
7161  525F
7162  5260
7163  5261
7164  5262
7165  5263
7166  5264
7167  5265
7168  5266
7169  5267
7170  5268
7171  5269
7172  526A
7173  526B
7174  526C
7175  526D
7176  526E
7177  526F
7178  5270
7179  5271
7180  5272
7181  5273
7182  5274
7183  5275
7184  5276
7185  5277
7186  5278
7187  5279
7188  527A
7189  527B
7190  527C
7191  527D
7192  527E
7193  527F
7194  5280
7195  5281
7196  5282
7197  5283
7198  5284
7199  5285
7200  5286
7201  5287
7202  5288
7203  5289
7204  528A
7205  528B
7206  528C
7207  528D
7208  528E
7209  528F
7210  5290
7211  5291
7212  5292
7213  5293
7214  5294
7215  5295
7216  5296
7217  5297
7218  5298
7219  5299
7220  529A
7221  529B
7222  529C
7223  529D
7224  529E
7225  529F
7226  52A0
7227  52A1
7228  52A2
7229  52A3
7230  52A4
7231  52A5
7232  52A6
7233  52A7
7234  52A8
7235  52A9
7236  52AA
7237  52AB
7238  52AC
7239  52AD
7240  52AE
7241  52AF
7242  52B0
7243  52B1
7244  52B2
7245  52B3
7246  52B4
7247  52B5
7248  52B6
7249  52B7
7250  52B8
7251  52B9
7252  52BA
7253  52BB
7254  52BC
7255  52BD
7256  52BE
7257  52BF
7258  52C0
7259  52C1
7260  52C2
7261  52C3
7262  52C4
7263  52C5
7264  52C6
7265  52C7
7266  52C8
7267  52C9
7268  52CA
7269  52CB
7270  52CC
7271  52CD
7272  52CE
7273  52CF
7274  52D0
7275  52D1
7276  52D2
7277  52D3
7278  52D4
7279  52D5
7280  52D6
7281  52D7
7282  52D8
7283  52D9
7284  52DA
7285  52DB
7286  52DC
7287  52DD
7288  52DE
7289  52DF
7290  52E0
7291  52E1
7292  52E2
7293  52E3
7294  52E4
7295  52E5
7296  52E6
7297  52E7
7298  52E8
7299  52E9
7300  52EA
7301  52EB
7302  52EC
7303  52ED
7304  52EE
7305  52EF
7306  52F0
7307  52F1
7308  52F2
7309  52F3
7310  52F4
7311  52F5
7312  52F6
7313  52F7
7314  52F8
7315  52F9
7316  52FA
7317  52FB
7318  52FC
7319  52FD
7320  52FE
7321  52FF
7322  5300
7323  5301
7324  5302
7325  5303
7326  5304
7327  5305
7328  5306
7329  5307
7330  5308
7331  5309
7332  530A
7333  530B
7334  530C
7335  530D
7336  530E
7337  530F
7338  5310
7339  5311
7340  5312
7341  5313
7342  5314
7343  5315
7344  5316
7345  5317
7346  5318
7347  5319
7348  531A
7349  531B
7350  531C
7351  531D
7352  531E
7353  531F
7354  5320
7355  5321
7356  5322
7357  5323
7358  5324
7359  5325
7360  5326
7361  5327
7362  5328
7363  5329
7364  532A
7365  532B
7366  532C
7367  532D
7368  532E
7369  532F
7370  5330
7371  5331
7372  5332
7373  5333
7374  5334
7375  5335
7376  5336
7377  5337
7378  5338
7379  5339
7380  533A
7381  533B
7382  533C
7383  533D
7384  533E
7385  533F
7386  5340
7387  5341
7388  5342
7389  5343
7390  5344
7391  5345
7392  5346
7393  5347
7394  5348
7395  5349
7396  534A
7397  534B
7398  534C
7399  534D
7400  534E
7401  534F
7402  5350
7403  5351
7404  5352
7405  5353
7406  5354
7407  5355
7408  5356
7409  5357
7410  5358
7411  5359
7412  535A
7413  535B
7414  535C
7415  535D
7416  535E
7417  535F
7418  5360
7419  5361
7420  5362
7421  5363
7422  5364
7423  5365
7424  5366
7425  5367
7426  5368
7427  5369
7428  536A
7429  536B
7430  536C
7431  536D
7432  536E
7433  536F
7434  5370
7435  5371
7436  5372
7437  5373
7438  5374
7439  5375
7440  5376
7441  5377
7442  5378
7443  5379
7444  537A
7445  537B
7446  537C
7447  537D
7448  537E
7449  537F
7450  5380
7451  5381
7452  5382
7453  5383
7454  5384
7455  5385
7456  5386
7457  5387
7458  5388
7459  5389
7460  538A
7461  538B
7462  538C
7463  538D
7464  538E
7465  538F
7466  5390
7467  5391
7468  5392
7469  5393
7470  5394
7471  5395
7472  5396
7473  5397
7474  5398
7475  5399
7476  539A
7477  539B
7478  539C
7479  539D
7480  539E
7481  539F
7482  53A0
7483  53A1
7484  53A2
7485  53A3
7486  53A4
7487  53A5
7488  53A6
7489  53A7
7490  53A8
7491  53A9
7492  53AA
7493  53AB
7494  53AC
7495  53AD
7496  53AE
7497  53AF
7498  53B0
7499  53B1
7500  53B2
7501  53B3
7502  53B4
7503  53B5
7504  53B6
7505  53B7
7506  53B8
7507  53B9
7508  53BA
7509  53BB
7510  53BC
7511  53BD
7512  53BE
7513  53BF
7514  53C0
7515  53C1
7516  53C2
7517  53C3
7518  53C4
7519  53C5
7520  53C6
7521  53C7
7522  53C8
7523  53C9
7524  53CA
7525  53CB
7526  53CC
7527  53CD
7528  53CE
7529  53CF
7530  53D0
7531  53D1
7532  53D2
7533  53D3
7534  53D4
7535  53D5
7536  53D6
7537  53D7
7538  53D8
7539  53D9
7540  53DA
7541  53DB
7542  53DC
7543  53DD
7544  53DE
7545  53DF
7546  53E0
7547  53E1
7548  53E2
7549  53E3
7550  53E4
7551  53E5
7552  53E6
7553  53E7
7554  53E8
7555  53E9
7556  53EA
7557  53EB
7558  53EC
7559  53ED
7560  53EE
7561  53EF
7562  53F0
7563  53F1
7564  53F2
7565  53F3
7566  53F4
7567  53F5
7568  53F6
7569  53F7
7570  53F8
7571  53F9
7572  53FA
7573  53FB
7574  53FC
7575  53FD
7576  53FE
7577  53FF
7578  5400
7579  5401
7580  5402
7581  5403
7582  5404
7583  5405
7584  5406
7585  5407
7586  5408
7587  5409
7588  540A
7589  540B
7590  540C
7591  540D
7592  540E
7593  540F
7594  5410
7595  5411
7596  5412
7597  5413
7598  5414
7599  5415
7600  5416
7601  5417
7602  5418
7603  5419
7604  541A
7605  541B
7606  541C
7607  541D
7608  541E
7609  541F
7610  5420
7611  5421
7612  5422
7613  5423
7614  5424
7615  5425
7616  5426
7617  5427
7618  5428
7619  5429
7620  542A
7621  542B
7622  542C
7623  542D
7624  542E
7625  542F
7626  5430
7627  5431
7628  5432
7629  5433
7630  5434
7631  5435
7632  5436
7633  5437
7634  5438
7635  5439
7636  543A
7637  543B
7638  543C
7639  543D
7640  543E
7641  543F
7642  5440
7643  5441
7644  5442
7645  5443
7646  5444
7647  5445
7648  5446
7649  5447
7650  5448
7651  5449
7652  544A
7653  544B
7654  544C
7655  544D
7656  544E
7657  544F
7658  5450
7659  5451
7660  5452
7661  5453
7662  5454
7663  5455
7664  5456
7665  5457
7666  5458
7667  5459
7668  545A
7669  545B
7670  545C
7671  545D
7672  545E
7673  545F
7674  5460
7675  5461
7676  5462
7677  5463
7678  5464
7679  5465
7680  5466
7681  5467
7682  5468
7683  5469
7684  546A
7685  546B
7686  546C
7687  546D
7688  546E
7689  546F
7690  5470
7691  5471
7692  5472
7693  5473
7694  5474
7695  5475
7696  5476
7697  5477
7698  5478
7699  5479
7700  547A
7701  547B
7702  547C
7703  547D
7704  547E
7705  547F
7706  5480
7707  5481
7708  5482
7709  5483
7710  5484
7711  5485
7712  5486
7713  5487
7714  5488
7715  5489
7716  548A
7717  548B
7718  548C
7719  548D
7720  548E
7721  548F
7722  5490
7723  5491
7724  5492
7725  5493
7726  5494
7727  5495
7728  5496
7729  5497
7730  5498
7731  5499
7732  549A
7733  549B
7734  549C
7735  549D
7736  549E
7737  549F
7738  54A0
7739  54A1
7740  54A2
7741  54A3
7742  54A4
7743  54A5
7744  54A6
7745  54A7
7746  54A8
7747  54A9
7748  54AA
7749  54AB
7750  54AC
7751  54AD
7752  54AE
7753  54AF
7754  54B0
7755  54B1
7756  54B2
7757  54B3
7758  54B4
7759  54B5
7760  54B6
7761  54B7
7762  54B8
7763  54B9
7764  54BA
7765  54BB
7766  54BC
7767  54BD
7768  54BE
7769  54BF
7770  54C0
7771  54C1
7772  54C2
7773  54C3
7774  54C4
7775  54C5
7776  54C6
7777  54C7
7778  54C8
7779  54C9
7780  54CA
7781  54CB
7782  54CC
7783  54CD
7784  54CE
7785  54CF
7786  54D0
7787  54D1
7788  54D2
7789  54D3
7790  54D4
7791  54D5
7792  54D6
7793  54D7
7794  54D8
7795  54D9
7796  54DA
7797  54DB
7798  54DC
7799  54DD
7800  54DE
7801  54DF
7802  54E0
7803  54E1
7804  54E2
7805  54E3
7806  54E4
7807  54E5
7808  54E6
7809  54E7
7810  54E8
7811  54E9
7812  54EA
7813  54EB
7814  54EC
7815  54ED
7816  54EE
7817  54EF
7818  54F0
7819  54F1
7820  54F2
7821  54F3
7822  54F4
7823  54F5
7824  54F6
7825  54F7
7826  54F8
7827  54F9
7828  54FA
7829  54FB
7830  54FC
7831  54FD
7832  54FE
7833  54FF
7834  5500
7835  5501
7836  5502
7837  5503
7838  5504
7839  5505
7840  5506
7841  5507
7842  5508
7843  5509
7844  550A
7845  550B
7846  550C
7847  550D
7848  550E
7849  550F
7850  5510
7851  5511
7852  5512
7853  5513
7854  5514
7855  5515
7856  5516
7857  5517
7858  5518
7859  5519
7860  551A
7861  551B
7862  551C
7863  551D
7864  551E
7865  551F
7866  5520
7867  5521
7868  5522
7869  5523
7870  5524
7871  5525
7872  5526
7873  5527
7874  5528
7875  5529
7876  552A
7877  552B
7878  552C
7879  552D
7880  552E
7881  552F
7882  5530
7883  5531
7884  5532
7885  5533
7886  5534
7887  5535
7888  5536
7889  5537
7890  5538
7891  5539
7892  553A
7893  553B
7894  553C
7895  553D
7896  553E
7897  553F
7898  5540
7899  5541
7900  5542
7901  5543
7902  5544
7903  5545
7904  5546
7905  5547
7906  5548
7907  5549
7908  554A
7909  554B
7910  554C
7911  554D
7912  554E
7913  554F
7914  5550
7915  5551
7916  5552
7917  5553
7918  5554
7919  5555
7920  5556
7921  5557
7922  5558
7923  5559
7924  555A
7925  555B
7926  555C
7927  555D
7928  555E
7929  555F
7930  5560
7931  5561
7932  5562
7933  5563
7934  5564
7935  5565
7936  5566
7937  5567
7938  5568
7939  5569
7940  556A
7941  556B
7942  556C
7943  556D
7944  556E
7945  556F
7946  5570
7947  5571
7948  5572
7949  5573
7950  5574
7951  5575
7952  5576
7953  5577
7954  5578
7955  5579
7956  557A
7957  557B
7958  557C
7959  557D
7960  557E
7961  557F
7962  5580
7963  5581
7964  5582
7965  5583
7966  5584
7967  5585
7968  5586
7969  5587
7970  5588
7971  5589
7972  558A
7973  558B
7974  558C
7975  558D
7976  558E
7977  558F
7978  5590
7979  5591
7980  5592
7981  5593
7982  5594
7983  5595
7984  5596
7985  5597
7986  5598
7987  5599
7988  559A
7989  559B
7990  559C
7991  559D
7992  559E
7993  559F
7994  55A0
7995  55A1
7996  55A2
7997  55A3
7998  55A4
7999  55A5
8000  55A6
8001  55A7
8002  55A8
8003  55A9
8004  55AA
8005  55AB
8006  55AC
8007  55AD
8008  55AE
8009  55AF
8010  55B0
8011  55B1
8012  55B2
8013  55B3
8014  55B4
8015  55B5
8016  55B6
8017  55B7
8018  55B8
8019  55B9
8020  55BA
8021  55BB
8022  55BC
8023  55BD
8024  55BE
8025  55BF
8026  55C0
8027  55C1
8028  55C2
8029  55C3
8030  55C4
8031  55C5
8032  55C6
8033  55C7
8034  55C8
8035  55C9
8036  55CA
8037  55CB
8038  55CC
8039  55CD
8040  55CE
8041  55CF
8042  55D0
8043  55D1
8044  55D2
8045  55D3
8046  55D4
8047  55D5
8048  55D6
8049  55D7
8050  55D8
8051  55D9
8052  55DA
8053  55DB
8054  55DC
8055  55DD
8056  55DE
8057  55DF
8058  55E0
8059  55E1
8060  55E2
8061  55E3
8062  55E4
8063  55E5
8064  55E6
8065  55E7
8066  55E8
8067  55E9
8068  55EA
8069  55EB
8070  55EC
8071  55ED
8072  55EE
8073  55EF
8074  55F0
8075  55F1
8076  55F2
8077  55F3
8078  55F4
8079  55F5
8080  55F6
8081  55F7
8082  55F8
8083  55F9
8084  55FA
8085  55FB
8086  55FC
8087  55FD
8088  55FE
8089  55FF
8090  5600
8091  5601
8092  5602
8093  5603
8094  5604
8095  5605
8096  5606
8097  5607
8098  5608
8099  5609
8100  560A
8101  560B
8102  560C
8103  560D
8104  560E
8105  560F
8106  5610
8107  5611
8108  5612
8109  5613
8110  5614
8111  5615
8112  5616
8113  5617
8114  5618
8115  5619
8116  561A
8117  561B
8118  561C
8119  561D
8120  561E
8121  561F
8122  5620
8123  5621
8124  5622
8125  5623
8126  5624
8127  5625
8128  5626
8129  5627
8130  5628
8131  5629
8132  562A
8133  562B
8134  562C
8135  562D
8136  562E
8137  562F
8138  5630
8139  5631
8140  5632
8141  5633
8142  5634
8143  5635
8144  5636
8145  5637
8146  5638
8147  5639
8148  563A
8149  563B
8150  563C
8151  563D
8152  563E
8153  563F
8154  5640
8155  5641
8156  5642
8157  5643
8158  5644
8159  5645
8160  5646
8161  5647
8162  5648
8163  5649
8164  564A
8165  564B
8166  564C
8167  564D
8168  564E
8169  564F
8170  5650
8171  5651
8172  5652
8173  5653
8174  5654
8175  5655
8176  5656
8177  5657
8178  5658
8179  5659
8180  565A
8181  565B
8182  565C
8183  565D
8184  565E
8185  565F
8186  5660
8187  5661
8188  5662
8189  5663
8190  5664
8191  5665
8192  5666
8193  5667
8194  5668
8195  5669
8196  566A
8197  566B
8198  566C
8199  566D
8200  566E
8201  566F
8202  5670
8203  5671
8204  5672
8205  5673
8206  5674
8207  5675
8208  5676
8209  5677
8210  5678
8211  5679
8212  567A
8213  567B
8214  567C
8215  567D
8216  567E
8217  567F
8218  5680
8219  5681
8220  5682
8221  5683
8222  5684
8223  5685
8224  5686
8225  5687
8226  5688
8227  5689
8228  568A
8229  568B
8230  568C
8231  568D
8232  568E
8233  568F
8234  5690
8235  5691
8236  5692
8237  5693
8238  5694
8239  5695
8240  5696
8241  5697
8242  5698
8243  5699
8244  569A
8245  569B
8246  569C
8247  569D
8248  569E
8249  569F
8250  56A0
8251  56A1
8252  56A2
8253  56A3
8254  56A4
8255  56A5
8256  56A6
8257  56A7
8258  56A8
8259  56A9
8260  56AA
8261  56AB
8262  56AC
8263  56AD
8264  56AE
8265  56AF
8266  56B0
8267  56B1
8268  56B2
8269  56B3
8270  56B4
8271  56B5
8272  56B6
8273  56B7
8274  56B8
8275  56B9
8276  56BA
8277  56BB
8278  56BC
8279  56BD
8280  56BE
8281  56BF
8282  56C0
8283  56C1
8284  56C2
8285  56C3
8286  56C4
8287  56C5
8288  56C6
8289  56C7
8290  56C8
8291  56C9
8292  56CA
8293  56CB
8294  56CC
8295  56CD
8296  56CE
8297  56CF
8298  56D0
8299  56D1
8300  56D2
8301  56D3
8302  56D4
8303  56D5
8304  56D6
8305  56D7
8306  56D8
8307  56D9
8308  56DA
8309  56DB
8310  56DC
8311  56DD
8312  56DE
8313  56DF
8314  56E0
8315  56E1
8316  56E2
8317  56E3
8318  56E4
8319  56E5
8320  56E6
8321  56E7
8322  56E8
8323  56E9
8324  56EA
8325  56EB
8326  56EC
8327  56ED
8328  56EE
8329  56EF
8330  56F0
8331  56F1
8332  56F2
8333  56F3
8334  56F4
8335  56F5
8336  56F6
8337  56F7
8338  56F8
8339  56F9
8340  56FA
8341  56FB
8342  56FC
8343  56FD
8344  56FE
8345  56FF
8346  5700
8347  5701
8348  5702
8349  5703
8350  5704
8351  5705
8352  5706
8353  5707
8354  5708
8355  5709
8356  570A
8357  570B
8358  570C
8359  570D
8360  570E
8361  570F
8362  5710
8363  5711
8364  5712
8365  5713
8366  5714
8367  5715
8368  5716
8369  5717
8370  5718
8371  5719
8372  571A
8373  571B
8374  571C
8375  571D
8376  571E
8377  571F
8378  5720
8379  5721
8380  5722
8381  5723
8382  5724
8383  5725
8384  5726
8385  5727
8386  5728
8387  5729
8388  572A
8389  572B
8390  572C
8391  572D
8392  572E
8393  572F
8394  5730
8395  5731
8396  5732
8397  5733
8398  5734
8399  5735
8400  5736
8401  5737
8402  5738
8403  5739
8404  573A
8405  573B
8406  573C
8407  573D
8408  573E
8409  573F
8410  5740
8411  5741
8412  5742
8413  5743
8414  5744
8415  5745
8416  5746
8417  5747
8418  5748
8419  5749
8420  574A
8421  574B
8422  574C
8423  574D
8424  574E
8425  574F
8426  5750
8427  5751
8428  5752
8429  5753
8430  5754
8431  5755
8432  5756
8433  5757
8434  5758
8435  5759
8436  575A
8437  575B
8438  575C
8439  575D
8440  575E
8441  575F
8442  5760
8443  5761
8444  5762
8445  5763
8446  5764
8447  5765
8448  5766
8449  5767
8450  5768
8451  5769
8452  576A
8453  576B
8454  576C
8455  576D
8456  576E
8457  576F
8458  5770
8459  5771
8460  5772
8461  5773
8462  5774
8463  5775
8464  5776
8465  5777
8466  5778
8467  5779
8468  577A
8469  577B
8470  577C
8471  577D
8472  577E
8473  577F
8474  5780
8475  5781
8476  5782
8477  5783
8478  5784
8479  5785
8480  5786
8481  5787
8482  5788
8483  5789
8484  578A
8485  578B
8486  578C
8487  578D
8488  578E
8489  578F
8490  5790
8491  5791
8492  5792
8493  5793
8494  5794
8495  5795
8496  5796
8497  5797
8498  5798
8499  5799
8500  579A
8501  579B
8502  579C
8503  579D
8504  579E
8505  579F
8506  57A0
8507  57A1
8508  57A2
8509  57A3
8510  57A4
8511  57A5
8512  57A6
8513  57A7
8514  57A8
8515  57A9
8516  57AA
8517  57AB
8518  57AC
8519  57AD
8520  57AE
8521  57AF
8522  57B0
8523  57B1
8524  57B2
8525  57B3
8526  57B4
8527  57B5
8528  57B6
8529  57B7
8530  57B8
8531  57B9
8532  57BA
8533  57BB
8534  57BC
8535  57BD
8536  57BE
8537  57BF
8538  57C0
8539  57C1
8540  57C2
8541  57C3
8542  57C4
8543  57C5
8544  57C6
8545  57C7
8546  57C8
8547  57C9
8548  57CA
8549  57CB
8550  57CC
8551  57CD
8552  57CE
8553  57CF
8554  57D0
8555  57D1
8556  57D2
8557  57D3
8558  57D4
8559  57D5
8560  57D6
8561  57D7
8562  57D8
8563  57D9
8564  57DA
8565  57DB
8566  57DC
8567  57DD
8568  57DE
8569  57DF
8570  57E0
8571  57E1
8572  57E2
8573  57E3
8574  57E4
8575  57E5
8576  57E6
8577  57E7
8578  57E8
8579  57E9
8580  57EA
8581  57EB
8582  57EC
8583  57ED
8584  57EE
8585  57EF
8586  57F0
8587  57F1
8588  57F2
8589  57F3
8590  57F4
8591  57F5
8592  57F6
8593  57F7
8594  57F8
8595  57F9
8596  57FA
8597  57FB
8598  57FC
8599  57FD
8600  57FE
8601  57FF
8602  5800
8603  5801
8604  5802
8605  5803
8606  5804
8607  5805
8608  5806
8609  5807
8610  5808
8611  5809
8612  580A
8613  580B
8614  580C
8615  580D
8616  580E
8617  580F
8618  5810
8619  5811
8620  5812
8621  5813
8622  5814
8623  5815
8624  5816
8625  5817
8626  5818
8627  5819
8628  581A
8629  581B
8630  581C
8631  581D
8632  581E
8633  581F
8634  5820
8635  5821
8636  5822
8637  5823
8638  5824
8639  5825
8640  5826
8641  5827
8642  5828
8643  5829
8644  582A
8645  582B
8646  582C
8647  582D
8648  582E
8649  582F
8650  5830
8651  5831
8652  5832
8653  5833
8654  5834
8655  5835
8656  5836
8657  5837
8658  5838
8659  5839
8660  583A
8661  583B
8662  583C
8663  583D
8664  583E
8665  583F
8666  5840
8667  5841
8668  5842
8669  5843
8670  5844
8671  5845
8672  5846
8673  5847
8674  5848
8675  5849
8676  584A
8677  584B
8678  584C
8679  584D
8680  584E
8681  584F
8682  5850
8683  5851
8684  5852
8685  5853
8686  5854
8687  5855
8688  5856
8689  5857
8690  5858
8691  5859
8692  585A
8693  585B
8694  585C
8695  585D
8696  585E
8697  585F
8698  5860
8699  5861
8700  5862
8701  5863
8702  5864
8703  5865
8704  5866
8705  5867
8706  5868
8707  5869
8708  586A
8709  586B
8710  586C
8711  586D
8712  586E
8713  586F
8714  5870
8715  5871
8716  5872
8717  5873
8718  5874
8719  5875
8720  5876
8721  5877
8722  5878
8723  5879
8724  587A
8725  587B
8726  587C
8727  587D
8728  587E
8729  587F
8730  5880
8731  5881
8732  5882
8733  5883
8734  5884
8735  5885
8736  5886
8737  5887
8738  5888
8739  5889
8740  588A
8741  588B
8742  588C
8743  588D
8744  588E
8745  588F
8746  5890
8747  5891
8748  5892
8749  5893
8750  5894
8751  5895
8752  5896
8753  5897
8754  5898
8755  5899
8756  589A
8757  589B
8758  589C
8759  589D
8760  589E
8761  589F
8762  58A0
8763  58A1
8764  58A2
8765  58A3
8766  58A4
8767  58A5
8768  58A6
8769  58A7
8770  58A8
8771  58A9
8772  58AA
8773  58AB
8774  58AC
8775  58AD
8776  58AE
8777  58AF
8778  58B0
8779  58B1
8780  58B2
8781  58B3
8782  58B4
8783  58B5
8784  58B6
8785  58B7
8786  58B8
8787  58B9
8788  58BA
8789  58BB
8790  58BC
8791  58BD
8792  58BE
8793  58BF
8794  58C0
8795  58C1
8796  58C2
8797  58C3
8798  58C4
8799  58C5
8800  58C6
8801  58C7
8802  58C8
8803  58C9
8804  58CA
8805  58CB
8806  58CC
8807  58CD
8808  58CE
8809  58CF
8810  58D0
8811  58D1
8812  58D2
8813  58D3
8814  58D4
8815  58D5
8816  58D6
8817  58D7
8818  58D8
8819  58D9
8820  58DA
8821  58DB
8822  58DC
8823  58DD
8824  58DE
8825  58DF
8826  58E0
8827  58E1
8828  58E2
8829  58E3
8830  58E4
8831  58E5
8832  58E6
8833  58E7
8834  58E8
8835  58E9
8836  58EA
8837  58EB
8838  58EC
8839  58ED
8840  58EE
8841  58EF
8842  58F0
8843  58F1
8844  58F2
8845  58F3
8846  58F4
8847  58F5
8848  58F6
8849  58F7
8850  58F8
8851  58F9
8852  58FA
8853  58FB
8854  58FC
8855  58FD
8856  58FE
8857  58FF
8858  5900
8859  5901
8860  5902
8861  5903
8862  5904
8863  5905
8864  5906
8865  5907
8866  5908
8867  5909
8868  590A
8869  590B
8870  590C
8871  590D
8872  590E
8873  590F
8874  5910
8875  5911
8876  5912
8877  5913
8878  5914
8879  5915
8880  5916
8881  5917
8882  5918
8883  5919
8884  591A
8885  591B
8886  591C
8887  591D
8888  591E
8889  591F
8890  5920
8891  5921
8892  5922
8893  5923
8894  5924
8895  5925
8896  5926
8897  5927
8898  5928
8899  5929
8900  592A
8901  592B
8902  592C
8903  592D
8904  592E
8905  592F
8906  5930
8907  5931
8908  5932
8909  5933
8910  5934
8911  5935
8912  5936
8913  5937
8914  5938
8915  5939
8916  593A
8917  593B
8918  593C
8919  593D
8920  593E
8921  593F
8922  5940
8923  5941
8924  5942
8925  5943
8926  5944
8927  5945
8928  5946
8929  5947
8930  5948
8931  5949
8932  594A
8933  594B
8934  594C
8935  594D
8936  594E
8937  594F
8938  5950
8939  5951
8940  5952
8941  5953
8942  5954
8943  5955
8944  5956
8945  5957
8946  5958
8947  5959
8948  595A
8949  595B
8950  595C
8951  595D
8952  595E
8953  595F
8954  5960
8955  5961
8956  5962
8957  5963
8958  5964
8959  5965
8960  5966
8961  5967
8962  5968
8963  5969
8964  596A
8965  596B
8966  596C
8967  596D
8968  596E
8969  596F
8970  5970
8971  5971
8972  5972
8973  5973
8974  5974
8975  5975
8976  5976
8977  5977
8978  5978
8979  5979
8980  597A
8981  597B
8982  597C
8983  597D
8984  597E
8985  597F
8986  5980
8987  5981
8988  5982
8989  5983
8990  5984
8991  5985
8992  5986
8993  5987
8994  5988
8995  5989
8996  598A
8997  598B
8998  598C
8999  598D
9000  598E
9001  598F
9002  5990
9003  5991
9004  5992
9005  5993
9006  5994
9007  5995
9008  5996
9009  5997
9010  5998
9011  5999
9012  599A
9013  599B
9014  599C
9015  599D
9016  599E
9017  599F
9018  59A0
9019  59A1
9020  59A2
9021  59A3
9022  59A4
9023  59A5
9024  59A6
9025  59A7
9026  59A8
9027  59A9
9028  59AA
9029  59AB
9030  59AC
9031  59AD
9032  59AE
9033  59AF
9034  59B0
9035  59B1
9036  59B2
9037  59B3
9038  59B4
9039  59B5
9040  59B6
9041  59B7
9042  59B8
9043  59B9
9044  59BA
9045  59BB
9046  59BC
9047  59BD
9048  59BE
9049  59BF
9050  59C0
9051  59C1
9052  59C2
9053  59C3
9054  59C4
9055  59C5
9056  59C6
9057  59C7
9058  59C8
9059  59C9
9060  59CA
9061  59CB
9062  59CC
9063  59CD
9064  59CE
9065  59CF
9066  59D0
9067  59D1
9068  59D2
9069  59D3
9070  59D4
9071  59D5
9072  59D6
9073  59D7
9074  59D8
9075  59D9
9076  59DA
9077  59DB
9078  59DC
9079  59DD
9080  59DE
9081  59DF
9082  59E0
9083  59E1
9084  59E2
9085  59E3
9086  59E4
9087  59E5
9088  59E6
9089  59E7
9090  59E8
9091  59E9
9092  59EA
9093  59EB
9094  59EC
9095  59ED
9096  59EE
9097  59EF
9098  59F0
9099  59F1
9100  59F2
9101  59F3
9102  59F4
9103  59F5
9104  59F6
9105  59F7
9106  59F8
9107  59F9
9108  59FA
9109  59FB
9110  59FC
9111  59FD
9112  59FE
9113  59FF
9114  5A00
9115  5A01
9116  5A02
9117  5A03
9118  5A04
9119  5A05
9120  5A06
9121  5A07
9122  5A08
9123  5A09
9124  5A0A
9125  5A0B
9126  5A0C
9127  5A0D
9128  5A0E
9129  5A0F
9130  5A10
9131  5A11
9132  5A12
9133  5A13
9134  5A14
9135  5A15
9136  5A16
9137  5A17
9138  5A18
9139  5A19
9140  5A1A
9141  5A1B
9142  5A1C
9143  5A1D
9144  5A1E
9145  5A1F
9146  5A20
9147  5A21
9148  5A22
9149  5A23
9150  5A24
9151  5A25
9152  5A26
9153  5A27
9154  5A28
9155  5A29
9156  5A2A
9157  5A2B
9158  5A2C
9159  5A2D
9160  5A2E
9161  5A2F
9162  5A30
9163  5A31
9164  5A32
9165  5A33
9166  5A34
9167  5A35
9168  5A36
9169  5A37
9170  5A38
9171  5A39
9172  5A3A
9173  5A3B
9174  5A3C
9175  5A3D
9176  5A3E
9177  5A3F
9178  5A40
9179  5A41
9180  5A42
9181  5A43
9182  5A44
9183  5A45
9184  5A46
9185  5A47
9186  5A48
9187  5A49
9188  5A4A
9189  5A4B
9190  5A4C
9191  5A4D
9192  5A4E
9193  5A4F
9194  5A50
9195  5A51
9196  5A52
9197  5A53
9198  5A54
9199  5A55
9200  5A56
9201  5A57
9202  5A58
9203  5A59
9204  5A5A
9205  5A5B
9206  5A5C
9207  5A5D
9208  5A5E
9209  5A5F
9210  5A60
9211  5A61
9212  5A62
9213  5A63
9214  5A64
9215  5A65
9216  5A66
9217  5A67
9218  5A68
9219  5A69
9220  5A6A
9221  5A6B
9222  5A6C
9223  5A6D
9224  5A6E
9225  5A6F
9226  5A70
9227  5A71
9228  5A72
9229  5A73
9230  5A74
9231  5A75
9232  5A76
9233  5A77
9234  5A78
9235  5A79
9236  5A7A
9237  5A7B
9238  5A7C
9239  5A7D
9240  5A7E
9241  5A7F
9242  5A80
9243  5A81
9244  5A82
9245  5A83
9246  5A84
9247  5A85
9248  5A86
9249  5A87
9250  5A88
9251  5A89
9252  5A8A
9253  5A8B
9254  5A8C
9255  5A8D
9256  5A8E
9257  5A8F
9258  5A90
9259  5A91
9260  5A92
9261  5A93
9262  5A94
9263  5A95
9264  5A96
9265  5A97
9266  5A98
9267  5A99
9268  5A9A
9269  5A9B
9270  5A9C
9271  5A9D
9272  5A9E
9273  5A9F
9274  5AA0
9275  5AA1
9276  5AA2
9277  5AA3
9278  5AA4
9279  5AA5
9280  5AA6
9281  5AA7
9282  5AA8
9283  5AA9
9284  5AAA
9285  5AAB
9286  5AAC
9287  5AAD
9288  5AAE
9289  5AAF
9290  5AB0
9291  5AB1
9292  5AB2
9293  5AB3
9294  5AB4
9295  5AB5
9296  5AB6
9297  5AB7
9298  5AB8
9299  5AB9
9300  5ABA
9301  5ABB
9302  5ABC
9303  5ABD
9304  5ABE
9305  5ABF
9306  5AC0
9307  5AC1
9308  5AC2
9309  5AC3
9310  5AC4
9311  5AC5
9312  5AC6
9313  5AC7
9314  5AC8
9315  5AC9
9316  5ACA
9317  5ACB
9318  5ACC
9319  5ACD
9320  5ACE
9321  5ACF
9322  5AD0
9323  5AD1
9324  5AD2
9325  5AD3
9326  5AD4
9327  5AD5
9328  5AD6
9329  5AD7
9330  5AD8
9331  5AD9
9332  5ADA
9333  5ADB
9334  5ADC
9335  5ADD
9336  5ADE
9337  5ADF
9338  5AE0
9339  5AE1
9340  5AE2
9341  5AE3
9342  5AE4
9343  5AE5
9344  5AE6
9345  5AE7
9346  5AE8
9347  5AE9
9348  5AEA
9349  5AEB
9350  5AEC
9351  5AED
9352  5AEE
9353  5AEF
9354  5AF0
9355  5AF1
9356  5AF2
9357  5AF3
9358  5AF4
9359  5AF5
9360  5AF6
9361  5AF7
9362  5AF8
9363  5AF9
9364  5AFA
9365  5AFB
9366  5AFC
9367  5AFD
9368  5AFE
9369  5AFF
9370  5B00
9371  5B01
9372  5B02
9373  5B03
9374  5B04
9375  5B05
9376  5B06
9377  5B07
9378  5B08
9379  5B09
9380  5B0A
9381  5B0B
9382  5B0C
9383  5B0D
9384  5B0E
9385  5B0F
9386  5B10
9387  5B11
9388  5B12
9389  5B13
9390  5B14
9391  5B15
9392  5B16
9393  5B17
9394  5B18
9395  5B19
9396  5B1A
9397  5B1B
9398  5B1C
9399  5B1D
9400  5B1E
9401  5B1F
9402  5B20
9403  5B21
9404  5B22
9405  5B23
9406  5B24
9407  5B25
9408  5B26
9409  5B27
9410  5B28
9411  5B29
9412  5B2A
9413  5B2B
9414  5B2C
9415  5B2D
9416  5B2E
9417  5B2F
9418  5B30
9419  5B31
9420  5B32
9421  5B33
9422  5B34
9423  5B35
9424  5B36
9425  5B37
9426  5B38
9427  5B39
9428  5B3A
9429  5B3B
9430  5B3C
9431  5B3D
9432  5B3E
9433  5B3F
9434  5B40
9435  5B41
9436  5B42
9437  5B43
9438  5B44
9439  5B45
9440  5B46
9441  5B47
9442  5B48
9443  5B49
9444  5B4A
9445  5B4B
9446  5B4C
9447  5B4D
9448  5B4E
9449  5B4F
9450  5B50
9451  5B51
9452  5B52
9453  5B53
9454  5B54
9455  5B55
9456  5B56
9457  5B57
9458  5B58
9459  5B59
9460  5B5A
9461  5B5B
9462  5B5C
9463  5B5D
9464  5B5E
9465  5B5F
9466  5B60
9467  5B61
9468  5B62
9469  5B63
9470  5B64
9471  5B65
9472  5B66
9473  5B67
9474  5B68
9475  5B69
9476  5B6A
9477  5B6B
9478  5B6C
9479  5B6D
9480  5B6E
9481  5B6F
9482  5B70
9483  5B71
9484  5B72
9485  5B73
9486  5B74
9487  5B75
9488  5B76
9489  5B77
9490  5B78
9491  5B79
9492  5B7A
9493  5B7B
9494  5B7C
9495  5B7D
9496  5B7E
9497  5B7F
9498  5B80
9499  5B81
9500  5B82
9501  5B83
9502  5B84
9503  5B85
9504  5B86
9505  5B87
9506  5B88
9507  5B89
9508  5B8A
9509  5B8B
9510  5B8C
9511  5B8D
9512  5B8E
9513  5B8F
9514  5B90
9515  5B91
9516  5B92
9517  5B93
9518  5B94
9519  5B95
9520  5B96
9521  5B97
9522  5B98
9523  5B99
9524  5B9A
9525  5B9B
9526  5B9C
9527  5B9D
9528  5B9E
9529  5B9F
9530  5BA0
9531  5BA1
9532  5BA2
9533  5BA3
9534  5BA4
9535  5BA5
9536  5BA6
9537  5BA7
9538  5BA8
9539  5BA9
9540  5BAA
9541  5BAB
9542  5BAC
9543  5BAD
9544  5BAE
9545  5BAF
9546  5BB0
9547  5BB1
9548  5BB2
9549  5BB3
9550  5BB4
9551  5BB5
9552  5BB6
9553  5BB7
9554  5BB8
9555  5BB9
9556  5BBA
9557  5BBB
9558  5BBC
9559  5BBD
9560  5BBE
9561  5BBF
9562  5BC0
9563  5BC1
9564  5BC2
9565  5BC3
9566  5BC4
9567  5BC5
9568  5BC6
9569  5BC7
9570  5BC8
9571  5BC9
9572  5BCA
9573  5BCB
9574  5BCC
9575  5BCD
9576  5BCE
9577  5BCF
9578  5BD0
9579  5BD1
9580  5BD2
9581  5BD3
9582  5BD4
9583  5BD5
9584  5BD6
9585  5BD7
9586  5BD8
9587  5BD9
9588  5BDA
9589  5BDB
9590  5BDC
9591  5BDD
9592  5BDE
9593  5BDF
9594  5BE0
9595  5BE1
9596  5BE2
9597  5BE3
9598  5BE4
9599  5BE5
9600  5BE6
9601  5BE7
9602  5BE8
9603  5BE9
9604  5BEA
9605  5BEB
9606  5BEC
9607  5BED
9608  5BEE
9609  5BEF
9610  5BF0
9611  5BF1
9612  5BF2
9613  5BF3
9614  5BF4
9615  5BF5
9616  5BF6
9617  5BF7
9618  5BF8
9619  5BF9
9620  5BFA
9621  5BFB
9622  5BFC
9623  5BFD
9624  5BFE
9625  5BFF
9626  5C00
9627  5C01
9628  5C02
9629  5C03
9630  5C04
9631  5C05
9632  5C06
9633  5C07
9634  5C08
9635  5C09
9636  5C0A
9637  5C0B
9638  5C0C
9639  5C0D
9640  5C0E
9641  5C0F
9642  5C10
9643  5C11
9644  5C12
9645  5C13
9646  5C14
9647  5C15
9648  5C16
9649  5C17
9650  5C18
9651  5C19
9652  5C1A
9653  5C1B
9654  5C1C
9655  5C1D
9656  5C1E
9657  5C1F
9658  5C20
9659  5C21
9660  5C22
9661  5C23
9662  5C24
9663  5C25
9664  5C26
9665  5C27
9666  5C28
9667  5C29
9668  5C2A
9669  5C2B
9670  5C2C
9671  5C2D
9672  5C2E
9673  5C2F
9674  5C30
9675  5C31
9676  5C32
9677  5C33
9678  5C34
9679  5C35
9680  5C36
9681  5C37
9682  5C38
9683  5C39
9684  5C3A
9685  5C3B
9686  5C3C
9687  5C3D
9688  5C3E
9689  5C3F
9690  5C40
9691  5C41
9692  5C42
9693  5C43
9694  5C44
9695  5C45
9696  5C46
9697  5C47
9698  5C48
9699  5C49
9700  5C4A
9701  5C4B
9702  5C4C
9703  5C4D
9704  5C4E
9705  5C4F
9706  5C50
9707  5C51
9708  5C52
9709  5C53
9710  5C54
9711  5C55
9712  5C56
9713  5C57
9714  5C58
9715  5C59
9716  5C5A
9717  5C5B
9718  5C5C
9719  5C5D
9720  5C5E
9721  5C5F
9722  5C60
9723  5C61
9724  5C62
9725  5C63
9726  5C64
9727  5C65
9728  5C66
9729  5C67
9730  5C68
9731  5C69
9732  5C6A
9733  5C6B
9734  5C6C
9735  5C6D
9736  5C6E
9737  5C6F
9738  5C70
9739  5C71
9740  5C72
9741  5C73
9742  5C74
9743  5C75
9744  5C76
9745  5C77
9746  5C78
9747  5C79
9748  5C7A
9749  5C7B
9750  5C7C
9751  5C7D
9752  5C7E
9753  5C7F
9754  5C80
9755  5C81
9756  5C82
9757  5C83
9758  5C84
9759  5C85
9760  5C86
9761  5C87
9762  5C88
9763  5C89
9764  5C8A
9765  5C8B
9766  5C8C
9767  5C8D
9768  5C8E
9769  5C8F
9770  5C90
9771  5C91
9772  5C92
9773  5C93
9774  5C94
9775  5C95
9776  5C96
9777  5C97
9778  5C98
9779  5C99
9780  5C9A
9781  5C9B
9782  5C9C
9783  5C9D
9784  5C9E
9785  5C9F
9786  5CA0
9787  5CA1
9788  5CA2
9789  5CA3
9790  5CA4
9791  5CA5
9792  5CA6
9793  5CA7
9794  5CA8
9795  5CA9
9796  5CAA
9797  5CAB
9798  5CAC
9799  5CAD
9800  5CAE
9801  5CAF
9802  5CB0
9803  5CB1
9804  5CB2
9805  5CB3
9806  5CB4
9807  5CB5
9808  5CB6
9809  5CB7
9810  5CB8
9811  5CB9
9812  5CBA
9813  5CBB
9814  5CBC
9815  5CBD
9816  5CBE
9817  5CBF
9818  5CC0
9819  5CC1
9820  5CC2
9821  5CC3
9822  5CC4
9823  5CC5
9824  5CC6
9825  5CC7
9826  5CC8
9827  5CC9
9828  5CCA
9829  5CCB
9830  5CCC
9831  5CCD
9832  5CCE
9833  5CCF
9834  5CD0
9835  5CD1
9836  5CD2
9837  5CD3
9838  5CD4
9839  5CD5
9840  5CD6
9841  5CD7
9842  5CD8
9843  5CD9
9844  5CDA
9845  5CDB
9846  5CDC
9847  5CDD
9848  5CDE
9849  5CDF
9850  5CE0
9851  5CE1
9852  5CE2
9853  5CE3
9854  5CE4
9855  5CE5
9856  5CE6
9857  5CE7
9858  5CE8
9859  5CE9
9860  5CEA
9861  5CEB
9862  5CEC
9863  5CED
9864  5CEE
9865  5CEF
9866  5CF0
9867  5CF1
9868  5CF2
9869  5CF3
9870  5CF4
9871  5CF5
9872  5CF6
9873  5CF7
9874  5CF8
9875  5CF9
9876  5CFA
9877  5CFB
9878  5CFC
9879  5CFD
9880  5CFE
9881  5CFF
9882  5D00
9883  5D01
9884  5D02
9885  5D03
9886  5D04
9887  5D05
9888  5D06
9889  5D07
9890  5D08
9891  5D09
9892  5D0A
9893  5D0B
9894  5D0C
9895  5D0D
9896  5D0E
9897  5D0F
9898  5D10
9899  5D11
9900  5D12
9901  5D13
9902  5D14
9903  5D15
9904  5D16
9905  5D17
9906  5D18
9907  5D19
9908  5D1A
9909  5D1B
9910  5D1C
9911  5D1D
9912  5D1E
9913  5D1F
9914  5D20
9915  5D21
9916  5D22
9917  5D23
9918  5D24
9919  5D25
9920  5D26
9921  5D27
9922  5D28
9923  5D29
9924  5D2A
9925  5D2B
9926  5D2C
9927  5D2D
9928  5D2E
9929  5D2F
9930  5D30
9931  5D31
9932  5D32
9933  5D33
9934  5D34
9935  5D35
9936  5D36
9937  5D37
9938  5D38
9939  5D39
9940  5D3A
9941  5D3B
9942  5D3C
9943  5D3D
9944  5D3E
9945  5D3F
9946  5D40
9947  5D41
9948  5D42
9949  5D43
9950  5D44
9951  5D45
9952  5D46
9953  5D47
9954  5D48
9955  5D49
9956  5D4A
9957  5D4B
9958  5D4C
9959  5D4D
9960  5D4E
9961  5D4F
9962  5D50
9963  5D51
9964  5D52
9965  5D53
9966  5D54
9967  5D55
9968  5D56
9969  5D57
9970  5D58
9971  5D59
9972  5D5A
9973  5D5B
9974  5D5C
9975  5D5D
9976  5D5E
9977  5D5F
9978  5D60
9979  5D61
9980  5D62
9981  5D63
9982  5D64
9983  5D65
9984  5D66
9985  5D67
9986  5D68
9987  5D69
9988  5D6A
9989  5D6B
9990  5D6C
9991  5D6D
9992  5D6E
9993  5D6F
9994  5D70
9995  5D71
9996  5D72
9997  5D73
9998  5D74
9999  5D75
10000  5D76
10001  5D77
10002  5D78
10003  5D79
10004  5D7A
10005  5D7B
10006  5D7C
10007  5D7D
10008  5D7E
10009  5D7F
10010  5D80
10011  5D81
10012  5D82
10013  5D83
10014  5D84
10015  5D85
10016  5D86
10017  5D87
10018  5D88
10019  5D89
10020  5D8A
10021  5D8B
10022  5D8C
10023  5D8D
10024  5D8E
10025  5D8F
10026  5D90
10027  5D91
10028  5D92
10029  5D93
10030  5D94
10031  5D95
10032  5D96
10033  5D97
10034  5D98
10035  5D99
10036  5D9A
10037  5D9B
10038  5D9C
10039  5D9D
10040  5D9E
10041  5D9F
10042  5DA0
10043  5DA1
10044  5DA2
10045  5DA3
10046  5DA4
10047  5DA5
10048  5DA6
10049  5DA7
10050  5DA8
10051  5DA9
10052  5DAA
10053  5DAB
10054  5DAC
10055  5DAD
10056  5DAE
10057  5DAF
10058  5DB0
10059  5DB1
10060  5DB2
10061  5DB3
10062  5DB4
10063  5DB5
10064  5DB6
10065  5DB7
10066  5DB8
10067  5DB9
10068  5DBA
10069  5DBB
10070  5DBC
10071  5DBD
10072  5DBE
10073  5DBF
10074  5DC0
10075  5DC1
10076  5DC2
10077  5DC3
10078  5DC4
10079  5DC5
10080  5DC6
10081  5DC7
10082  5DC8
10083  5DC9
10084  5DCA
10085  5DCB
10086  5DCC
10087  5DCD
10088  5DCE
10089  5DCF
10090  5DD0
10091  5DD1
10092  5DD2
10093  5DD3
10094  5DD4
10095  5DD5
10096  5DD6
10097  5DD7
10098  5DD8
10099  5DD9
10100  5DDA
10101  5DDB
10102  5DDC
10103  5DDD
10104  5DDE
10105  5DDF
10106  5DE0
10107  5DE1
10108  5DE2
10109  5DE3
10110  5DE4
10111  5DE5
10112  5DE6
10113  5DE7
10114  5DE8
10115  5DE9
10116  5DEA
10117  5DEB
10118  5DEC
10119  5DED
10120  5DEE
10121  5DEF
10122  5DF0
10123  5DF1
10124  5DF2
10125  5DF3
10126  5DF4
10127  5DF5
10128  5DF6
10129  5DF7
10130  5DF8
10131  5DF9
10132  5DFA
10133  5DFB
10134  5DFC
10135  5DFD
10136  5DFE
10137  5DFF
10138  5E00
10139  5E01
10140  5E02
10141  5E03
10142  5E04
10143  5E05
10144  5E06
10145  5E07
10146  5E08
10147  5E09
10148  5E0A
10149  5E0B
10150  5E0C
10151  5E0D
10152  5E0E
10153  5E0F
10154  5E10
10155  5E11
10156  5E12
10157  5E13
10158  5E14
10159  5E15
10160  5E16
10161  5E17
10162  5E18
10163  5E19
10164  5E1A
10165  5E1B
10166  5E1C
10167  5E1D
10168  5E1E
10169  5E1F
10170  5E20
10171  5E21
10172  5E22
10173  5E23
10174  5E24
10175  5E25
10176  5E26
10177  5E27
10178  5E28
10179  5E29
10180  5E2A
10181  5E2B
10182  5E2C
10183  5E2D
10184  5E2E
10185  5E2F
10186  5E30
10187  5E31
10188  5E32
10189  5E33
10190  5E34
10191  5E35
10192  5E36
10193  5E37
10194  5E38
10195  5E39
10196  5E3A
10197  5E3B
10198  5E3C
10199  5E3D
10200  5E3E
10201  5E3F
10202  5E40
10203  5E41
10204  5E42
10205  5E43
10206  5E44
10207  5E45
10208  5E46
10209  5E47
10210  5E48
10211  5E49
10212  5E4A
10213  5E4B
10214  5E4C
10215  5E4D
10216  5E4E
10217  5E4F
10218  5E50
10219  5E51
10220  5E52
10221  5E53
10222  5E54
10223  5E55
10224  5E56
10225  5E57
10226  5E58
10227  5E59
10228  5E5A
10229  5E5B
10230  5E5C
10231  5E5D
10232  5E5E
10233  5E5F
10234  5E60
10235  5E61
10236  5E62
10237  5E63
10238  5E64
10239  5E65
10240  5E66
10241  5E67
10242  5E68
10243  5E69
10244  5E6A
10245  5E6B
10246  5E6C
10247  5E6D
10248  5E6E
10249  5E6F
10250  5E70
10251  5E71
10252  5E72
10253  5E73
10254  5E74
10255  5E75
10256  5E76
10257  5E77
10258  5E78
10259  5E79
10260  5E7A
10261  5E7B
10262  5E7C
10263  5E7D
10264  5E7E
10265  5E7F
10266  5E80
10267  5E81
10268  5E82
10269  5E83
10270  5E84
10271  5E85
10272  5E86
10273  5E87
10274  5E88
10275  5E89
10276  5E8A
10277  5E8B
10278  5E8C
10279  5E8D
10280  5E8E
10281  5E8F
10282  5E90
10283  5E91
10284  5E92
10285  5E93
10286  5E94
10287  5E95
10288  5E96
10289  5E97
10290  5E98
10291  5E99
10292  5E9A
10293  5E9B
10294  5E9C
10295  5E9D
10296  5E9E
10297  5E9F
10298  5EA0
10299  5EA1
10300  5EA2
10301  5EA3
10302  5EA4
10303  5EA5
10304  5EA6
10305  5EA7
10306  5EA8
10307  5EA9
10308  5EAA
10309  5EAB
10310  5EAC
10311  5EAD
10312  5EAE
10313  5EAF
10314  5EB0
10315  5EB1
10316  5EB2
10317  5EB3
10318  5EB4
10319  5EB5
10320  5EB6
10321  5EB7
10322  5EB8
10323  5EB9
10324  5EBA
10325  5EBB
10326  5EBC
10327  5EBD
10328  5EBE
10329  5EBF
10330  5EC0
10331  5EC1
10332  5EC2
10333  5EC3
10334  5EC4
10335  5EC5
10336  5EC6
10337  5EC7
10338  5EC8
10339  5EC9
10340  5ECA
10341  5ECB
10342  5ECC
10343  5ECD
10344  5ECE
10345  5ECF
10346  5ED0
10347  5ED1
10348  5ED2
10349  5ED3
10350  5ED4
10351  5ED5
10352  5ED6
10353  5ED7
10354  5ED8
10355  5ED9
10356  5EDA
10357  5EDB
10358  5EDC
10359  5EDD
10360  5EDE
10361  5EDF
10362  5EE0
10363  5EE1
10364  5EE2
10365  5EE3
10366  5EE4
10367  5EE5
10368  5EE6
10369  5EE7
10370  5EE8
10371  5EE9
10372  5EEA
10373  5EEB
10374  5EEC
10375  5EED
10376  5EEE
10377  5EEF
10378  5EF0
10379  5EF1
10380  5EF2
10381  5EF3
10382  5EF4
10383  5EF5
10384  5EF6
10385  5EF7
10386  5EF8
10387  5EF9
10388  5EFA
10389  5EFB
10390  5EFC
10391  5EFD
10392  5EFE
10393  5EFF
10394  5F00
10395  5F01
10396  5F02
10397  5F03
10398  5F04
10399  5F05
10400  5F06
10401  5F07
10402  5F08
10403  5F09
10404  5F0A
10405  5F0B
10406  5F0C
10407  5F0D
10408  5F0E
10409  5F0F
10410  5F10
10411  5F11
10412  5F12
10413  5F13
10414  5F14
10415  5F15
10416  5F16
10417  5F17
10418  5F18
10419  5F19
10420  5F1A
10421  5F1B
10422  5F1C
10423  5F1D
10424  5F1E
10425  5F1F
10426  5F20
10427  5F21
10428  5F22
10429  5F23
10430  5F24
10431  5F25
10432  5F26
10433  5F27
10434  5F28
10435  5F29
10436  5F2A
10437  5F2B
10438  5F2C
10439  5F2D
10440  5F2E
10441  5F2F
10442  5F30
10443  5F31
10444  5F32
10445  5F33
10446  5F34
10447  5F35
10448  5F36
10449  5F37
10450  5F38
10451  5F39
10452  5F3A
10453  5F3B
10454  5F3C
10455  5F3D
10456  5F3E
10457  5F3F
10458  5F40
10459  5F41
10460  5F42
10461  5F43
10462  5F44
10463  5F45
10464  5F46
10465  5F47
10466  5F48
10467  5F49
10468  5F4A
10469  5F4B
10470  5F4C
10471  5F4D
10472  5F4E
10473  5F4F
10474  5F50
10475  5F51
10476  5F52
10477  5F53
10478  5F54
10479  5F55
10480  5F56
10481  5F57
10482  5F58
10483  5F59
10484  5F5A
10485  5F5B
10486  5F5C
10487  5F5D
10488  5F5E
10489  5F5F
10490  5F60
10491  5F61
10492  5F62
10493  5F63
10494  5F64
10495  5F65
10496  5F66
10497  5F67
10498  5F68
10499  5F69
10500  5F6A
10501  5F6B
10502  5F6C
10503  5F6D
10504  5F6E
10505  5F6F
10506  5F70
10507  5F71
10508  5F72
10509  5F73
10510  5F74
10511  5F75
10512  5F76
10513  5F77
10514  5F78
10515  5F79
10516  5F7A
10517  5F7B
10518  5F7C
10519  5F7D
10520  5F7E
10521  5F7F
10522  5F80
10523  5F81
10524  5F82
10525  5F83
10526  5F84
10527  5F85
10528  5F86
10529  5F87
10530  5F88
10531  5F89
10532  5F8A
10533  5F8B
10534  5F8C
10535  5F8D
10536  5F8E
10537  5F8F
10538  5F90
10539  5F91
10540  5F92
10541  5F93
10542  5F94
10543  5F95
10544  5F96
10545  5F97
10546  5F98
10547  5F99
10548  5F9A
10549  5F9B
10550  5F9C
10551  5F9D
10552  5F9E
10553  5F9F
10554  5FA0
10555  5FA1
10556  5FA2
10557  5FA3
10558  5FA4
10559  5FA5
10560  5FA6
10561  5FA7
10562  5FA8
10563  5FA9
10564  5FAA
10565  5FAB
10566  5FAC
10567  5FAD
10568  5FAE
10569  5FAF
10570  5FB0
10571  5FB1
10572  5FB2
10573  5FB3
10574  5FB4
10575  5FB5
10576  5FB6
10577  5FB7
10578  5FB8
10579  5FB9
10580  5FBA
10581  5FBB
10582  5FBC
10583  5FBD
10584  5FBE
10585  5FBF
10586  5FC0
10587  5FC1
10588  5FC2
10589  5FC3
10590  5FC4
10591  5FC5
10592  5FC6
10593  5FC7
10594  5FC8
10595  5FC9
10596  5FCA
10597  5FCB
10598  5FCC
10599  5FCD
10600  5FCE
10601  5FCF
10602  5FD0
10603  5FD1
10604  5FD2
10605  5FD3
10606  5FD4
10607  5FD5
10608  5FD6
10609  5FD7
10610  5FD8
10611  5FD9
10612  5FDA
10613  5FDB
10614  5FDC
10615  5FDD
10616  5FDE
10617  5FDF
10618  5FE0
10619  5FE1
10620  5FE2
10621  5FE3
10622  5FE4
10623  5FE5
10624  5FE6
10625  5FE7
10626  5FE8
10627  5FE9
10628  5FEA
10629  5FEB
10630  5FEC
10631  5FED
10632  5FEE
10633  5FEF
10634  5FF0
10635  5FF1
10636  5FF2
10637  5FF3
10638  5FF4
10639  5FF5
10640  5FF6
10641  5FF7
10642  5FF8
10643  5FF9
10644  5FFA
10645  5FFB
10646  5FFC
10647  5FFD
10648  5FFE
10649  5FFF
10650  6000
10651  6001
10652  6002
10653  6003
10654  6004
10655  6005
10656  6006
10657  6007
10658  6008
10659  6009
10660  600A
10661  600B
10662  600C
10663  600D
10664  600E
10665  600F
10666  6010
10667  6011
10668  6012
10669  6013
10670  6014
10671  6015
10672  6016
10673  6017
10674  6018
10675  6019
10676  601A
10677  601B
10678  601C
10679  601D
10680  601E
10681  601F
10682  6020
10683  6021
10684  6022
10685  6023
10686  6024
10687  6025
10688  6026
10689  6027
10690  6028
10691  6029
10692  602A
10693  602B
10694  602C
10695  602D
10696  602E
10697  602F
10698  6030
10699  6031
10700  6032
10701  6033
10702  6034
10703  6035
10704  6036
10705  6037
10706  6038
10707  6039
10708  603A
10709  603B
10710  603C
10711  603D
10712  603E
10713  603F
10714  6040
10715  6041
10716  6042
10717  6043
10718  6044
10719  6045
10720  6046
10721  6047
10722  6048
10723  6049
10724  604A
10725  604B
10726  604C
10727  604D
10728  604E
10729  604F
10730  6050
10731  6051
10732  6052
10733  6053
10734  6054
10735  6055
10736  6056
10737  6057
10738  6058
10739  6059
10740  605A
10741  605B
10742  605C
10743  605D
10744  605E
10745  605F
10746  6060
10747  6061
10748  6062
10749  6063
10750  6064
10751  6065
10752  6066
10753  6067
10754  6068
10755  6069
10756  606A
10757  606B
10758  606C
10759  606D
10760  606E
10761  606F
10762  6070
10763  6071
10764  6072
10765  6073
10766  6074
10767  6075
10768  6076
10769  6077
10770  6078
10771  6079
10772  607A
10773  607B
10774  607C
10775  607D
10776  607E
10777  607F
10778  6080
10779  6081
10780  6082
10781  6083
10782  6084
10783  6085
10784  6086
10785  6087
10786  6088
10787  6089
10788  608A
10789  608B
10790  608C
10791  608D
10792  608E
10793  608F
10794  6090
10795  6091
10796  6092
10797  6093
10798  6094
10799  6095
10800  6096
10801  6097
10802  6098
10803  6099
10804  609A
10805  609B
10806  609C
10807  609D
10808  609E
10809  609F
10810  60A0
10811  60A1
10812  60A2
10813  60A3
10814  60A4
10815  60A5
10816  60A6
10817  60A7
10818  60A8
10819  60A9
10820  60AA
10821  60AB
10822  60AC
10823  60AD
10824  60AE
10825  60AF
10826  60B0
10827  60B1
10828  60B2
10829  60B3
10830  60B4
10831  60B5
10832  60B6
10833  60B7
10834  60B8
10835  60B9
10836  60BA
10837  60BB
10838  60BC
10839  60BD
10840  60BE
10841  60BF
10842  60C0
10843  60C1
10844  60C2
10845  60C3
10846  60C4
10847  60C5
10848  60C6
10849  60C7
10850  60C8
10851  60C9
10852  60CA
10853  60CB
10854  60CC
10855  60CD
10856  60CE
10857  60CF
10858  60D0
10859  60D1
10860  60D2
10861  60D3
10862  60D4
10863  60D5
10864  60D6
10865  60D7
10866  60D8
10867  60D9
10868  60DA
10869  60DB
10870  60DC
10871  60DD
10872  60DE
10873  60DF
10874  60E0
10875  60E1
10876  60E2
10877  60E3
10878  60E4
10879  60E5
10880  60E6
10881  60E7
10882  60E8
10883  60E9
10884  60EA
10885  60EB
10886  60EC
10887  60ED
10888  60EE
10889  60EF
10890  60F0
10891  60F1
10892  60F2
10893  60F3
10894  60F4
10895  60F5
10896  60F6
10897  60F7
10898  60F8
10899  60F9
10900  60FA
10901  60FB
10902  60FC
10903  60FD
10904  60FE
10905  60FF
10906  6100
10907  6101
10908  6102
10909  6103
10910  6104
10911  6105
10912  6106
10913  6107
10914  6108
10915  6109
10916  610A
10917  610B
10918  610C
10919  610D
10920  610E
10921  610F
10922  6110
10923  6111
10924  6112
10925  6113
10926  6114
10927  6115
10928  6116
10929  6117
10930  6118
10931  6119
10932  611A
10933  611B
10934  611C
10935  611D
10936  611E
10937  611F
10938  6120
10939  6121
10940  6122
10941  6123
10942  6124
10943  6125
10944  6126
10945  6127
10946  6128
10947  6129
10948  612A
10949  612B
10950  612C
10951  612D
10952  612E
10953  612F
10954  6130
10955  6131
10956  6132
10957  6133
10958  6134
10959  6135
10960  6136
10961  6137
10962  6138
10963  6139
10964  613A
10965  613B
10966  613C
10967  613D
10968  613E
10969  613F
10970  6140
10971  6141
10972  6142
10973  6143
10974  6144
10975  6145
10976  6146
10977  6147
10978  6148
10979  6149
10980  614A
10981  614B
10982  614C
10983  614D
10984  614E
10985  614F
10986  6150
10987  6151
10988  6152
10989  6153
10990  6154
10991  6155
10992  6156
10993  6157
10994  6158
10995  6159
10996  615A
10997  615B
10998  615C
10999  615D
11000  615E
11001  615F
11002  6160
11003  6161
11004  6162
11005  6163
11006  6164
11007  6165
11008  6166
11009  6167
11010  6168
11011  6169
11012  616A
11013  616B
11014  616C
11015  616D
11016  616E
11017  616F
11018  6170
11019  6171
11020  6172
11021  6173
11022  6174
11023  6175
11024  6176
11025  6177
11026  6178
11027  6179
11028  617A
11029  617B
11030  617C
11031  617D
11032  617E
11033  617F
11034  6180
11035  6181
11036  6182
11037  6183
11038  6184
11039  6185
11040  6186
11041  6187
11042  6188
11043  6189
11044  618A
11045  618B
11046  618C
11047  618D
11048  618E
11049  618F
11050  6190
11051  6191
11052  6192
11053  6193
11054  6194
11055  6195
11056  6196
11057  6197
11058  6198
11059  6199
11060  619A
11061  619B
11062  619C
11063  619D
11064  619E
11065  619F
11066  61A0
11067  61A1
11068  61A2
11069  61A3
11070  61A4
11071  61A5
11072  61A6
11073  61A7
11074  61A8
11075  61A9
11076  61AA
11077  61AB
11078  61AC
11079  61AD
11080  61AE
11081  61AF
11082  61B0
11083  61B1
11084  61B2
11085  61B3
11086  61B4
11087  61B5
11088  61B6
11089  61B7
11090  61B8
11091  61B9
11092  61BA
11093  61BB
11094  61BC
11095  61BD
11096  61BE
11097  61BF
11098  61C0
11099  61C1
11100  61C2
11101  61C3
11102  61C4
11103  61C5
11104  61C6
11105  61C7
11106  61C8
11107  61C9
11108  61CA
11109  61CB
11110  61CC
11111  61CD
11112  61CE
11113  61CF
11114  61D0
11115  61D1
11116  61D2
11117  61D3
11118  61D4
11119  61D5
11120  61D6
11121  61D7
11122  61D8
11123  61D9
11124  61DA
11125  61DB
11126  61DC
11127  61DD
11128  61DE
11129  61DF
11130  61E0
11131  61E1
11132  61E2
11133  61E3
11134  61E4
11135  61E5
11136  61E6
11137  61E7
11138  61E8
11139  61E9
11140  61EA
11141  61EB
11142  61EC
11143  61ED
11144  61EE
11145  61EF
11146  61F0
11147  61F1
11148  61F2
11149  61F3
11150  61F4
11151  61F5
11152  61F6
11153  61F7
11154  61F8
11155  61F9
11156  61FA
11157  61FB
11158  61FC
11159  61FD
11160  61FE
11161  61FF
11162  6200
11163  6201
11164  6202
11165  6203
11166  6204
11167  6205
11168  6206
11169  6207
11170  6208
11171  6209
11172  620A
11173  620B
11174  620C
11175  620D
11176  620E
11177  620F
11178  6210
11179  6211
11180  6212
11181  6213
11182  6214
11183  6215
11184  6216
11185  6217
11186  6218
11187  6219
11188  621A
11189  621B
11190  621C
11191  621D
11192  621E
11193  621F
11194  6220
11195  6221
11196  6222
11197  6223
11198  6224
11199  6225
11200  6226
11201  6227
11202  6228
11203  6229
11204  622A
11205  622B
11206  622C
11207  622D
11208  622E
11209  622F
11210  6230
11211  6231
11212  6232
11213  6233
11214  6234
11215  6235
11216  6236
11217  6237
11218  6238
11219  6239
11220  623A
11221  623B
11222  623C
11223  623D
11224  623E
11225  623F
11226  6240
11227  6241
11228  6242
11229  6243
11230  6244
11231  6245
11232  6246
11233  6247
11234  6248
11235  6249
11236  624A
11237  624B
11238  624C
11239  624D
11240  624E
11241  624F
11242  6250
11243  6251
11244  6252
11245  6253
11246  6254
11247  6255
11248  6256
11249  6257
11250  6258
11251  6259
11252  625A
11253  625B
11254  625C
11255  625D
11256  625E
11257  625F
11258  6260
11259  6261
11260  6262
11261  6263
11262  6264
11263  6265
11264  6266
11265  6267
11266  6268
11267  6269
11268  626A
11269  626B
11270  626C
11271  626D
11272  626E
11273  626F
11274  6270
11275  6271
11276  6272
11277  6273
11278  6274
11279  6275
11280  6276
11281  6277
11282  6278
11283  6279
11284  627A
11285  627B
11286  627C
11287  627D
11288  627E
11289  627F
11290  6280
11291  6281
11292  6282
11293  6283
11294  6284
11295  6285
11296  6286
11297  6287
11298  6288
11299  6289
11300  628A
11301  628B
11302  628C
11303  628D
11304  628E
11305  628F
11306  6290
11307  6291
11308  6292
11309  6293
11310  6294
11311  6295
11312  6296
11313  6297
11314  6298
11315  6299
11316  629A
11317  629B
11318  629C
11319  629D
11320  629E
11321  629F
11322  62A0
11323  62A1
11324  62A2
11325  62A3
11326  62A4
11327  62A5
11328  62A6
11329  62A7
11330  62A8
11331  62A9
11332  62AA
11333  62AB
11334  62AC
11335  62AD
11336  62AE
11337  62AF
11338  62B0
11339  62B1
11340  62B2
11341  62B3
11342  62B4
11343  62B5
11344  62B6
11345  62B7
11346  62B8
11347  62B9
11348  62BA
11349  62BB
11350  62BC
11351  62BD
11352  62BE
11353  62BF
11354  62C0
11355  62C1
11356  62C2
11357  62C3
11358  62C4
11359  62C5
11360  62C6
11361  62C7
11362  62C8
11363  62C9
11364  62CA
11365  62CB
11366  62CC
11367  62CD
11368  62CE
11369  62CF
11370  62D0
11371  62D1
11372  62D2
11373  62D3
11374  62D4
11375  62D5
11376  62D6
11377  62D7
11378  62D8
11379  62D9
11380  62DA
11381  62DB
11382  62DC
11383  62DD
11384  62DE
11385  62DF
11386  62E0
11387  62E1
11388  62E2
11389  62E3
11390  62E4
11391  62E5
11392  62E6
11393  62E7
11394  62E8
11395  62E9
11396  62EA
11397  62EB
11398  62EC
11399  62ED
11400  62EE
11401  62EF
11402  62F0
11403  62F1
11404  62F2
11405  62F3
11406  62F4
11407  62F5
11408  62F6
11409  62F7
11410  62F8
11411  62F9
11412  62FA
11413  62FB
11414  62FC
11415  62FD
11416  62FE
11417  62FF
11418  6300
11419  6301
11420  6302
11421  6303
11422  6304
11423  6305
11424  6306
11425  6307
11426  6308
11427  6309
11428  630A
11429  630B
11430  630C
11431  630D
11432  630E
11433  630F
11434  6310
11435  6311
11436  6312
11437  6313
11438  6314
11439  6315
11440  6316
11441  6317
11442  6318
11443  6319
11444  631A
11445  631B
11446  631C
11447  631D
11448  631E
11449  631F
11450  6320
11451  6321
11452  6322
11453  6323
11454  6324
11455  6325
11456  6326
11457  6327
11458  6328
11459  6329
11460  632A
11461  632B
11462  632C
11463  632D
11464  632E
11465  632F
11466  6330
11467  6331
11468  6332
11469  6333
11470  6334
11471  6335
11472  6336
11473  6337
11474  6338
11475  6339
11476  633A
11477  633B
11478  633C
11479  633D
11480  633E
11481  633F
11482  6340
11483  6341
11484  6342
11485  6343
11486  6344
11487  6345
11488  6346
11489  6347
11490  6348
11491  6349
11492  634A
11493  634B
11494  634C
11495  634D
11496  634E
11497  634F
11498  6350
11499  6351
11500  6352
11501  6353
11502  6354
11503  6355
11504  6356
11505  6357
11506  6358
11507  6359
11508  635A
11509  635B
11510  635C
11511  635D
11512  635E
11513  635F
11514  6360
11515  6361
11516  6362
11517  6363
11518  6364
11519  6365
11520  6366
11521  6367
11522  6368
11523  6369
11524  636A
11525  636B
11526  636C
11527  636D
11528  636E
11529  636F
11530  6370
11531  6371
11532  6372
11533  6373
11534  6374
11535  6375
11536  6376
11537  6377
11538  6378
11539  6379
11540  637A
11541  637B
11542  637C
11543  637D
11544  637E
11545  637F
11546  6380
11547  6381
11548  6382
11549  6383
11550  6384
11551  6385
11552  6386
11553  6387
11554  6388
11555  6389
11556  638A
11557  638B
11558  638C
11559  638D
11560  638E
11561  638F
11562  6390
11563  6391
11564  6392
11565  6393
11566  6394
11567  6395
11568  6396
11569  6397
11570  6398
11571  6399
11572  639A
11573  639B
11574  639C
11575  639D
11576  639E
11577  639F
11578  63A0
11579  63A1
11580  63A2
11581  63A3
11582  63A4
11583  63A5
11584  63A6
11585  63A7
11586  63A8
11587  63A9
11588  63AA
11589  63AB
11590  63AC
11591  63AD
11592  63AE
11593  63AF
11594  63B0
11595  63B1
11596  63B2
11597  63B3
11598  63B4
11599  63B5
11600  63B6
11601  63B7
11602  63B8
11603  63B9
11604  63BA
11605  63BB
11606  63BC
11607  63BD
11608  63BE
11609  63BF
11610  63C0
11611  63C1
11612  63C2
11613  63C3
11614  63C4
11615  63C5
11616  63C6
11617  63C7
11618  63C8
11619  63C9
11620  63CA
11621  63CB
11622  63CC
11623  63CD
11624  63CE
11625  63CF
11626  63D0
11627  63D1
11628  63D2
11629  63D3
11630  63D4
11631  63D5
11632  63D6
11633  63D7
11634  63D8
11635  63D9
11636  63DA
11637  63DB
11638  63DC
11639  63DD
11640  63DE
11641  63DF
11642  63E0
11643  63E1
11644  63E2
11645  63E3
11646  63E4
11647  63E5
11648  63E6
11649  63E7
11650  63E8
11651  63E9
11652  63EA
11653  63EB
11654  63EC
11655  63ED
11656  63EE
11657  63EF
11658  63F0
11659  63F1
11660  63F2
11661  63F3
11662  63F4
11663  63F5
11664  63F6
11665  63F7
11666  63F8
11667  63F9
11668  63FA
11669  63FB
11670  63FC
11671  63FD
11672  63FE
11673  63FF
11674  6400
11675  6401
11676  6402
11677  6403
11678  6404
11679  6405
11680  6406
11681  6407
11682  6408
11683  6409
11684  640A
11685  640B
11686  640C
11687  640D
11688  640E
11689  640F
11690  6410
11691  6411
11692  6412
11693  6413
11694  6414
11695  6415
11696  6416
11697  6417
11698  6418
11699  6419
11700  641A
11701  641B
11702  641C
11703  641D
11704  641E
11705  641F
11706  6420
11707  6421
11708  6422
11709  6423
11710  6424
11711  6425
11712  6426
11713  6427
11714  6428
11715  6429
11716  642A
11717  642B
11718  642C
11719  642D
11720  642E
11721  642F
11722  6430
11723  6431
11724  6432
11725  6433
11726  6434
11727  6435
11728  6436
11729  6437
11730  6438
11731  6439
11732  643A
11733  643B
11734  643C
11735  643D
11736  643E
11737  643F
11738  6440
11739  6441
11740  6442
11741  6443
11742  6444
11743  6445
11744  6446
11745  6447
11746  6448
11747  6449
11748  644A
11749  644B
11750  644C
11751  644D
11752  644E
11753  644F
11754  6450
11755  6451
11756  6452
11757  6453
11758  6454
11759  6455
11760  6456
11761  6457
11762  6458
11763  6459
11764  645A
11765  645B
11766  645C
11767  645D
11768  645E
11769  645F
11770  6460
11771  6461
11772  6462
11773  6463
11774  6464
11775  6465
11776  6466
11777  6467
11778  6468
11779  6469
11780  646A
11781  646B
11782  646C
11783  646D
11784  646E
11785  646F
11786  6470
11787  6471
11788  6472
11789  6473
11790  6474
11791  6475
11792  6476
11793  6477
11794  6478
11795  6479
11796  647A
11797  647B
11798  647C
11799  647D
11800  647E
11801  647F
11802  6480
11803  6481
11804  6482
11805  6483
11806  6484
11807  6485
11808  6486
11809  6487
11810  6488
11811  6489
11812  648A
11813  648B
11814  648C
11815  648D
11816  648E
11817  648F
11818  6490
11819  6491
11820  6492
11821  6493
11822  6494
11823  6495
11824  6496
11825  6497
11826  6498
11827  6499
11828  649A
11829  649B
11830  649C
11831  649D
11832  649E
11833  649F
11834  64A0
11835  64A1
11836  64A2
11837  64A3
11838  64A4
11839  64A5
11840  64A6
11841  64A7
11842  64A8
11843  64A9
11844  64AA
11845  64AB
11846  64AC
11847  64AD
11848  64AE
11849  64AF
11850  64B0
11851  64B1
11852  64B2
11853  64B3
11854  64B4
11855  64B5
11856  64B6
11857  64B7
11858  64B8
11859  64B9
11860  64BA
11861  64BB
11862  64BC
11863  64BD
11864  64BE
11865  64BF
11866  64C0
11867  64C1
11868  64C2
11869  64C3
11870  64C4
11871  64C5
11872  64C6
11873  64C7
11874  64C8
11875  64C9
11876  64CA
11877  64CB
11878  64CC
11879  64CD
11880  64CE
11881  64CF
11882  64D0
11883  64D1
11884  64D2
11885  64D3
11886  64D4
11887  64D5
11888  64D6
11889  64D7
11890  64D8
11891  64D9
11892  64DA
11893  64DB
11894  64DC
11895  64DD
11896  64DE
11897  64DF
11898  64E0
11899  64E1
11900  64E2
11901  64E3
11902  64E4
11903  64E5
11904  64E6
11905  64E7
11906  64E8
11907  64E9
11908  64EA
11909  64EB
11910  64EC
11911  64ED
11912  64EE
11913  64EF
11914  64F0
11915  64F1
11916  64F2
11917  64F3
11918  64F4
11919  64F5
11920  64F6
11921  64F7
11922  64F8
11923  64F9
11924  64FA
11925  64FB
11926  64FC
11927  64FD
11928  64FE
11929  64FF
11930  6500
11931  6501
11932  6502
11933  6503
11934  6504
11935  6505
11936  6506
11937  6507
11938  6508
11939  6509
11940  650A
11941  650B
11942  650C
11943  650D
11944  650E
11945  650F
11946  6510
11947  6511
11948  6512
11949  6513
11950  6514
11951  6515
11952  6516
11953  6517
11954  6518
11955  6519
11956  651A
11957  651B
11958  651C
11959  651D
11960  651E
11961  651F
11962  6520
11963  6521
11964  6522
11965  6523
11966  6524
11967  6525
11968  6526
11969  6527
11970  6528
11971  6529
11972  652A
11973  652B
11974  652C
11975  652D
11976  652E
11977  652F
11978  6530
11979  6531
11980  6532
11981  6533
11982  6534
11983  6535
11984  6536
11985  6537
11986  6538
11987  6539
11988  653A
11989  653B
11990  653C
11991  653D
11992  653E
11993  653F
11994  6540
11995  6541
11996  6542
11997  6543
11998  6544
11999  6545
12000  6546
12001  6547
12002  6548
12003  6549
12004  654A
12005  654B
12006  654C
12007  654D
12008  654E
12009  654F
12010  6550
12011  6551
12012  6552
12013  6553
12014  6554
12015  6555
12016  6556
12017  6557
12018  6558
12019  6559
12020  655A
12021  655B
12022  655C
12023  655D
12024  655E
12025  655F
12026  6560
12027  6561
12028  6562
12029  6563
12030  6564
12031  6565
12032  6566
12033  6567
12034  6568
12035  6569
12036  656A
12037  656B
12038  656C
12039  656D
12040  656E
12041  656F
12042  6570
12043  6571
12044  6572
12045  6573
12046  6574
12047  6575
12048  6576
12049  6577
12050  6578
12051  6579
12052  657A
12053  657B
12054  657C
12055  657D
12056  657E
12057  657F
12058  6580
12059  6581
12060  6582
12061  6583
12062  6584
12063  6585
12064  6586
12065  6587
12066  6588
12067  6589
12068  658A
12069  658B
12070  658C
12071  658D
12072  658E
12073  658F
12074  6590
12075  6591
12076  6592
12077  6593
12078  6594
12079  6595
12080  6596
12081  6597
12082  6598
12083  6599
12084  659A
12085  659B
12086  659C
12087  659D
12088  659E
12089  659F
12090  65A0
12091  65A1
12092  65A2
12093  65A3
12094  65A4
12095  65A5
12096  65A6
12097  65A7
12098  65A8
12099  65A9
12100  65AA
12101  65AB
12102  65AC
12103  65AD
12104  65AE
12105  65AF
12106  65B0
12107  65B1
12108  65B2
12109  65B3
12110  65B4
12111  65B5
12112  65B6
12113  65B7
12114  65B8
12115  65B9
12116  65BA
12117  65BB
12118  65BC
12119  65BD
12120  65BE
12121  65BF
12122  65C0
12123  65C1
12124  65C2
12125  65C3
12126  65C4
12127  65C5
12128  65C6
12129  65C7
12130  65C8
12131  65C9
12132  65CA
12133  65CB
12134  65CC
12135  65CD
12136  65CE
12137  65CF
12138  65D0
12139  65D1
12140  65D2
12141  65D3
12142  65D4
12143  65D5
12144  65D6
12145  65D7
12146  65D8
12147  65D9
12148  65DA
12149  65DB
12150  65DC
12151  65DD
12152  65DE
12153  65DF
12154  65E0
12155  65E1
12156  65E2
12157  65E3
12158  65E4
12159  65E5
12160  65E6
12161  65E7
12162  65E8
12163  65E9
12164  65EA
12165  65EB
12166  65EC
12167  65ED
12168  65EE
12169  65EF
12170  65F0
12171  65F1
12172  65F2
12173  65F3
12174  65F4
12175  65F5
12176  65F6
12177  65F7
12178  65F8
12179  65F9
12180  65FA
12181  65FB
12182  65FC
12183  65FD
12184  65FE
12185  65FF
12186  6600
12187  6601
12188  6602
12189  6603
12190  6604
12191  6605
12192  6606
12193  6607
12194  6608
12195  6609
12196  660A
12197  660B
12198  660C
12199  660D
12200  660E
12201  660F
12202  6610
12203  6611
12204  6612
12205  6613
12206  6614
12207  6615
12208  6616
12209  6617
12210  6618
12211  6619
12212  661A
12213  661B
12214  661C
12215  661D
12216  661E
12217  661F
12218  6620
12219  6621
12220  6622
12221  6623
12222  6624
12223  6625
12224  6626
12225  6627
12226  6628
12227  6629
12228  662A
12229  662B
12230  662C
12231  662D
12232  662E
12233  662F
12234  6630
12235  6631
12236  6632
12237  6633
12238  6634
12239  6635
12240  6636
12241  6637
12242  6638
12243  6639
12244  663A
12245  663B
12246  663C
12247  663D
12248  663E
12249  663F
12250  6640
12251  6641
12252  6642
12253  6643
12254  6644
12255  6645
12256  6646
12257  6647
12258  6648
12259  6649
12260  664A
12261  664B
12262  664C
12263  664D
12264  664E
12265  664F
12266  6650
12267  6651
12268  6652
12269  6653
12270  6654
12271  6655
12272  6656
12273  6657
12274  6658
12275  6659
12276  665A
12277  665B
12278  665C
12279  665D
12280  665E
12281  665F
12282  6660
12283  6661
12284  6662
12285  6663
12286  6664
12287  6665
12288  6666
12289  6667
12290  6668
12291  6669
12292  666A
12293  666B
12294  666C
12295  666D
12296  666E
12297  666F
12298  6670
12299  6671
12300  6672
12301  6673
12302  6674
12303  6675
12304  6676
12305  6677
12306  6678
12307  6679
12308  667A
12309  667B
12310  667C
12311  667D
12312  667E
12313  667F
12314  6680
12315  6681
12316  6682
12317  6683
12318  6684
12319  6685
12320  6686
12321  6687
12322  6688
12323  6689
12324  668A
12325  668B
12326  668C
12327  668D
12328  668E
12329  668F
12330  6690
12331  6691
12332  6692
12333  6693
12334  6694
12335  6695
12336  6696
12337  6697
12338  6698
12339  6699
12340  669A
12341  669B
12342  669C
12343  669D
12344  669E
12345  669F
12346  66A0
12347  66A1
12348  66A2
12349  66A3
12350  66A4
12351  66A5
12352  66A6
12353  66A7
12354  66A8
12355  66A9
12356  66AA
12357  66AB
12358  66AC
12359  66AD
12360  66AE
12361  66AF
12362  66B0
12363  66B1
12364  66B2
12365  66B3
12366  66B4
12367  66B5
12368  66B6
12369  66B7
12370  66B8
12371  66B9
12372  66BA
12373  66BB
12374  66BC
12375  66BD
12376  66BE
12377  66BF
12378  66C0
12379  66C1
12380  66C2
12381  66C3
12382  66C4
12383  66C5
12384  66C6
12385  66C7
12386  66C8
12387  66C9
12388  66CA
12389  66CB
12390  66CC
12391  66CD
12392  66CE
12393  66CF
12394  66D0
12395  66D1
12396  66D2
12397  66D3
12398  66D4
12399  66D5
12400  66D6
12401  66D7
12402  66D8
12403  66D9
12404  66DA
12405  66DB
12406  66DC
12407  66DD
12408  66DE
12409  66DF
12410  66E0
12411  66E1
12412  66E2
12413  66E3
12414  66E4
12415  66E5
12416  66E6
12417  66E7
12418  66E8
12419  66E9
12420  66EA
12421  66EB
12422  66EC
12423  66ED
12424  66EE
12425  66EF
12426  66F0
12427  66F1
12428  66F2
12429  66F3
12430  66F4
12431  66F5
12432  66F6
12433  66F7
12434  66F8
12435  66F9
12436  66FA
12437  66FB
12438  66FC
12439  66FD
12440  66FE
12441  66FF
12442  6700
12443  6701
12444  6702
12445  6703
12446  6704
12447  6705
12448  6706
12449  6707
12450  6708
12451  6709
12452  670A
12453  670B
12454  670C
12455  670D
12456  670E
12457  670F
12458  6710
12459  6711
12460  6712
12461  6713
12462  6714
12463  6715
12464  6716
12465  6717
12466  6718
12467  6719
12468  671A
12469  671B
12470  671C
12471  671D
12472  671E
12473  671F
12474  6720
12475  6721
12476  6722
12477  6723
12478  6724
12479  6725
12480  6726
12481  6727
12482  6728
12483  6729
12484  672A
12485  672B
12486  672C
12487  672D
12488  672E
12489  672F
12490  6730
12491  6731
12492  6732
12493  6733
12494  6734
12495  6735
12496  6736
12497  6737
12498  6738
12499  6739
12500  673A
12501  673B
12502  673C
12503  673D
12504  673E
12505  673F
12506  6740
12507  6741
12508  6742
12509  6743
12510  6744
12511  6745
12512  6746
12513  6747
12514  6748
12515  6749
12516  674A
12517  674B
12518  674C
12519  674D
12520  674E
12521  674F
12522  6750
12523  6751
12524  6752
12525  6753
12526  6754
12527  6755
12528  6756
12529  6757
12530  6758
12531  6759
12532  675A
12533  675B
12534  675C
12535  675D
12536  675E
12537  675F
12538  6760
12539  6761
12540  6762
12541  6763
12542  6764
12543  6765
12544  6766
12545  6767
12546  6768
12547  6769
12548  676A
12549  676B
12550  676C
12551  676D
12552  676E
12553  676F
12554  6770
12555  6771
12556  6772
12557  6773
12558  6774
12559  6775
12560  6776
12561  6777
12562  6778
12563  6779
12564  677A
12565  677B
12566  677C
12567  677D
12568  677E
12569  677F
12570  6780
12571  6781
12572  6782
12573  6783
12574  6784
12575  6785
12576  6786
12577  6787
12578  6788
12579  6789
12580  678A
12581  678B
12582  678C
12583  678D
12584  678E
12585  678F
12586  6790
12587  6791
12588  6792
12589  6793
12590  6794
12591  6795
12592  6796
12593  6797
12594  6798
12595  6799
12596  679A
12597  679B
12598  679C
12599  679D
12600  679E
12601  679F
12602  67A0
12603  67A1
12604  67A2
12605  67A3
12606  67A4
12607  67A5
12608  67A6
12609  67A7
12610  67A8
12611  67A9
12612  67AA
12613  67AB
12614  67AC
12615  67AD
12616  67AE
12617  67AF
12618  67B0
12619  67B1
12620  67B2
12621  67B3
12622  67B4
12623  67B5
12624  67B6
12625  67B7
12626  67B8
12627  67B9
12628  67BA
12629  67BB
12630  67BC
12631  67BD
12632  67BE
12633  67BF
12634  67C0
12635  67C1
12636  67C2
12637  67C3
12638  67C4
12639  67C5
12640  67C6
12641  67C7
12642  67C8
12643  67C9
12644  67CA
12645  67CB
12646  67CC
12647  67CD
12648  67CE
12649  67CF
12650  67D0
12651  67D1
12652  67D2
12653  67D3
12654  67D4
12655  67D5
12656  67D6
12657  67D7
12658  67D8
12659  67D9
12660  67DA
12661  67DB
12662  67DC
12663  67DD
12664  67DE
12665  67DF
12666  67E0
12667  67E1
12668  67E2
12669  67E3
12670  67E4
12671  67E5
12672  67E6
12673  67E7
12674  67E8
12675  67E9
12676  67EA
12677  67EB
12678  67EC
12679  67ED
12680  67EE
12681  67EF
12682  67F0
12683  67F1
12684  67F2
12685  67F3
12686  67F4
12687  67F5
12688  67F6
12689  67F7
12690  67F8
12691  67F9
12692  67FA
12693  67FB
12694  67FC
12695  67FD
12696  67FE
12697  67FF
12698  6800
12699  6801
12700  6802
12701  6803
12702  6804
12703  6805
12704  6806
12705  6807
12706  6808
12707  6809
12708  680A
12709  680B
12710  680C
12711  680D
12712  680E
12713  680F
12714  6810
12715  6811
12716  6812
12717  6813
12718  6814
12719  6815
12720  6816
12721  6817
12722  6818
12723  6819
12724  681A
12725  681B
12726  681C
12727  681D
12728  681E
12729  681F
12730  6820
12731  6821
12732  6822
12733  6823
12734  6824
12735  6825
12736  6826
12737  6827
12738  6828
12739  6829
12740  682A
12741  682B
12742  682C
12743  682D
12744  682E
12745  682F
12746  6830
12747  6831
12748  6832
12749  6833
12750  6834
12751  6835
12752  6836
12753  6837
12754  6838
12755  6839
12756  683A
12757  683B
12758  683C
12759  683D
12760  683E
12761  683F
12762  6840
12763  6841
12764  6842
12765  6843
12766  6844
12767  6845
12768  6846
12769  6847
12770  6848
12771  6849
12772  684A
12773  684B
12774  684C
12775  684D
12776  684E
12777  684F
12778  6850
12779  6851
12780  6852
12781  6853
12782  6854
12783  6855
12784  6856
12785  6857
12786  6858
12787  6859
12788  685A
12789  685B
12790  685C
12791  685D
12792  685E
12793  685F
12794  6860
12795  6861
12796  6862
12797  6863
12798  6864
12799  6865
12800  6866
12801  6867
12802  6868
12803  6869
12804  686A
12805  686B
12806  686C
12807  686D
12808  686E
12809  686F
12810  6870
12811  6871
12812  6872
12813  6873
12814  6874
12815  6875
12816  6876
12817  6877
12818  6878
12819  6879
12820  687A
12821  687B
12822  687C
12823  687D
12824  687E
12825  687F
12826  6880
12827  6881
12828  6882
12829  6883
12830  6884
12831  6885
12832  6886
12833  6887
12834  6888
12835  6889
12836  688A
12837  688B
12838  688C
12839  688D
12840  688E
12841  688F
12842  6890
12843  6891
12844  6892
12845  6893
12846  6894
12847  6895
12848  6896
12849  6897
12850  6898
12851  6899
12852  689A
12853  689B
12854  689C
12855  689D
12856  689E
12857  689F
12858  68A0
12859  68A1
12860  68A2
12861  68A3
12862  68A4
12863  68A5
12864  68A6
12865  68A7
12866  68A8
12867  68A9
12868  68AA
12869  68AB
12870  68AC
12871  68AD
12872  68AE
12873  68AF
12874  68B0
12875  68B1
12876  68B2
12877  68B3
12878  68B4
12879  68B5
12880  68B6
12881  68B7
12882  68B8
12883  68B9
12884  68BA
12885  68BB
12886  68BC
12887  68BD
12888  68BE
12889  68BF
12890  68C0
12891  68C1
12892  68C2
12893  68C3
12894  68C4
12895  68C5
12896  68C6
12897  68C7
12898  68C8
12899  68C9
12900  68CA
12901  68CB
12902  68CC
12903  68CD
12904  68CE
12905  68CF
12906  68D0
12907  68D1
12908  68D2
12909  68D3
12910  68D4
12911  68D5
12912  68D6
12913  68D7
12914  68D8
12915  68D9
12916  68DA
12917  68DB
12918  68DC
12919  68DD
12920  68DE
12921  68DF
12922  68E0
12923  68E1
12924  68E2
12925  68E3
12926  68E4
12927  68E5
12928  68E6
12929  68E7
12930  68E8
12931  68E9
12932  68EA
12933  68EB
12934  68EC
12935  68ED
12936  68EE
12937  68EF
12938  68F0
12939  68F1
12940  68F2
12941  68F3
12942  68F4
12943  68F5
12944  68F6
12945  68F7
12946  68F8
12947  68F9
12948  68FA
12949  68FB
12950  68FC
12951  68FD
12952  68FE
12953  68FF
12954  6900
12955  6901
12956  6902
12957  6903
12958  6904
12959  6905
12960  6906
12961  6907
12962  6908
12963  6909
12964  690A
12965  690B
12966  690C
12967  690D
12968  690E
12969  690F
12970  6910
12971  6911
12972  6912
12973  6913
12974  6914
12975  6915
12976  6916
12977  6917
12978  6918
12979  6919
12980  691A
12981  691B
12982  691C
12983  691D
12984  691E
12985  691F
12986  6920
12987  6921
12988  6922
12989  6923
12990  6924
12991  6925
12992  6926
12993  6927
12994  6928
12995  6929
12996  692A
12997  692B
12998  692C
12999  692D
13000  692E
13001  692F
13002  6930
13003  6931
13004  6932
13005  6933
13006  6934
13007  6935
13008  6936
13009  6937
13010  6938
13011  6939
13012  693A
13013  693B
13014  693C
13015  693D
13016  693E
13017  693F
13018  6940
13019  6941
13020  6942
13021  6943
13022  6944
13023  6945
13024  6946
13025  6947
13026  6948
13027  6949
13028  694A
13029  694B
13030  694C
13031  694D
13032  694E
13033  694F
13034  6950
13035  6951
13036  6952
13037  6953
13038  6954
13039  6955
13040  6956
13041  6957
13042  6958
13043  6959
13044  695A
13045  695B
13046  695C
13047  695D
13048  695E
13049  695F
13050  6960
13051  6961
13052  6962
13053  6963
13054  6964
13055  6965
13056  6966
13057  6967
13058  6968
13059  6969
13060  696A
13061  696B
13062  696C
13063  696D
13064  696E
13065  696F
13066  6970
13067  6971
13068  6972
13069  6973
13070  6974
13071  6975
13072  6976
13073  6977
13074  6978
13075  6979
13076  697A
13077  697B
13078  697C
13079  697D
13080  697E
13081  697F
13082  6980
13083  6981
13084  6982
13085  6983
13086  6984
13087  6985
13088  6986
13089  6987
13090  6988
13091  6989
13092  698A
13093  698B
13094  698C
13095  698D
13096  698E
13097  698F
13098  6990
13099  6991
13100  6992
13101  6993
13102  6994
13103  6995
13104  6996
13105  6997
13106  6998
13107  6999
13108  699A
13109  699B
13110  699C
13111  699D
13112  699E
13113  699F
13114  69A0
13115  69A1
13116  69A2
13117  69A3
13118  69A4
13119  69A5
13120  69A6
13121  69A7
13122  69A8
13123  69A9
13124  69AA
13125  69AB
13126  69AC
13127  69AD
13128  69AE
13129  69AF
13130  69B0
13131  69B1
13132  69B2
13133  69B3
13134  69B4
13135  69B5
13136  69B6
13137  69B7
13138  69B8
13139  69B9
13140  69BA
13141  69BB
13142  69BC
13143  69BD
13144  69BE
13145  69BF
13146  69C0
13147  69C1
13148  69C2
13149  69C3
13150  69C4
13151  69C5
13152  69C6
13153  69C7
13154  69C8
13155  69C9
13156  69CA
13157  69CB
13158  69CC
13159  69CD
13160  69CE
13161  69CF
13162  69D0
13163  69D1
13164  69D2
13165  69D3
13166  69D4
13167  69D5
13168  69D6
13169  69D7
13170  69D8
13171  69D9
13172  69DA
13173  69DB
13174  69DC
13175  69DD
13176  69DE
13177  69DF
13178  69E0
13179  69E1
13180  69E2
13181  69E3
13182  69E4
13183  69E5
13184  69E6
13185  69E7
13186  69E8
13187  69E9
13188  69EA
13189  69EB
13190  69EC
13191  69ED
13192  69EE
13193  69EF
13194  69F0
13195  69F1
13196  69F2
13197  69F3
13198  69F4
13199  69F5
13200  69F6
13201  69F7
13202  69F8
13203  69F9
13204  69FA
13205  69FB
13206  69FC
13207  69FD
13208  69FE
13209  69FF
13210  6A00
13211  6A01
13212  6A02
13213  6A03
13214  6A04
13215  6A05
13216  6A06
13217  6A07
13218  6A08
13219  6A09
13220  6A0A
13221  6A0B
13222  6A0C
13223  6A0D
13224  6A0E
13225  6A0F
13226  6A10
13227  6A11
13228  6A12
13229  6A13
13230  6A14
13231  6A15
13232  6A16
13233  6A17
13234  6A18
13235  6A19
13236  6A1A
13237  6A1B
13238  6A1C
13239  6A1D
13240  6A1E
13241  6A1F
13242  6A20
13243  6A21
13244  6A22
13245  6A23
13246  6A24
13247  6A25
13248  6A26
13249  6A27
13250  6A28
13251  6A29
13252  6A2A
13253  6A2B
13254  6A2C
13255  6A2D
13256  6A2E
13257  6A2F
13258  6A30
13259  6A31
13260  6A32
13261  6A33
13262  6A34
13263  6A35
13264  6A36
13265  6A37
13266  6A38
13267  6A39
13268  6A3A
13269  6A3B
13270  6A3C
13271  6A3D
13272  6A3E
13273  6A3F
13274  6A40
13275  6A41
13276  6A42
13277  6A43
13278  6A44
13279  6A45
13280  6A46
13281  6A47
13282  6A48
13283  6A49
13284  6A4A
13285  6A4B
13286  6A4C
13287  6A4D
13288  6A4E
13289  6A4F
13290  6A50
13291  6A51
13292  6A52
13293  6A53
13294  6A54
13295  6A55
13296  6A56
13297  6A57
13298  6A58
13299  6A59
13300  6A5A
13301  6A5B
13302  6A5C
13303  6A5D
13304  6A5E
13305  6A5F
13306  6A60
13307  6A61
13308  6A62
13309  6A63
13310  6A64
13311  6A65
13312  6A66
13313  6A67
13314  6A68
13315  6A69
13316  6A6A
13317  6A6B
13318  6A6C
13319  6A6D
13320  6A6E
13321  6A6F
13322  6A70
13323  6A71
13324  6A72
13325  6A73
13326  6A74
13327  6A75
13328  6A76
13329  6A77
13330  6A78
13331  6A79
13332  6A7A
13333  6A7B
13334  6A7C
13335  6A7D
13336  6A7E
13337  6A7F
13338  6A80
13339  6A81
13340  6A82
13341  6A83
13342  6A84
13343  6A85
13344  6A86
13345  6A87
13346  6A88
13347  6A89
13348  6A8A
13349  6A8B
13350  6A8C
13351  6A8D
13352  6A8E
13353  6A8F
13354  6A90
13355  6A91
13356  6A92
13357  6A93
13358  6A94
13359  6A95
13360  6A96
13361  6A97
13362  6A98
13363  6A99
13364  6A9A
13365  6A9B
13366  6A9C
13367  6A9D
13368  6A9E
13369  6A9F
13370  6AA0
13371  6AA1
13372  6AA2
13373  6AA3
13374  6AA4
13375  6AA5
13376  6AA6
13377  6AA7
13378  6AA8
13379  6AA9
13380  6AAA
13381  6AAB
13382  6AAC
13383  6AAD
13384  6AAE
13385  6AAF
13386  6AB0
13387  6AB1
13388  6AB2
13389  6AB3
13390  6AB4
13391  6AB5
13392  6AB6
13393  6AB7
13394  6AB8
13395  6AB9
13396  6ABA
13397  6ABB
13398  6ABC
13399  6ABD
13400  6ABE
13401  6ABF
13402  6AC0
13403  6AC1
13404  6AC2
13405  6AC3
13406  6AC4
13407  6AC5
13408  6AC6
13409  6AC7
13410  6AC8
13411  6AC9
13412  6ACA
13413  6ACB
13414  6ACC
13415  6ACD
13416  6ACE
13417  6ACF
13418  6AD0
13419  6AD1
13420  6AD2
13421  6AD3
13422  6AD4
13423  6AD5
13424  6AD6
13425  6AD7
13426  6AD8
13427  6AD9
13428  6ADA
13429  6ADB
13430  6ADC
13431  6ADD
13432  6ADE
13433  6ADF
13434  6AE0
13435  6AE1
13436  6AE2
13437  6AE3
13438  6AE4
13439  6AE5
13440  6AE6
13441  6AE7
13442  6AE8
13443  6AE9
13444  6AEA
13445  6AEB
13446  6AEC
13447  6AED
13448  6AEE
13449  6AEF
13450  6AF0
13451  6AF1
13452  6AF2
13453  6AF3
13454  6AF4
13455  6AF5
13456  6AF6
13457  6AF7
13458  6AF8
13459  6AF9
13460  6AFA
13461  6AFB
13462  6AFC
13463  6AFD
13464  6AFE
13465  6AFF
13466  6B00
13467  6B01
13468  6B02
13469  6B03
13470  6B04
13471  6B05
13472  6B06
13473  6B07
13474  6B08
13475  6B09
13476  6B0A
13477  6B0B
13478  6B0C
13479  6B0D
13480  6B0E
13481  6B0F
13482  6B10
13483  6B11
13484  6B12
13485  6B13
13486  6B14
13487  6B15
13488  6B16
13489  6B17
13490  6B18
13491  6B19
13492  6B1A
13493  6B1B
13494  6B1C
13495  6B1D
13496  6B1E
13497  6B1F
13498  6B20
13499  6B21
13500  6B22
13501  6B23
13502  6B24
13503  6B25
13504  6B26
13505  6B27
13506  6B28
13507  6B29
13508  6B2A
13509  6B2B
13510  6B2C
13511  6B2D
13512  6B2E
13513  6B2F
13514  6B30
13515  6B31
13516  6B32
13517  6B33
13518  6B34
13519  6B35
13520  6B36
13521  6B37
13522  6B38
13523  6B39
13524  6B3A
13525  6B3B
13526  6B3C
13527  6B3D
13528  6B3E
13529  6B3F
13530  6B40
13531  6B41
13532  6B42
13533  6B43
13534  6B44
13535  6B45
13536  6B46
13537  6B47
13538  6B48
13539  6B49
13540  6B4A
13541  6B4B
13542  6B4C
13543  6B4D
13544  6B4E
13545  6B4F
13546  6B50
13547  6B51
13548  6B52
13549  6B53
13550  6B54
13551  6B55
13552  6B56
13553  6B57
13554  6B58
13555  6B59
13556  6B5A
13557  6B5B
13558  6B5C
13559  6B5D
13560  6B5E
13561  6B5F
13562  6B60
13563  6B61
13564  6B62
13565  6B63
13566  6B64
13567  6B65
13568  6B66
13569  6B67
13570  6B68
13571  6B69
13572  6B6A
13573  6B6B
13574  6B6C
13575  6B6D
13576  6B6E
13577  6B6F
13578  6B70
13579  6B71
13580  6B72
13581  6B73
13582  6B74
13583  6B75
13584  6B76
13585  6B77
13586  6B78
13587  6B79
13588  6B7A
13589  6B7B
13590  6B7C
13591  6B7D
13592  6B7E
13593  6B7F
13594  6B80
13595  6B81
13596  6B82
13597  6B83
13598  6B84
13599  6B85
13600  6B86
13601  6B87
13602  6B88
13603  6B89
13604  6B8A
13605  6B8B
13606  6B8C
13607  6B8D
13608  6B8E
13609  6B8F
13610  6B90
13611  6B91
13612  6B92
13613  6B93
13614  6B94
13615  6B95
13616  6B96
13617  6B97
13618  6B98
13619  6B99
13620  6B9A
13621  6B9B
13622  6B9C
13623  6B9D
13624  6B9E
13625  6B9F
13626  6BA0
13627  6BA1
13628  6BA2
13629  6BA3
13630  6BA4
13631  6BA5
13632  6BA6
13633  6BA7
13634  6BA8
13635  6BA9
13636  6BAA
13637  6BAB
13638  6BAC
13639  6BAD
13640  6BAE
13641  6BAF
13642  6BB0
13643  6BB1
13644  6BB2
13645  6BB3
13646  6BB4
13647  6BB5
13648  6BB6
13649  6BB7
13650  6BB8
13651  6BB9
13652  6BBA
13653  6BBB
13654  6BBC
13655  6BBD
13656  6BBE
13657  6BBF
13658  6BC0
13659  6BC1
13660  6BC2
13661  6BC3
13662  6BC4
13663  6BC5
13664  6BC6
13665  6BC7
13666  6BC8
13667  6BC9
13668  6BCA
13669  6BCB
13670  6BCC
13671  6BCD
13672  6BCE
13673  6BCF
13674  6BD0
13675  6BD1
13676  6BD2
13677  6BD3
13678  6BD4
13679  6BD5
13680  6BD6
13681  6BD7
13682  6BD8
13683  6BD9
13684  6BDA
13685  6BDB
13686  6BDC
13687  6BDD
13688  6BDE
13689  6BDF
13690  6BE0
13691  6BE1
13692  6BE2
13693  6BE3
13694  6BE4
13695  6BE5
13696  6BE6
13697  6BE7
13698  6BE8
13699  6BE9
13700  6BEA
13701  6BEB
13702  6BEC
13703  6BED
13704  6BEE
13705  6BEF
13706  6BF0
13707  6BF1
13708  6BF2
13709  6BF3
13710  6BF4
13711  6BF5
13712  6BF6
13713  6BF7
13714  6BF8
13715  6BF9
13716  6BFA
13717  6BFB
13718  6BFC
13719  6BFD
13720  6BFE
13721  6BFF
13722  6C00
13723  6C01
13724  6C02
13725  6C03
13726  6C04
13727  6C05
13728  6C06
13729  6C07
13730  6C08
13731  6C09
13732  6C0A
13733  6C0B
13734  6C0C
13735  6C0D
13736  6C0E
13737  6C0F
13738  6C10
13739  6C11
13740  6C12
13741  6C13
13742  6C14
13743  6C15
13744  6C16
13745  6C17
13746  6C18
13747  6C19
13748  6C1A
13749  6C1B
13750  6C1C
13751  6C1D
13752  6C1E
13753  6C1F
13754  6C20
13755  6C21
13756  6C22
13757  6C23
13758  6C24
13759  6C25
13760  6C26
13761  6C27
13762  6C28
13763  6C29
13764  6C2A
13765  6C2B
13766  6C2C
13767  6C2D
13768  6C2E
13769  6C2F
13770  6C30
13771  6C31
13772  6C32
13773  6C33
13774  6C34
13775  6C35
13776  6C36
13777  6C37
13778  6C38
13779  6C39
13780  6C3A
13781  6C3B
13782  6C3C
13783  6C3D
13784  6C3E
13785  6C3F
13786  6C40
13787  6C41
13788  6C42
13789  6C43
13790  6C44
13791  6C45
13792  6C46
13793  6C47
13794  6C48
13795  6C49
13796  6C4A
13797  6C4B
13798  6C4C
13799  6C4D
13800  6C4E
13801  6C4F
13802  6C50
13803  6C51
13804  6C52
13805  6C53
13806  6C54
13807  6C55
13808  6C56
13809  6C57
13810  6C58
13811  6C59
13812  6C5A
13813  6C5B
13814  6C5C
13815  6C5D
13816  6C5E
13817  6C5F
13818  6C60
13819  6C61
13820  6C62
13821  6C63
13822  6C64
13823  6C65
13824  6C66
13825  6C67
13826  6C68
13827  6C69
13828  6C6A
13829  6C6B
13830  6C6C
13831  6C6D
13832  6C6E
13833  6C6F
13834  6C70
13835  6C71
13836  6C72
13837  6C73
13838  6C74
13839  6C75
13840  6C76
13841  6C77
13842  6C78
13843  6C79
13844  6C7A
13845  6C7B
13846  6C7C
13847  6C7D
13848  6C7E
13849  6C7F
13850  6C80
13851  6C81
13852  6C82
13853  6C83
13854  6C84
13855  6C85
13856  6C86
13857  6C87
13858  6C88
13859  6C89
13860  6C8A
13861  6C8B
13862  6C8C
13863  6C8D
13864  6C8E
13865  6C8F
13866  6C90
13867  6C91
13868  6C92
13869  6C93
13870  6C94
13871  6C95
13872  6C96
13873  6C97
13874  6C98
13875  6C99
13876  6C9A
13877  6C9B
13878  6C9C
13879  6C9D
13880  6C9E
13881  6C9F
13882  6CA0
13883  6CA1
13884  6CA2
13885  6CA3
13886  6CA4
13887  6CA5
13888  6CA6
13889  6CA7
13890  6CA8
13891  6CA9
13892  6CAA
13893  6CAB
13894  6CAC
13895  6CAD
13896  6CAE
13897  6CAF
13898  6CB0
13899  6CB1
13900  6CB2
13901  6CB3
13902  6CB4
13903  6CB5
13904  6CB6
13905  6CB7
13906  6CB8
13907  6CB9
13908  6CBA
13909  6CBB
13910  6CBC
13911  6CBD
13912  6CBE
13913  6CBF
13914  6CC0
13915  6CC1
13916  6CC2
13917  6CC3
13918  6CC4
13919  6CC5
13920  6CC6
13921  6CC7
13922  6CC8
13923  6CC9
13924  6CCA
13925  6CCB
13926  6CCC
13927  6CCD
13928  6CCE
13929  6CCF
13930  6CD0
13931  6CD1
13932  6CD2
13933  6CD3
13934  6CD4
13935  6CD5
13936  6CD6
13937  6CD7
13938  6CD8
13939  6CD9
13940  6CDA
13941  6CDB
13942  6CDC
13943  6CDD
13944  6CDE
13945  6CDF
13946  6CE0
13947  6CE1
13948  6CE2
13949  6CE3
13950  6CE4
13951  6CE5
13952  6CE6
13953  6CE7
13954  6CE8
13955  6CE9
13956  6CEA
13957  6CEB
13958  6CEC
13959  6CED
13960  6CEE
13961  6CEF
13962  6CF0
13963  6CF1
13964  6CF2
13965  6CF3
13966  6CF4
13967  6CF5
13968  6CF6
13969  6CF7
13970  6CF8
13971  6CF9
13972  6CFA
13973  6CFB
13974  6CFC
13975  6CFD
13976  6CFE
13977  6CFF
13978  6D00
13979  6D01
13980  6D02
13981  6D03
13982  6D04
13983  6D05
13984  6D06
13985  6D07
13986  6D08
13987  6D09
13988  6D0A
13989  6D0B
13990  6D0C
13991  6D0D
13992  6D0E
13993  6D0F
13994  6D10
13995  6D11
13996  6D12
13997  6D13
13998  6D14
13999  6D15
14000  6D16
14001  6D17
14002  6D18
14003  6D19
14004  6D1A
14005  6D1B
14006  6D1C
14007  6D1D
14008  6D1E
14009  6D1F
14010  6D20
14011  6D21
14012  6D22
14013  6D23
14014  6D24
14015  6D25
14016  6D26
14017  6D27
14018  6D28
14019  6D29
14020  6D2A
14021  6D2B
14022  6D2C
14023  6D2D
14024  6D2E
14025  6D2F
14026  6D30
14027  6D31
14028  6D32
14029  6D33
14030  6D34
14031  6D35
14032  6D36
14033  6D37
14034  6D38
14035  6D39
14036  6D3A
14037  6D3B
14038  6D3C
14039  6D3D
14040  6D3E
14041  6D3F
14042  6D40
14043  6D41
14044  6D42
14045  6D43
14046  6D44
14047  6D45
14048  6D46
14049  6D47
14050  6D48
14051  6D49
14052  6D4A
14053  6D4B
14054  6D4C
14055  6D4D
14056  6D4E
14057  6D4F
14058  6D50
14059  6D51
14060  6D52
14061  6D53
14062  6D54
14063  6D55
14064  6D56
14065  6D57
14066  6D58
14067  6D59
14068  6D5A
14069  6D5B
14070  6D5C
14071  6D5D
14072  6D5E
14073  6D5F
14074  6D60
14075  6D61
14076  6D62
14077  6D63
14078  6D64
14079  6D65
14080  6D66
14081  6D67
14082  6D68
14083  6D69
14084  6D6A
14085  6D6B
14086  6D6C
14087  6D6D
14088  6D6E
14089  6D6F
14090  6D70
14091  6D71
14092  6D72
14093  6D73
14094  6D74
14095  6D75
14096  6D76
14097  6D77
14098  6D78
14099  6D79
14100  6D7A
14101  6D7B
14102  6D7C
14103  6D7D
14104  6D7E
14105  6D7F
14106  6D80
14107  6D81
14108  6D82
14109  6D83
14110  6D84
14111  6D85
14112  6D86
14113  6D87
14114  6D88
14115  6D89
14116  6D8A
14117  6D8B
14118  6D8C
14119  6D8D
14120  6D8E
14121  6D8F
14122  6D90
14123  6D91
14124  6D92
14125  6D93
14126  6D94
14127  6D95
14128  6D96
14129  6D97
14130  6D98
14131  6D99
14132  6D9A
14133  6D9B
14134  6D9C
14135  6D9D
14136  6D9E
14137  6D9F
14138  6DA0
14139  6DA1
14140  6DA2
14141  6DA3
14142  6DA4
14143  6DA5
14144  6DA6
14145  6DA7
14146  6DA8
14147  6DA9
14148  6DAA
14149  6DAB
14150  6DAC
14151  6DAD
14152  6DAE
14153  6DAF
14154  6DB0
14155  6DB1
14156  6DB2
14157  6DB3
14158  6DB4
14159  6DB5
14160  6DB6
14161  6DB7
14162  6DB8
14163  6DB9
14164  6DBA
14165  6DBB
14166  6DBC
14167  6DBD
14168  6DBE
14169  6DBF
14170  6DC0
14171  6DC1
14172  6DC2
14173  6DC3
14174  6DC4
14175  6DC5
14176  6DC6
14177  6DC7
14178  6DC8
14179  6DC9
14180  6DCA
14181  6DCB
14182  6DCC
14183  6DCD
14184  6DCE
14185  6DCF
14186  6DD0
14187  6DD1
14188  6DD2
14189  6DD3
14190  6DD4
14191  6DD5
14192  6DD6
14193  6DD7
14194  6DD8
14195  6DD9
14196  6DDA
14197  6DDB
14198  6DDC
14199  6DDD
14200  6DDE
14201  6DDF
14202  6DE0
14203  6DE1
14204  6DE2
14205  6DE3
14206  6DE4
14207  6DE5
14208  6DE6
14209  6DE7
14210  6DE8
14211  6DE9
14212  6DEA
14213  6DEB
14214  6DEC
14215  6DED
14216  6DEE
14217  6DEF
14218  6DF0
14219  6DF1
14220  6DF2
14221  6DF3
14222  6DF4
14223  6DF5
14224  6DF6
14225  6DF7
14226  6DF8
14227  6DF9
14228  6DFA
14229  6DFB
14230  6DFC
14231  6DFD
14232  6DFE
14233  6DFF
14234  6E00
14235  6E01
14236  6E02
14237  6E03
14238  6E04
14239  6E05
14240  6E06
14241  6E07
14242  6E08
14243  6E09
14244  6E0A
14245  6E0B
14246  6E0C
14247  6E0D
14248  6E0E
14249  6E0F
14250  6E10
14251  6E11
14252  6E12
14253  6E13
14254  6E14
14255  6E15
14256  6E16
14257  6E17
14258  6E18
14259  6E19
14260  6E1A
14261  6E1B
14262  6E1C
14263  6E1D
14264  6E1E
14265  6E1F
14266  6E20
14267  6E21
14268  6E22
14269  6E23
14270  6E24
14271  6E25
14272  6E26
14273  6E27
14274  6E28
14275  6E29
14276  6E2A
14277  6E2B
14278  6E2C
14279  6E2D
14280  6E2E
14281  6E2F
14282  6E30
14283  6E31
14284  6E32
14285  6E33
14286  6E34
14287  6E35
14288  6E36
14289  6E37
14290  6E38
14291  6E39
14292  6E3A
14293  6E3B
14294  6E3C
14295  6E3D
14296  6E3E
14297  6E3F
14298  6E40
14299  6E41
14300  6E42
14301  6E43
14302  6E44
14303  6E45
14304  6E46
14305  6E47
14306  6E48
14307  6E49
14308  6E4A
14309  6E4B
14310  6E4C
14311  6E4D
14312  6E4E
14313  6E4F
14314  6E50
14315  6E51
14316  6E52
14317  6E53
14318  6E54
14319  6E55
14320  6E56
14321  6E57
14322  6E58
14323  6E59
14324  6E5A
14325  6E5B
14326  6E5C
14327  6E5D
14328  6E5E
14329  6E5F
14330  6E60
14331  6E61
14332  6E62
14333  6E63
14334  6E64
14335  6E65
14336  6E66
14337  6E67
14338  6E68
14339  6E69
14340  6E6A
14341  6E6B
14342  6E6C
14343  6E6D
14344  6E6E
14345  6E6F
14346  6E70
14347  6E71
14348  6E72
14349  6E73
14350  6E74
14351  6E75
14352  6E76
14353  6E77
14354  6E78
14355  6E79
14356  6E7A
14357  6E7B
14358  6E7C
14359  6E7D
14360  6E7E
14361  6E7F
14362  6E80
14363  6E81
14364  6E82
14365  6E83
14366  6E84
14367  6E85
14368  6E86
14369  6E87
14370  6E88
14371  6E89
14372  6E8A
14373  6E8B
14374  6E8C
14375  6E8D
14376  6E8E
14377  6E8F
14378  6E90
14379  6E91
14380  6E92
14381  6E93
14382  6E94
14383  6E95
14384  6E96
14385  6E97
14386  6E98
14387  6E99
14388  6E9A
14389  6E9B
14390  6E9C
14391  6E9D
14392  6E9E
14393  6E9F
14394  6EA0
14395  6EA1
14396  6EA2
14397  6EA3
14398  6EA4
14399  6EA5
14400  6EA6
14401  6EA7
14402  6EA8
14403  6EA9
14404  6EAA
14405  6EAB
14406  6EAC
14407  6EAD
14408  6EAE
14409  6EAF
14410  6EB0
14411  6EB1
14412  6EB2
14413  6EB3
14414  6EB4
14415  6EB5
14416  6EB6
14417  6EB7
14418  6EB8
14419  6EB9
14420  6EBA
14421  6EBB
14422  6EBC
14423  6EBD
14424  6EBE
14425  6EBF
14426  6EC0
14427  6EC1
14428  6EC2
14429  6EC3
14430  6EC4
14431  6EC5
14432  6EC6
14433  6EC7
14434  6EC8
14435  6EC9
14436  6ECA
14437  6ECB
14438  6ECC
14439  6ECD
14440  6ECE
14441  6ECF
14442  6ED0
14443  6ED1
14444  6ED2
14445  6ED3
14446  6ED4
14447  6ED5
14448  6ED6
14449  6ED7
14450  6ED8
14451  6ED9
14452  6EDA
14453  6EDB
14454  6EDC
14455  6EDD
14456  6EDE
14457  6EDF
14458  6EE0
14459  6EE1
14460  6EE2
14461  6EE3
14462  6EE4
14463  6EE5
14464  6EE6
14465  6EE7
14466  6EE8
14467  6EE9
14468  6EEA
14469  6EEB
14470  6EEC
14471  6EED
14472  6EEE
14473  6EEF
14474  6EF0
14475  6EF1
14476  6EF2
14477  6EF3
14478  6EF4
14479  6EF5
14480  6EF6
14481  6EF7
14482  6EF8
14483  6EF9
14484  6EFA
14485  6EFB
14486  6EFC
14487  6EFD
14488  6EFE
14489  6EFF
14490  6F00
14491  6F01
14492  6F02
14493  6F03
14494  6F04
14495  6F05
14496  6F06
14497  6F07
14498  6F08
14499  6F09
14500  6F0A
14501  6F0B
14502  6F0C
14503  6F0D
14504  6F0E
14505  6F0F
14506  6F10
14507  6F11
14508  6F12
14509  6F13
14510  6F14
14511  6F15
14512  6F16
14513  6F17
14514  6F18
14515  6F19
14516  6F1A
14517  6F1B
14518  6F1C
14519  6F1D
14520  6F1E
14521  6F1F
14522  6F20
14523  6F21
14524  6F22
14525  6F23
14526  6F24
14527  6F25
14528  6F26
14529  6F27
14530  6F28
14531  6F29
14532  6F2A
14533  6F2B
14534  6F2C
14535  6F2D
14536  6F2E
14537  6F2F
14538  6F30
14539  6F31
14540  6F32
14541  6F33
14542  6F34
14543  6F35
14544  6F36
14545  6F37
14546  6F38
14547  6F39
14548  6F3A
14549  6F3B
14550  6F3C
14551  6F3D
14552  6F3E
14553  6F3F
14554  6F40
14555  6F41
14556  6F42
14557  6F43
14558  6F44
14559  6F45
14560  6F46
14561  6F47
14562  6F48
14563  6F49
14564  6F4A
14565  6F4B
14566  6F4C
14567  6F4D
14568  6F4E
14569  6F4F
14570  6F50
14571  6F51
14572  6F52
14573  6F53
14574  6F54
14575  6F55
14576  6F56
14577  6F57
14578  6F58
14579  6F59
14580  6F5A
14581  6F5B
14582  6F5C
14583  6F5D
14584  6F5E
14585  6F5F
14586  6F60
14587  6F61
14588  6F62
14589  6F63
14590  6F64
14591  6F65
14592  6F66
14593  6F67
14594  6F68
14595  6F69
14596  6F6A
14597  6F6B
14598  6F6C
14599  6F6D
14600  6F6E
14601  6F6F
14602  6F70
14603  6F71
14604  6F72
14605  6F73
14606  6F74
14607  6F75
14608  6F76
14609  6F77
14610  6F78
14611  6F79
14612  6F7A
14613  6F7B
14614  6F7C
14615  6F7D
14616  6F7E
14617  6F7F
14618  6F80
14619  6F81
14620  6F82
14621  6F83
14622  6F84
14623  6F85
14624  6F86
14625  6F87
14626  6F88
14627  6F89
14628  6F8A
14629  6F8B
14630  6F8C
14631  6F8D
14632  6F8E
14633  6F8F
14634  6F90
14635  6F91
14636  6F92
14637  6F93
14638  6F94
14639  6F95
14640  6F96
14641  6F97
14642  6F98
14643  6F99
14644  6F9A
14645  6F9B
14646  6F9C
14647  6F9D
14648  6F9E
14649  6F9F
14650  6FA0
14651  6FA1
14652  6FA2
14653  6FA3
14654  6FA4
14655  6FA5
14656  6FA6
14657  6FA7
14658  6FA8
14659  6FA9
14660  6FAA
14661  6FAB
14662  6FAC
14663  6FAD
14664  6FAE
14665  6FAF
14666  6FB0
14667  6FB1
14668  6FB2
14669  6FB3
14670  6FB4
14671  6FB5
14672  6FB6
14673  6FB7
14674  6FB8
14675  6FB9
14676  6FBA
14677  6FBB
14678  6FBC
14679  6FBD
14680  6FBE
14681  6FBF
14682  6FC0
14683  6FC1
14684  6FC2
14685  6FC3
14686  6FC4
14687  6FC5
14688  6FC6
14689  6FC7
14690  6FC8
14691  6FC9
14692  6FCA
14693  6FCB
14694  6FCC
14695  6FCD
14696  6FCE
14697  6FCF
14698  6FD0
14699  6FD1
14700  6FD2
14701  6FD3
14702  6FD4
14703  6FD5
14704  6FD6
14705  6FD7
14706  6FD8
14707  6FD9
14708  6FDA
14709  6FDB
14710  6FDC
14711  6FDD
14712  6FDE
14713  6FDF
14714  6FE0
14715  6FE1
14716  6FE2
14717  6FE3
14718  6FE4
14719  6FE5
14720  6FE6
14721  6FE7
14722  6FE8
14723  6FE9
14724  6FEA
14725  6FEB
14726  6FEC
14727  6FED
14728  6FEE
14729  6FEF
14730  6FF0
14731  6FF1
14732  6FF2
14733  6FF3
14734  6FF4
14735  6FF5
14736  6FF6
14737  6FF7
14738  6FF8
14739  6FF9
14740  6FFA
14741  6FFB
14742  6FFC
14743  6FFD
14744  6FFE
14745  6FFF
14746  7000
14747  7001
14748  7002
14749  7003
14750  7004
14751  7005
14752  7006
14753  7007
14754  7008
14755  7009
14756  700A
14757  700B
14758  700C
14759  700D
14760  700E
14761  700F
14762  7010
14763  7011
14764  7012
14765  7013
14766  7014
14767  7015
14768  7016
14769  7017
14770  7018
14771  7019
14772  701A
14773  701B
14774  701C
14775  701D
14776  701E
14777  701F
14778  7020
14779  7021
14780  7022
14781  7023
14782  7024
14783  7025
14784  7026
14785  7027
14786  7028
14787  7029
14788  702A
14789  702B
14790  702C
14791  702D
14792  702E
14793  702F
14794  7030
14795  7031
14796  7032
14797  7033
14798  7034
14799  7035
14800  7036
14801  7037
14802  7038
14803  7039
14804  703A
14805  703B
14806  703C
14807  703D
14808  703E
14809  703F
14810  7040
14811  7041
14812  7042
14813  7043
14814  7044
14815  7045
14816  7046
14817  7047
14818  7048
14819  7049
14820  704A
14821  704B
14822  704C
14823  704D
14824  704E
14825  704F
14826  7050
14827  7051
14828  7052
14829  7053
14830  7054
14831  7055
14832  7056
14833  7057
14834  7058
14835  7059
14836  705A
14837  705B
14838  705C
14839  705D
14840  705E
14841  705F
14842  7060
14843  7061
14844  7062
14845  7063
14846  7064
14847  7065
14848  7066
14849  7067
14850  7068
14851  7069
14852  706A
14853  706B
14854  706C
14855  706D
14856  706E
14857  706F
14858  7070
14859  7071
14860  7072
14861  7073
14862  7074
14863  7075
14864  7076
14865  7077
14866  7078
14867  7079
14868  707A
14869  707B
14870  707C
14871  707D
14872  707E
14873  707F
14874  7080
14875  7081
14876  7082
14877  7083
14878  7084
14879  7085
14880  7086
14881  7087
14882  7088
14883  7089
14884  708A
14885  708B
14886  708C
14887  708D
14888  708E
14889  708F
14890  7090
14891  7091
14892  7092
14893  7093
14894  7094
14895  7095
14896  7096
14897  7097
14898  7098
14899  7099
14900  709A
14901  709B
14902  709C
14903  709D
14904  709E
14905  709F
14906  70A0
14907  70A1
14908  70A2
14909  70A3
14910  70A4
14911  70A5
14912  70A6
14913  70A7
14914  70A8
14915  70A9
14916  70AA
14917  70AB
14918  70AC
14919  70AD
14920  70AE
14921  70AF
14922  70B0
14923  70B1
14924  70B2
14925  70B3
14926  70B4
14927  70B5
14928  70B6
14929  70B7
14930  70B8
14931  70B9
14932  70BA
14933  70BB
14934  70BC
14935  70BD
14936  70BE
14937  70BF
14938  70C0
14939  70C1
14940  70C2
14941  70C3
14942  70C4
14943  70C5
14944  70C6
14945  70C7
14946  70C8
14947  70C9
14948  70CA
14949  70CB
14950  70CC
14951  70CD
14952  70CE
14953  70CF
14954  70D0
14955  70D1
14956  70D2
14957  70D3
14958  70D4
14959  70D5
14960  70D6
14961  70D7
14962  70D8
14963  70D9
14964  70DA
14965  70DB
14966  70DC
14967  70DD
14968  70DE
14969  70DF
14970  70E0
14971  70E1
14972  70E2
14973  70E3
14974  70E4
14975  70E5
14976  70E6
14977  70E7
14978  70E8
14979  70E9
14980  70EA
14981  70EB
14982  70EC
14983  70ED
14984  70EE
14985  70EF
14986  70F0
14987  70F1
14988  70F2
14989  70F3
14990  70F4
14991  70F5
14992  70F6
14993  70F7
14994  70F8
14995  70F9
14996  70FA
14997  70FB
14998  70FC
14999  70FD
15000  70FE
15001  70FF
15002  7100
15003  7101
15004  7102
15005  7103
15006  7104
15007  7105
15008  7106
15009  7107
15010  7108
15011  7109
15012  710A
15013  710B
15014  710C
15015  710D
15016  710E
15017  710F
15018  7110
15019  7111
15020  7112
15021  7113
15022  7114
15023  7115
15024  7116
15025  7117
15026  7118
15027  7119
15028  711A
15029  711B
15030  711C
15031  711D
15032  711E
15033  711F
15034  7120
15035  7121
15036  7122
15037  7123
15038  7124
15039  7125
15040  7126
15041  7127
15042  7128
15043  7129
15044  712A
15045  712B
15046  712C
15047  712D
15048  712E
15049  712F
15050  7130
15051  7131
15052  7132
15053  7133
15054  7134
15055  7135
15056  7136
15057  7137
15058  7138
15059  7139
15060  713A
15061  713B
15062  713C
15063  713D
15064  713E
15065  713F
15066  7140
15067  7141
15068  7142
15069  7143
15070  7144
15071  7145
15072  7146
15073  7147
15074  7148
15075  7149
15076  714A
15077  714B
15078  714C
15079  714D
15080  714E
15081  714F
15082  7150
15083  7151
15084  7152
15085  7153
15086  7154
15087  7155
15088  7156
15089  7157
15090  7158
15091  7159
15092  715A
15093  715B
15094  715C
15095  715D
15096  715E
15097  715F
15098  7160
15099  7161
15100  7162
15101  7163
15102  7164
15103  7165
15104  7166
15105  7167
15106  7168
15107  7169
15108  716A
15109  716B
15110  716C
15111  716D
15112  716E
15113  716F
15114  7170
15115  7171
15116  7172
15117  7173
15118  7174
15119  7175
15120  7176
15121  7177
15122  7178
15123  7179
15124  717A
15125  717B
15126  717C
15127  717D
15128  717E
15129  717F
15130  7180
15131  7181
15132  7182
15133  7183
15134  7184
15135  7185
15136  7186
15137  7187
15138  7188
15139  7189
15140  718A
15141  718B
15142  718C
15143  718D
15144  718E
15145  718F
15146  7190
15147  7191
15148  7192
15149  7193
15150  7194
15151  7195
15152  7196
15153  7197
15154  7198
15155  7199
15156  719A
15157  719B
15158  719C
15159  719D
15160  719E
15161  719F
15162  71A0
15163  71A1
15164  71A2
15165  71A3
15166  71A4
15167  71A5
15168  71A6
15169  71A7
15170  71A8
15171  71A9
15172  71AA
15173  71AB
15174  71AC
15175  71AD
15176  71AE
15177  71AF
15178  71B0
15179  71B1
15180  71B2
15181  71B3
15182  71B4
15183  71B5
15184  71B6
15185  71B7
15186  71B8
15187  71B9
15188  71BA
15189  71BB
15190  71BC
15191  71BD
15192  71BE
15193  71BF
15194  71C0
15195  71C1
15196  71C2
15197  71C3
15198  71C4
15199  71C5
15200  71C6
15201  71C7
15202  71C8
15203  71C9
15204  71CA
15205  71CB
15206  71CC
15207  71CD
15208  71CE
15209  71CF
15210  71D0
15211  71D1
15212  71D2
15213  71D3
15214  71D4
15215  71D5
15216  71D6
15217  71D7
15218  71D8
15219  71D9
15220  71DA
15221  71DB
15222  71DC
15223  71DD
15224  71DE
15225  71DF
15226  71E0
15227  71E1
15228  71E2
15229  71E3
15230  71E4
15231  71E5
15232  71E6
15233  71E7
15234  71E8
15235  71E9
15236  71EA
15237  71EB
15238  71EC
15239  71ED
15240  71EE
15241  71EF
15242  71F0
15243  71F1
15244  71F2
15245  71F3
15246  71F4
15247  71F5
15248  71F6
15249  71F7
15250  71F8
15251  71F9
15252  71FA
15253  71FB
15254  71FC
15255  71FD
15256  71FE
15257  71FF
15258  7200
15259  7201
15260  7202
15261  7203
15262  7204
15263  7205
15264  7206
15265  7207
15266  7208
15267  7209
15268  720A
15269  720B
15270  720C
15271  720D
15272  720E
15273  720F
15274  7210
15275  7211
15276  7212
15277  7213
15278  7214
15279  7215
15280  7216
15281  7217
15282  7218
15283  7219
15284  721A
15285  721B
15286  721C
15287  721D
15288  721E
15289  721F
15290  7220
15291  7221
15292  7222
15293  7223
15294  7224
15295  7225
15296  7226
15297  7227
15298  7228
15299  7229
15300  722A
15301  722B
15302  722C
15303  722D
15304  722E
15305  722F
15306  7230
15307  7231
15308  7232
15309  7233
15310  7234
15311  7235
15312  7236
15313  7237
15314  7238
15315  7239
15316  723A
15317  723B
15318  723C
15319  723D
15320  723E
15321  723F
15322  7240
15323  7241
15324  7242
15325  7243
15326  7244
15327  7245
15328  7246
15329  7247
15330  7248
15331  7249
15332  724A
15333  724B
15334  724C
15335  724D
15336  724E
15337  724F
15338  7250
15339  7251
15340  7252
15341  7253
15342  7254
15343  7255
15344  7256
15345  7257
15346  7258
15347  7259
15348  725A
15349  725B
15350  725C
15351  725D
15352  725E
15353  725F
15354  7260
15355  7261
15356  7262
15357  7263
15358  7264
15359  7265
15360  7266
15361  7267
15362  7268
15363  7269
15364  726A
15365  726B
15366  726C
15367  726D
15368  726E
15369  726F
15370  7270
15371  7271
15372  7272
15373  7273
15374  7274
15375  7275
15376  7276
15377  7277
15378  7278
15379  7279
15380  727A
15381  727B
15382  727C
15383  727D
15384  727E
15385  727F
15386  7280
15387  7281
15388  7282
15389  7283
15390  7284
15391  7285
15392  7286
15393  7287
15394  7288
15395  7289
15396  728A
15397  728B
15398  728C
15399  728D
15400  728E
15401  728F
15402  7290
15403  7291
15404  7292
15405  7293
15406  7294
15407  7295
15408  7296
15409  7297
15410  7298
15411  7299
15412  729A
15413  729B
15414  729C
15415  729D
15416  729E
15417  729F
15418  72A0
15419  72A1
15420  72A2
15421  72A3
15422  72A4
15423  72A5
15424  72A6
15425  72A7
15426  72A8
15427  72A9
15428  72AA
15429  72AB
15430  72AC
15431  72AD
15432  72AE
15433  72AF
15434  72B0
15435  72B1
15436  72B2
15437  72B3
15438  72B4
15439  72B5
15440  72B6
15441  72B7
15442  72B8
15443  72B9
15444  72BA
15445  72BB
15446  72BC
15447  72BD
15448  72BE
15449  72BF
15450  72C0
15451  72C1
15452  72C2
15453  72C3
15454  72C4
15455  72C5
15456  72C6
15457  72C7
15458  72C8
15459  72C9
15460  72CA
15461  72CB
15462  72CC
15463  72CD
15464  72CE
15465  72CF
15466  72D0
15467  72D1
15468  72D2
15469  72D3
15470  72D4
15471  72D5
15472  72D6
15473  72D7
15474  72D8
15475  72D9
15476  72DA
15477  72DB
15478  72DC
15479  72DD
15480  72DE
15481  72DF
15482  72E0
15483  72E1
15484  72E2
15485  72E3
15486  72E4
15487  72E5
15488  72E6
15489  72E7
15490  72E8
15491  72E9
15492  72EA
15493  72EB
15494  72EC
15495  72ED
15496  72EE
15497  72EF
15498  72F0
15499  72F1
15500  72F2
15501  72F3
15502  72F4
15503  72F5
15504  72F6
15505  72F7
15506  72F8
15507  72F9
15508  72FA
15509  72FB
15510  72FC
15511  72FD
15512  72FE
15513  72FF
15514  7300
15515  7301
15516  7302
15517  7303
15518  7304
15519  7305
15520  7306
15521  7307
15522  7308
15523  7309
15524  730A
15525  730B
15526  730C
15527  730D
15528  730E
15529  730F
15530  7310
15531  7311
15532  7312
15533  7313
15534  7314
15535  7315
15536  7316
15537  7317
15538  7318
15539  7319
15540  731A
15541  731B
15542  731C
15543  731D
15544  731E
15545  731F
15546  7320
15547  7321
15548  7322
15549  7323
15550  7324
15551  7325
15552  7326
15553  7327
15554  7328
15555  7329
15556  732A
15557  732B
15558  732C
15559  732D
15560  732E
15561  732F
15562  7330
15563  7331
15564  7332
15565  7333
15566  7334
15567  7335
15568  7336
15569  7337
15570  7338
15571  7339
15572  733A
15573  733B
15574  733C
15575  733D
15576  733E
15577  733F
15578  7340
15579  7341
15580  7342
15581  7343
15582  7344
15583  7345
15584  7346
15585  7347
15586  7348
15587  7349
15588  734A
15589  734B
15590  734C
15591  734D
15592  734E
15593  734F
15594  7350
15595  7351
15596  7352
15597  7353
15598  7354
15599  7355
15600  7356
15601  7357
15602  7358
15603  7359
15604  735A
15605  735B
15606  735C
15607  735D
15608  735E
15609  735F
15610  7360
15611  7361
15612  7362
15613  7363
15614  7364
15615  7365
15616  7366
15617  7367
15618  7368
15619  7369
15620  736A
15621  736B
15622  736C
15623  736D
15624  736E
15625  736F
15626  7370
15627  7371
15628  7372
15629  7373
15630  7374
15631  7375
15632  7376
15633  7377
15634  7378
15635  7379
15636  737A
15637  737B
15638  737C
15639  737D
15640  737E
15641  737F
15642  7380
15643  7381
15644  7382
15645  7383
15646  7384
15647  7385
15648  7386
15649  7387
15650  7388
15651  7389
15652  738A
15653  738B
15654  738C
15655  738D
15656  738E
15657  738F
15658  7390
15659  7391
15660  7392
15661  7393
15662  7394
15663  7395
15664  7396
15665  7397
15666  7398
15667  7399
15668  739A
15669  739B
15670  739C
15671  739D
15672  739E
15673  739F
15674  73A0
15675  73A1
15676  73A2
15677  73A3
15678  73A4
15679  73A5
15680  73A6
15681  73A7
15682  73A8
15683  73A9
15684  73AA
15685  73AB
15686  73AC
15687  73AD
15688  73AE
15689  73AF
15690  73B0
15691  73B1
15692  73B2
15693  73B3
15694  73B4
15695  73B5
15696  73B6
15697  73B7
15698  73B8
15699  73B9
15700  73BA
15701  73BB
15702  73BC
15703  73BD
15704  73BE
15705  73BF
15706  73C0
15707  73C1
15708  73C2
15709  73C3
15710  73C4
15711  73C5
15712  73C6
15713  73C7
15714  73C8
15715  73C9
15716  73CA
15717  73CB
15718  73CC
15719  73CD
15720  73CE
15721  73CF
15722  73D0
15723  73D1
15724  73D2
15725  73D3
15726  73D4
15727  73D5
15728  73D6
15729  73D7
15730  73D8
15731  73D9
15732  73DA
15733  73DB
15734  73DC
15735  73DD
15736  73DE
15737  73DF
15738  73E0
15739  73E1
15740  73E2
15741  73E3
15742  73E4
15743  73E5
15744  73E6
15745  73E7
15746  73E8
15747  73E9
15748  73EA
15749  73EB
15750  73EC
15751  73ED
15752  73EE
15753  73EF
15754  73F0
15755  73F1
15756  73F2
15757  73F3
15758  73F4
15759  73F5
15760  73F6
15761  73F7
15762  73F8
15763  73F9
15764  73FA
15765  73FB
15766  73FC
15767  73FD
15768  73FE
15769  73FF
15770  7400
15771  7401
15772  7402
15773  7403
15774  7404
15775  7405
15776  7406
15777  7407
15778  7408
15779  7409
15780  740A
15781  740B
15782  740C
15783  740D
15784  740E
15785  740F
15786  7410
15787  7411
15788  7412
15789  7413
15790  7414
15791  7415
15792  7416
15793  7417
15794  7418
15795  7419
15796  741A
15797  741B
15798  741C
15799  741D
15800  741E
15801  741F
15802  7420
15803  7421
15804  7422
15805  7423
15806  7424
15807  7425
15808  7426
15809  7427
15810  7428
15811  7429
15812  742A
15813  742B
15814  742C
15815  742D
15816  742E
15817  742F
15818  7430
15819  7431
15820  7432
15821  7433
15822  7434
15823  7435
15824  7436
15825  7437
15826  7438
15827  7439
15828  743A
15829  743B
15830  743C
15831  743D
15832  743E
15833  743F
15834  7440
15835  7441
15836  7442
15837  7443
15838  7444
15839  7445
15840  7446
15841  7447
15842  7448
15843  7449
15844  744A
15845  744B
15846  744C
15847  744D
15848  744E
15849  744F
15850  7450
15851  7451
15852  7452
15853  7453
15854  7454
15855  7455
15856  7456
15857  7457
15858  7458
15859  7459
15860  745A
15861  745B
15862  745C
15863  745D
15864  745E
15865  745F
15866  7460
15867  7461
15868  7462
15869  7463
15870  7464
15871  7465
15872  7466
15873  7467
15874  7468
15875  7469
15876  746A
15877  746B
15878  746C
15879  746D
15880  746E
15881  746F
15882  7470
15883  7471
15884  7472
15885  7473
15886  7474
15887  7475
15888  7476
15889  7477
15890  7478
15891  7479
15892  747A
15893  747B
15894  747C
15895  747D
15896  747E
15897  747F
15898  7480
15899  7481
15900  7482
15901  7483
15902  7484
15903  7485
15904  7486
15905  7487
15906  7488
15907  7489
15908  748A
15909  748B
15910  748C
15911  748D
15912  748E
15913  748F
15914  7490
15915  7491
15916  7492
15917  7493
15918  7494
15919  7495
15920  7496
15921  7497
15922  7498
15923  7499
15924  749A
15925  749B
15926  749C
15927  749D
15928  749E
15929  749F
15930  74A0
15931  74A1
15932  74A2
15933  74A3
15934  74A4
15935  74A5
15936  74A6
15937  74A7
15938  74A8
15939  74A9
15940  74AA
15941  74AB
15942  74AC
15943  74AD
15944  74AE
15945  74AF
15946  74B0
15947  74B1
15948  74B2
15949  74B3
15950  74B4
15951  74B5
15952  74B6
15953  74B7
15954  74B8
15955  74B9
15956  74BA
15957  74BB
15958  74BC
15959  74BD
15960  74BE
15961  74BF
15962  74C0
15963  74C1
15964  74C2
15965  74C3
15966  74C4
15967  74C5
15968  74C6
15969  74C7
15970  74C8
15971  74C9
15972  74CA
15973  74CB
15974  74CC
15975  74CD
15976  74CE
15977  74CF
15978  74D0
15979  74D1
15980  74D2
15981  74D3
15982  74D4
15983  74D5
15984  74D6
15985  74D7
15986  74D8
15987  74D9
15988  74DA
15989  74DB
15990  74DC
15991  74DD
15992  74DE
15993  74DF
15994  74E0
15995  74E1
15996  74E2
15997  74E3
15998  74E4
15999  74E5
16000  74E6
16001  74E7
16002  74E8
16003  74E9
16004  74EA
16005  74EB
16006  74EC
16007  74ED
16008  74EE
16009  74EF
16010  74F0
16011  74F1
16012  74F2
16013  74F3
16014  74F4
16015  74F5
16016  74F6
16017  74F7
16018  74F8
16019  74F9
16020  74FA
16021  74FB
16022  74FC
16023  74FD
16024  74FE
16025  74FF
16026  7500
16027  7501
16028  7502
16029  7503
16030  7504
16031  7505
16032  7506
16033  7507
16034  7508
16035  7509
16036  750A
16037  750B
16038  750C
16039  750D
16040  750E
16041  750F
16042  7510
16043  7511
16044  7512
16045  7513
16046  7514
16047  7515
16048  7516
16049  7517
16050  7518
16051  7519
16052  751A
16053  751B
16054  751C
16055  751D
16056  751E
16057  751F
16058  7520
16059  7521
16060  7522
16061  7523
16062  7524
16063  7525
16064  7526
16065  7527
16066  7528
16067  7529
16068  752A
16069  752B
16070  752C
16071  752D
16072  752E
16073  752F
16074  7530
16075  7531
16076  7532
16077  7533
16078  7534
16079  7535
16080  7536
16081  7537
16082  7538
16083  7539
16084  753A
16085  753B
16086  753C
16087  753D
16088  753E
16089  753F
16090  7540
16091  7541
16092  7542
16093  7543
16094  7544
16095  7545
16096  7546
16097  7547
16098  7548
16099  7549
16100  754A
16101  754B
16102  754C
16103  754D
16104  754E
16105  754F
16106  7550
16107  7551
16108  7552
16109  7553
16110  7554
16111  7555
16112  7556
16113  7557
16114  7558
16115  7559
16116  755A
16117  755B
16118  755C
16119  755D
16120  755E
16121  755F
16122  7560
16123  7561
16124  7562
16125  7563
16126  7564
16127  7565
16128  7566
16129  7567
16130  7568
16131  7569
16132  756A
16133  756B
16134  756C
16135  756D
16136  756E
16137  756F
16138  7570
16139  7571
16140  7572
16141  7573
16142  7574
16143  7575
16144  7576
16145  7577
16146  7578
16147  7579
16148  757A
16149  757B
16150  757C
16151  757D
16152  757E
16153  757F
16154  7580
16155  7581
16156  7582
16157  7583
16158  7584
16159  7585
16160  7586
16161  7587
16162  7588
16163  7589
16164  758A
16165  758B
16166  758C
16167  758D
16168  758E
16169  758F
16170  7590
16171  7591
16172  7592
16173  7593
16174  7594
16175  7595
16176  7596
16177  7597
16178  7598
16179  7599
16180  759A
16181  759B
16182  759C
16183  759D
16184  759E
16185  759F
16186  75A0
16187  75A1
16188  75A2
16189  75A3
16190  75A4
16191  75A5
16192  75A6
16193  75A7
16194  75A8
16195  75A9
16196  75AA
16197  75AB
16198  75AC
16199  75AD
16200  75AE
16201  75AF
16202  75B0
16203  75B1
16204  75B2
16205  75B3
16206  75B4
16207  75B5
16208  75B6
16209  75B7
16210  75B8
16211  75B9
16212  75BA
16213  75BB
16214  75BC
16215  75BD
16216  75BE
16217  75BF
16218  75C0
16219  75C1
16220  75C2
16221  75C3
16222  75C4
16223  75C5
16224  75C6
16225  75C7
16226  75C8
16227  75C9
16228  75CA
16229  75CB
16230  75CC
16231  75CD
16232  75CE
16233  75CF
16234  75D0
16235  75D1
16236  75D2
16237  75D3
16238  75D4
16239  75D5
16240  75D6
16241  75D7
16242  75D8
16243  75D9
16244  75DA
16245  75DB
16246  75DC
16247  75DD
16248  75DE
16249  75DF
16250  75E0
16251  75E1
16252  75E2
16253  75E3
16254  75E4
16255  75E5
16256  75E6
16257  75E7
16258  75E8
16259  75E9
16260  75EA
16261  75EB
16262  75EC
16263  75ED
16264  75EE
16265  75EF
16266  75F0
16267  75F1
16268  75F2
16269  75F3
16270  75F4
16271  75F5
16272  75F6
16273  75F7
16274  75F8
16275  75F9
16276  75FA
16277  75FB
16278  75FC
16279  75FD
16280  75FE
16281  75FF
16282  7600
16283  7601
16284  7602
16285  7603
16286  7604
16287  7605
16288  7606
16289  7607
16290  7608
16291  7609
16292  760A
16293  760B
16294  760C
16295  760D
16296  760E
16297  760F
16298  7610
16299  7611
16300  7612
16301  7613
16302  7614
16303  7615
16304  7616
16305  7617
16306  7618
16307  7619
16308  761A
16309  761B
16310  761C
16311  761D
16312  761E
16313  761F
16314  7620
16315  7621
16316  7622
16317  7623
16318  7624
16319  7625
16320  7626
16321  7627
16322  7628
16323  7629
16324  762A
16325  762B
16326  762C
16327  762D
16328  762E
16329  762F
16330  7630
16331  7631
16332  7632
16333  7633
16334  7634
16335  7635
16336  7636
16337  7637
16338  7638
16339  7639
16340  763A
16341  763B
16342  763C
16343  763D
16344  763E
16345  763F
16346  7640
16347  7641
16348  7642
16349  7643
16350  7644
16351  7645
16352  7646
16353  7647
16354  7648
16355  7649
16356  764A
16357  764B
16358  764C
16359  764D
16360  764E
16361  764F
16362  7650
16363  7651
16364  7652
16365  7653
16366  7654
16367  7655
16368  7656
16369  7657
16370  7658
16371  7659
16372  765A
16373  765B
16374  765C
16375  765D
16376  765E
16377  765F
16378  7660
16379  7661
16380  7662
16381  7663
16382  7664
16383  7665
16384  7666
16385  7667
16386  7668
16387  7669
16388  766A
16389  766B
16390  766C
16391  766D
16392  766E
16393  766F
16394  7670
16395  7671
16396  7672
16397  7673
16398  7674
16399  7675
16400  7676
16401  7677
16402  7678
16403  7679
16404  767A
16405  767B
16406  767C
16407  767D
16408  767E
16409  767F
16410  7680
16411  7681
16412  7682
16413  7683
16414  7684
16415  7685
16416  7686
16417  7687
16418  7688
16419  7689
16420  768A
16421  768B
16422  768C
16423  768D
16424  768E
16425  768F
16426  7690
16427  7691
16428  7692
16429  7693
16430  7694
16431  7695
16432  7696
16433  7697
16434  7698
16435  7699
16436  769A
16437  769B
16438  769C
16439  769D
16440  769E
16441  769F
16442  76A0
16443  76A1
16444  76A2
16445  76A3
16446  76A4
16447  76A5
16448  76A6
16449  76A7
16450  76A8
16451  76A9
16452  76AA
16453  76AB
16454  76AC
16455  76AD
16456  76AE
16457  76AF
16458  76B0
16459  76B1
16460  76B2
16461  76B3
16462  76B4
16463  76B5
16464  76B6
16465  76B7
16466  76B8
16467  76B9
16468  76BA
16469  76BB
16470  76BC
16471  76BD
16472  76BE
16473  76BF
16474  76C0
16475  76C1
16476  76C2
16477  76C3
16478  76C4
16479  76C5
16480  76C6
16481  76C7
16482  76C8
16483  76C9
16484  76CA
16485  76CB
16486  76CC
16487  76CD
16488  76CE
16489  76CF
16490  76D0
16491  76D1
16492  76D2
16493  76D3
16494  76D4
16495  76D5
16496  76D6
16497  76D7
16498  76D8
16499  76D9
16500  76DA
16501  76DB
16502  76DC
16503  76DD
16504  76DE
16505  76DF
16506  76E0
16507  76E1
16508  76E2
16509  76E3
16510  76E4
16511  76E5
16512  76E6
16513  76E7
16514  76E8
16515  76E9
16516  76EA
16517  76EB
16518  76EC
16519  76ED
16520  76EE
16521  76EF
16522  76F0
16523  76F1
16524  76F2
16525  76F3
16526  76F4
16527  76F5
16528  76F6
16529  76F7
16530  76F8
16531  76F9
16532  76FA
16533  76FB
16534  76FC
16535  76FD
16536  76FE
16537  76FF
16538  7700
16539  7701
16540  7702
16541  7703
16542  7704
16543  7705
16544  7706
16545  7707
16546  7708
16547  7709
16548  770A
16549  770B
16550  770C
16551  770D
16552  770E
16553  770F
16554  7710
16555  7711
16556  7712
16557  7713
16558  7714
16559  7715
16560  7716
16561  7717
16562  7718
16563  7719
16564  771A
16565  771B
16566  771C
16567  771D
16568  771E
16569  771F
16570  7720
16571  7721
16572  7722
16573  7723
16574  7724
16575  7725
16576  7726
16577  7727
16578  7728
16579  7729
16580  772A
16581  772B
16582  772C
16583  772D
16584  772E
16585  772F
16586  7730
16587  7731
16588  7732
16589  7733
16590  7734
16591  7735
16592  7736
16593  7737
16594  7738
16595  7739
16596  773A
16597  773B
16598  773C
16599  773D
16600  773E
16601  773F
16602  7740
16603  7741
16604  7742
16605  7743
16606  7744
16607  7745
16608  7746
16609  7747
16610  7748
16611  7749
16612  774A
16613  774B
16614  774C
16615  774D
16616  774E
16617  774F
16618  7750
16619  7751
16620  7752
16621  7753
16622  7754
16623  7755
16624  7756
16625  7757
16626  7758
16627  7759
16628  775A
16629  775B
16630  775C
16631  775D
16632  775E
16633  775F
16634  7760
16635  7761
16636  7762
16637  7763
16638  7764
16639  7765
16640  7766
16641  7767
16642  7768
16643  7769
16644  776A
16645  776B
16646  776C
16647  776D
16648  776E
16649  776F
16650  7770
16651  7771
16652  7772
16653  7773
16654  7774
16655  7775
16656  7776
16657  7777
16658  7778
16659  7779
16660  777A
16661  777B
16662  777C
16663  777D
16664  777E
16665  777F
16666  7780
16667  7781
16668  7782
16669  7783
16670  7784
16671  7785
16672  7786
16673  7787
16674  7788
16675  7789
16676  778A
16677  778B
16678  778C
16679  778D
16680  778E
16681  778F
16682  7790
16683  7791
16684  7792
16685  7793
16686  7794
16687  7795
16688  7796
16689  7797
16690  7798
16691  7799
16692  779A
16693  779B
16694  779C
16695  779D
16696  779E
16697  779F
16698  77A0
16699  77A1
16700  77A2
16701  77A3
16702  77A4
16703  77A5
16704  77A6
16705  77A7
16706  77A8
16707  77A9
16708  77AA
16709  77AB
16710  77AC
16711  77AD
16712  77AE
16713  77AF
16714  77B0
16715  77B1
16716  77B2
16717  77B3
16718  77B4
16719  77B5
16720  77B6
16721  77B7
16722  77B8
16723  77B9
16724  77BA
16725  77BB
16726  77BC
16727  77BD
16728  77BE
16729  77BF
16730  77C0
16731  77C1
16732  77C2
16733  77C3
16734  77C4
16735  77C5
16736  77C6
16737  77C7
16738  77C8
16739  77C9
16740  77CA
16741  77CB
16742  77CC
16743  77CD
16744  77CE
16745  77CF
16746  77D0
16747  77D1
16748  77D2
16749  77D3
16750  77D4
16751  77D5
16752  77D6
16753  77D7
16754  77D8
16755  77D9
16756  77DA
16757  77DB
16758  77DC
16759  77DD
16760  77DE
16761  77DF
16762  77E0
16763  77E1
16764  77E2
16765  77E3
16766  77E4
16767  77E5
16768  77E6
16769  77E7
16770  77E8
16771  77E9
16772  77EA
16773  77EB
16774  77EC
16775  77ED
16776  77EE
16777  77EF
16778  77F0
16779  77F1
16780  77F2
16781  77F3
16782  77F4
16783  77F5
16784  77F6
16785  77F7
16786  77F8
16787  77F9
16788  77FA
16789  77FB
16790  77FC
16791  77FD
16792  77FE
16793  77FF
16794  7800
16795  7801
16796  7802
16797  7803
16798  7804
16799  7805
16800  7806
16801  7807
16802  7808
16803  7809
16804  780A
16805  780B
16806  780C
16807  780D
16808  780E
16809  780F
16810  7810
16811  7811
16812  7812
16813  7813
16814  7814
16815  7815
16816  7816
16817  7817
16818  7818
16819  7819
16820  781A
16821  781B
16822  781C
16823  781D
16824  781E
16825  781F
16826  7820
16827  7821
16828  7822
16829  7823
16830  7824
16831  7825
16832  7826
16833  7827
16834  7828
16835  7829
16836  782A
16837  782B
16838  782C
16839  782D
16840  782E
16841  782F
16842  7830
16843  7831
16844  7832
16845  7833
16846  7834
16847  7835
16848  7836
16849  7837
16850  7838
16851  7839
16852  783A
16853  783B
16854  783C
16855  783D
16856  783E
16857  783F
16858  7840
16859  7841
16860  7842
16861  7843
16862  7844
16863  7845
16864  7846
16865  7847
16866  7848
16867  7849
16868  784A
16869  784B
16870  784C
16871  784D
16872  784E
16873  784F
16874  7850
16875  7851
16876  7852
16877  7853
16878  7854
16879  7855
16880  7856
16881  7857
16882  7858
16883  7859
16884  785A
16885  785B
16886  785C
16887  785D
16888  785E
16889  785F
16890  7860
16891  7861
16892  7862
16893  7863
16894  7864
16895  7865
16896  7866
16897  7867
16898  7868
16899  7869
16900  786A
16901  786B
16902  786C
16903  786D
16904  786E
16905  786F
16906  7870
16907  7871
16908  7872
16909  7873
16910  7874
16911  7875
16912  7876
16913  7877
16914  7878
16915  7879
16916  787A
16917  787B
16918  787C
16919  787D
16920  787E
16921  787F
16922  7880
16923  7881
16924  7882
16925  7883
16926  7884
16927  7885
16928  7886
16929  7887
16930  7888
16931  7889
16932  788A
16933  788B
16934  788C
16935  788D
16936  788E
16937  788F
16938  7890
16939  7891
16940  7892
16941  7893
16942  7894
16943  7895
16944  7896
16945  7897
16946  7898
16947  7899
16948  789A
16949  789B
16950  789C
16951  789D
16952  789E
16953  789F
16954  78A0
16955  78A1
16956  78A2
16957  78A3
16958  78A4
16959  78A5
16960  78A6
16961  78A7
16962  78A8
16963  78A9
16964  78AA
16965  78AB
16966  78AC
16967  78AD
16968  78AE
16969  78AF
16970  78B0
16971  78B1
16972  78B2
16973  78B3
16974  78B4
16975  78B5
16976  78B6
16977  78B7
16978  78B8
16979  78B9
16980  78BA
16981  78BB
16982  78BC
16983  78BD
16984  78BE
16985  78BF
16986  78C0
16987  78C1
16988  78C2
16989  78C3
16990  78C4
16991  78C5
16992  78C6
16993  78C7
16994  78C8
16995  78C9
16996  78CA
16997  78CB
16998  78CC
16999  78CD
17000  78CE
17001  78CF
17002  78D0
17003  78D1
17004  78D2
17005  78D3
17006  78D4
17007  78D5
17008  78D6
17009  78D7
17010  78D8
17011  78D9
17012  78DA
17013  78DB
17014  78DC
17015  78DD
17016  78DE
17017  78DF
17018  78E0
17019  78E1
17020  78E2
17021  78E3
17022  78E4
17023  78E5
17024  78E6
17025  78E7
17026  78E8
17027  78E9
17028  78EA
17029  78EB
17030  78EC
17031  78ED
17032  78EE
17033  78EF
17034  78F0
17035  78F1
17036  78F2
17037  78F3
17038  78F4
17039  78F5
17040  78F6
17041  78F7
17042  78F8
17043  78F9
17044  78FA
17045  78FB
17046  78FC
17047  78FD
17048  78FE
17049  78FF
17050  7900
17051  7901
17052  7902
17053  7903
17054  7904
17055  7905
17056  7906
17057  7907
17058  7908
17059  7909
17060  790A
17061  790B
17062  790C
17063  790D
17064  790E
17065  790F
17066  7910
17067  7911
17068  7912
17069  7913
17070  7914
17071  7915
17072  7916
17073  7917
17074  7918
17075  7919
17076  791A
17077  791B
17078  791C
17079  791D
17080  791E
17081  791F
17082  7920
17083  7921
17084  7922
17085  7923
17086  7924
17087  7925
17088  7926
17089  7927
17090  7928
17091  7929
17092  792A
17093  792B
17094  792C
17095  792D
17096  792E
17097  792F
17098  7930
17099  7931
17100  7932
17101  7933
17102  7934
17103  7935
17104  7936
17105  7937
17106  7938
17107  7939
17108  793A
17109  793B
17110  793C
17111  793D
17112  793E
17113  793F
17114  7940
17115  7941
17116  7942
17117  7943
17118  7944
17119  7945
17120  7946
17121  7947
17122  7948
17123  7949
17124  794A
17125  794B
17126  794C
17127  794D
17128  794E
17129  794F
17130  7950
17131  7951
17132  7952
17133  7953
17134  7954
17135  7955
17136  7956
17137  7957
17138  7958
17139  7959
17140  795A
17141  795B
17142  795C
17143  795D
17144  795E
17145  795F
17146  7960
17147  7961
17148  7962
17149  7963
17150  7964
17151  7965
17152  7966
17153  7967
17154  7968
17155  7969
17156  796A
17157  796B
17158  796C
17159  796D
17160  796E
17161  796F
17162  7970
17163  7971
17164  7972
17165  7973
17166  7974
17167  7975
17168  7976
17169  7977
17170  7978
17171  7979
17172  797A
17173  797B
17174  797C
17175  797D
17176  797E
17177  797F
17178  7980
17179  7981
17180  7982
17181  7983
17182  7984
17183  7985
17184  7986
17185  7987
17186  7988
17187  7989
17188  798A
17189  798B
17190  798C
17191  798D
17192  798E
17193  798F
17194  7990
17195  7991
17196  7992
17197  7993
17198  7994
17199  7995
17200  7996
17201  7997
17202  7998
17203  7999
17204  799A
17205  799B
17206  799C
17207  799D
17208  799E
17209  799F
17210  79A0
17211  79A1
17212  79A2
17213  79A3
17214  79A4
17215  79A5
17216  79A6
17217  79A7
17218  79A8
17219  79A9
17220  79AA
17221  79AB
17222  79AC
17223  79AD
17224  79AE
17225  79AF
17226  79B0
17227  79B1
17228  79B2
17229  79B3
17230  79B4
17231  79B5
17232  79B6
17233  79B7
17234  79B8
17235  79B9
17236  79BA
17237  79BB
17238  79BC
17239  79BD
17240  79BE
17241  79BF
17242  79C0
17243  79C1
17244  79C2
17245  79C3
17246  79C4
17247  79C5
17248  79C6
17249  79C7
17250  79C8
17251  79C9
17252  79CA
17253  79CB
17254  79CC
17255  79CD
17256  79CE
17257  79CF
17258  79D0
17259  79D1
17260  79D2
17261  79D3
17262  79D4
17263  79D5
17264  79D6
17265  79D7
17266  79D8
17267  79D9
17268  79DA
17269  79DB
17270  79DC
17271  79DD
17272  79DE
17273  79DF
17274  79E0
17275  79E1
17276  79E2
17277  79E3
17278  79E4
17279  79E5
17280  79E6
17281  79E7
17282  79E8
17283  79E9
17284  79EA
17285  79EB
17286  79EC
17287  79ED
17288  79EE
17289  79EF
17290  79F0
17291  79F1
17292  79F2
17293  79F3
17294  79F4
17295  79F5
17296  79F6
17297  79F7
17298  79F8
17299  79F9
17300  79FA
17301  79FB
17302  79FC
17303  79FD
17304  79FE
17305  79FF
17306  7A00
17307  7A01
17308  7A02
17309  7A03
17310  7A04
17311  7A05
17312  7A06
17313  7A07
17314  7A08
17315  7A09
17316  7A0A
17317  7A0B
17318  7A0C
17319  7A0D
17320  7A0E
17321  7A0F
17322  7A10
17323  7A11
17324  7A12
17325  7A13
17326  7A14
17327  7A15
17328  7A16
17329  7A17
17330  7A18
17331  7A19
17332  7A1A
17333  7A1B
17334  7A1C
17335  7A1D
17336  7A1E
17337  7A1F
17338  7A20
17339  7A21
17340  7A22
17341  7A23
17342  7A24
17343  7A25
17344  7A26
17345  7A27
17346  7A28
17347  7A29
17348  7A2A
17349  7A2B
17350  7A2C
17351  7A2D
17352  7A2E
17353  7A2F
17354  7A30
17355  7A31
17356  7A32
17357  7A33
17358  7A34
17359  7A35
17360  7A36
17361  7A37
17362  7A38
17363  7A39
17364  7A3A
17365  7A3B
17366  7A3C
17367  7A3D
17368  7A3E
17369  7A3F
17370  7A40
17371  7A41
17372  7A42
17373  7A43
17374  7A44
17375  7A45
17376  7A46
17377  7A47
17378  7A48
17379  7A49
17380  7A4A
17381  7A4B
17382  7A4C
17383  7A4D
17384  7A4E
17385  7A4F
17386  7A50
17387  7A51
17388  7A52
17389  7A53
17390  7A54
17391  7A55
17392  7A56
17393  7A57
17394  7A58
17395  7A59
17396  7A5A
17397  7A5B
17398  7A5C
17399  7A5D
17400  7A5E
17401  7A5F
17402  7A60
17403  7A61
17404  7A62
17405  7A63
17406  7A64
17407  7A65
17408  7A66
17409  7A67
17410  7A68
17411  7A69
17412  7A6A
17413  7A6B
17414  7A6C
17415  7A6D
17416  7A6E
17417  7A6F
17418  7A70
17419  7A71
17420  7A72
17421  7A73
17422  7A74
17423  7A75
17424  7A76
17425  7A77
17426  7A78
17427  7A79
17428  7A7A
17429  7A7B
17430  7A7C
17431  7A7D
17432  7A7E
17433  7A7F
17434  7A80
17435  7A81
17436  7A82
17437  7A83
17438  7A84
17439  7A85
17440  7A86
17441  7A87
17442  7A88
17443  7A89
17444  7A8A
17445  7A8B
17446  7A8C
17447  7A8D
17448  7A8E
17449  7A8F
17450  7A90
17451  7A91
17452  7A92
17453  7A93
17454  7A94
17455  7A95
17456  7A96
17457  7A97
17458  7A98
17459  7A99
17460  7A9A
17461  7A9B
17462  7A9C
17463  7A9D
17464  7A9E
17465  7A9F
17466  7AA0
17467  7AA1
17468  7AA2
17469  7AA3
17470  7AA4
17471  7AA5
17472  7AA6
17473  7AA7
17474  7AA8
17475  7AA9
17476  7AAA
17477  7AAB
17478  7AAC
17479  7AAD
17480  7AAE
17481  7AAF
17482  7AB0
17483  7AB1
17484  7AB2
17485  7AB3
17486  7AB4
17487  7AB5
17488  7AB6
17489  7AB7
17490  7AB8
17491  7AB9
17492  7ABA
17493  7ABB
17494  7ABC
17495  7ABD
17496  7ABE
17497  7ABF
17498  7AC0
17499  7AC1
17500  7AC2
17501  7AC3
17502  7AC4
17503  7AC5
17504  7AC6
17505  7AC7
17506  7AC8
17507  7AC9
17508  7ACA
17509  7ACB
17510  7ACC
17511  7ACD
17512  7ACE
17513  7ACF
17514  7AD0
17515  7AD1
17516  7AD2
17517  7AD3
17518  7AD4
17519  7AD5
17520  7AD6
17521  7AD7
17522  7AD8
17523  7AD9
17524  7ADA
17525  7ADB
17526  7ADC
17527  7ADD
17528  7ADE
17529  7ADF
17530  7AE0
17531  7AE1
17532  7AE2
17533  7AE3
17534  7AE4
17535  7AE5
17536  7AE6
17537  7AE7
17538  7AE8
17539  7AE9
17540  7AEA
17541  7AEB
17542  7AEC
17543  7AED
17544  7AEE
17545  7AEF
17546  7AF0
17547  7AF1
17548  7AF2
17549  7AF3
17550  7AF4
17551  7AF5
17552  7AF6
17553  7AF7
17554  7AF8
17555  7AF9
17556  7AFA
17557  7AFB
17558  7AFC
17559  7AFD
17560  7AFE
17561  7AFF
17562  7B00
17563  7B01
17564  7B02
17565  7B03
17566  7B04
17567  7B05
17568  7B06
17569  7B07
17570  7B08
17571  7B09
17572  7B0A
17573  7B0B
17574  7B0C
17575  7B0D
17576  7B0E
17577  7B0F
17578  7B10
17579  7B11
17580  7B12
17581  7B13
17582  7B14
17583  7B15
17584  7B16
17585  7B17
17586  7B18
17587  7B19
17588  7B1A
17589  7B1B
17590  7B1C
17591  7B1D
17592  7B1E
17593  7B1F
17594  7B20
17595  7B21
17596  7B22
17597  7B23
17598  7B24
17599  7B25
17600  7B26
17601  7B27
17602  7B28
17603  7B29
17604  7B2A
17605  7B2B
17606  7B2C
17607  7B2D
17608  7B2E
17609  7B2F
17610  7B30
17611  7B31
17612  7B32
17613  7B33
17614  7B34
17615  7B35
17616  7B36
17617  7B37
17618  7B38
17619  7B39
17620  7B3A
17621  7B3B
17622  7B3C
17623  7B3D
17624  7B3E
17625  7B3F
17626  7B40
17627  7B41
17628  7B42
17629  7B43
17630  7B44
17631  7B45
17632  7B46
17633  7B47
17634  7B48
17635  7B49
17636  7B4A
17637  7B4B
17638  7B4C
17639  7B4D
17640  7B4E
17641  7B4F
17642  7B50
17643  7B51
17644  7B52
17645  7B53
17646  7B54
17647  7B55
17648  7B56
17649  7B57
17650  7B58
17651  7B59
17652  7B5A
17653  7B5B
17654  7B5C
17655  7B5D
17656  7B5E
17657  7B5F
17658  7B60
17659  7B61
17660  7B62
17661  7B63
17662  7B64
17663  7B65
17664  7B66
17665  7B67
17666  7B68
17667  7B69
17668  7B6A
17669  7B6B
17670  7B6C
17671  7B6D
17672  7B6E
17673  7B6F
17674  7B70
17675  7B71
17676  7B72
17677  7B73
17678  7B74
17679  7B75
17680  7B76
17681  7B77
17682  7B78
17683  7B79
17684  7B7A
17685  7B7B
17686  7B7C
17687  7B7D
17688  7B7E
17689  7B7F
17690  7B80
17691  7B81
17692  7B82
17693  7B83
17694  7B84
17695  7B85
17696  7B86
17697  7B87
17698  7B88
17699  7B89
17700  7B8A
17701  7B8B
17702  7B8C
17703  7B8D
17704  7B8E
17705  7B8F
17706  7B90
17707  7B91
17708  7B92
17709  7B93
17710  7B94
17711  7B95
17712  7B96
17713  7B97
17714  7B98
17715  7B99
17716  7B9A
17717  7B9B
17718  7B9C
17719  7B9D
17720  7B9E
17721  7B9F
17722  7BA0
17723  7BA1
17724  7BA2
17725  7BA3
17726  7BA4
17727  7BA5
17728  7BA6
17729  7BA7
17730  7BA8
17731  7BA9
17732  7BAA
17733  7BAB
17734  7BAC
17735  7BAD
17736  7BAE
17737  7BAF
17738  7BB0
17739  7BB1
17740  7BB2
17741  7BB3
17742  7BB4
17743  7BB5
17744  7BB6
17745  7BB7
17746  7BB8
17747  7BB9
17748  7BBA
17749  7BBB
17750  7BBC
17751  7BBD
17752  7BBE
17753  7BBF
17754  7BC0
17755  7BC1
17756  7BC2
17757  7BC3
17758  7BC4
17759  7BC5
17760  7BC6
17761  7BC7
17762  7BC8
17763  7BC9
17764  7BCA
17765  7BCB
17766  7BCC
17767  7BCD
17768  7BCE
17769  7BCF
17770  7BD0
17771  7BD1
17772  7BD2
17773  7BD3
17774  7BD4
17775  7BD5
17776  7BD6
17777  7BD7
17778  7BD8
17779  7BD9
17780  7BDA
17781  7BDB
17782  7BDC
17783  7BDD
17784  7BDE
17785  7BDF
17786  7BE0
17787  7BE1
17788  7BE2
17789  7BE3
17790  7BE4
17791  7BE5
17792  7BE6
17793  7BE7
17794  7BE8
17795  7BE9
17796  7BEA
17797  7BEB
17798  7BEC
17799  7BED
17800  7BEE
17801  7BEF
17802  7BF0
17803  7BF1
17804  7BF2
17805  7BF3
17806  7BF4
17807  7BF5
17808  7BF6
17809  7BF7
17810  7BF8
17811  7BF9
17812  7BFA
17813  7BFB
17814  7BFC
17815  7BFD
17816  7BFE
17817  7BFF
17818  7C00
17819  7C01
17820  7C02
17821  7C03
17822  7C04
17823  7C05
17824  7C06
17825  7C07
17826  7C08
17827  7C09
17828  7C0A
17829  7C0B
17830  7C0C
17831  7C0D
17832  7C0E
17833  7C0F
17834  7C10
17835  7C11
17836  7C12
17837  7C13
17838  7C14
17839  7C15
17840  7C16
17841  7C17
17842  7C18
17843  7C19
17844  7C1A
17845  7C1B
17846  7C1C
17847  7C1D
17848  7C1E
17849  7C1F
17850  7C20
17851  7C21
17852  7C22
17853  7C23
17854  7C24
17855  7C25
17856  7C26
17857  7C27
17858  7C28
17859  7C29
17860  7C2A
17861  7C2B
17862  7C2C
17863  7C2D
17864  7C2E
17865  7C2F
17866  7C30
17867  7C31
17868  7C32
17869  7C33
17870  7C34
17871  7C35
17872  7C36
17873  7C37
17874  7C38
17875  7C39
17876  7C3A
17877  7C3B
17878  7C3C
17879  7C3D
17880  7C3E
17881  7C3F
17882  7C40
17883  7C41
17884  7C42
17885  7C43
17886  7C44
17887  7C45
17888  7C46
17889  7C47
17890  7C48
17891  7C49
17892  7C4A
17893  7C4B
17894  7C4C
17895  7C4D
17896  7C4E
17897  7C4F
17898  7C50
17899  7C51
17900  7C52
17901  7C53
17902  7C54
17903  7C55
17904  7C56
17905  7C57
17906  7C58
17907  7C59
17908  7C5A
17909  7C5B
17910  7C5C
17911  7C5D
17912  7C5E
17913  7C5F
17914  7C60
17915  7C61
17916  7C62
17917  7C63
17918  7C64
17919  7C65
17920  7C66
17921  7C67
17922  7C68
17923  7C69
17924  7C6A
17925  7C6B
17926  7C6C
17927  7C6D
17928  7C6E
17929  7C6F
17930  7C70
17931  7C71
17932  7C72
17933  7C73
17934  7C74
17935  7C75
17936  7C76
17937  7C77
17938  7C78
17939  7C79
17940  7C7A
17941  7C7B
17942  7C7C
17943  7C7D
17944  7C7E
17945  7C7F
17946  7C80
17947  7C81
17948  7C82
17949  7C83
17950  7C84
17951  7C85
17952  7C86
17953  7C87
17954  7C88
17955  7C89
17956  7C8A
17957  7C8B
17958  7C8C
17959  7C8D
17960  7C8E
17961  7C8F
17962  7C90
17963  7C91
17964  7C92
17965  7C93
17966  7C94
17967  7C95
17968  7C96
17969  7C97
17970  7C98
17971  7C99
17972  7C9A
17973  7C9B
17974  7C9C
17975  7C9D
17976  7C9E
17977  7C9F
17978  7CA0
17979  7CA1
17980  7CA2
17981  7CA3
17982  7CA4
17983  7CA5
17984  7CA6
17985  7CA7
17986  7CA8
17987  7CA9
17988  7CAA
17989  7CAB
17990  7CAC
17991  7CAD
17992  7CAE
17993  7CAF
17994  7CB0
17995  7CB1
17996  7CB2
17997  7CB3
17998  7CB4
17999  7CB5
18000  7CB6
18001  7CB7
18002  7CB8
18003  7CB9
18004  7CBA
18005  7CBB
18006  7CBC
18007  7CBD
18008  7CBE
18009  7CBF
18010  7CC0
18011  7CC1
18012  7CC2
18013  7CC3
18014  7CC4
18015  7CC5
18016  7CC6
18017  7CC7
18018  7CC8
18019  7CC9
18020  7CCA
18021  7CCB
18022  7CCC
18023  7CCD
18024  7CCE
18025  7CCF
18026  7CD0
18027  7CD1
18028  7CD2
18029  7CD3
18030  7CD4
18031  7CD5
18032  7CD6
18033  7CD7
18034  7CD8
18035  7CD9
18036  7CDA
18037  7CDB
18038  7CDC
18039  7CDD
18040  7CDE
18041  7CDF
18042  7CE0
18043  7CE1
18044  7CE2
18045  7CE3
18046  7CE4
18047  7CE5
18048  7CE6
18049  7CE7
18050  7CE8
18051  7CE9
18052  7CEA
18053  7CEB
18054  7CEC
18055  7CED
18056  7CEE
18057  7CEF
18058  7CF0
18059  7CF1
18060  7CF2
18061  7CF3
18062  7CF4
18063  7CF5
18064  7CF6
18065  7CF7
18066  7CF8
18067  7CF9
18068  7CFA
18069  7CFB
18070  7CFC
18071  7CFD
18072  7CFE
18073  7CFF
18074  7D00
18075  7D01
18076  7D02
18077  7D03
18078  7D04
18079  7D05
18080  7D06
18081  7D07
18082  7D08
18083  7D09
18084  7D0A
18085  7D0B
18086  7D0C
18087  7D0D
18088  7D0E
18089  7D0F
18090  7D10
18091  7D11
18092  7D12
18093  7D13
18094  7D14
18095  7D15
18096  7D16
18097  7D17
18098  7D18
18099  7D19
18100  7D1A
18101  7D1B
18102  7D1C
18103  7D1D
18104  7D1E
18105  7D1F
18106  7D20
18107  7D21
18108  7D22
18109  7D23
18110  7D24
18111  7D25
18112  7D26
18113  7D27
18114  7D28
18115  7D29
18116  7D2A
18117  7D2B
18118  7D2C
18119  7D2D
18120  7D2E
18121  7D2F
18122  7D30
18123  7D31
18124  7D32
18125  7D33
18126  7D34
18127  7D35
18128  7D36
18129  7D37
18130  7D38
18131  7D39
18132  7D3A
18133  7D3B
18134  7D3C
18135  7D3D
18136  7D3E
18137  7D3F
18138  7D40
18139  7D41
18140  7D42
18141  7D43
18142  7D44
18143  7D45
18144  7D46
18145  7D47
18146  7D48
18147  7D49
18148  7D4A
18149  7D4B
18150  7D4C
18151  7D4D
18152  7D4E
18153  7D4F
18154  7D50
18155  7D51
18156  7D52
18157  7D53
18158  7D54
18159  7D55
18160  7D56
18161  7D57
18162  7D58
18163  7D59
18164  7D5A
18165  7D5B
18166  7D5C
18167  7D5D
18168  7D5E
18169  7D5F
18170  7D60
18171  7D61
18172  7D62
18173  7D63
18174  7D64
18175  7D65
18176  7D66
18177  7D67
18178  7D68
18179  7D69
18180  7D6A
18181  7D6B
18182  7D6C
18183  7D6D
18184  7D6E
18185  7D6F
18186  7D70
18187  7D71
18188  7D72
18189  7D73
18190  7D74
18191  7D75
18192  7D76
18193  7D77
18194  7D78
18195  7D79
18196  7D7A
18197  7D7B
18198  7D7C
18199  7D7D
18200  7D7E
18201  7D7F
18202  7D80
18203  7D81
18204  7D82
18205  7D83
18206  7D84
18207  7D85
18208  7D86
18209  7D87
18210  7D88
18211  7D89
18212  7D8A
18213  7D8B
18214  7D8C
18215  7D8D
18216  7D8E
18217  7D8F
18218  7D90
18219  7D91
18220  7D92
18221  7D93
18222  7D94
18223  7D95
18224  7D96
18225  7D97
18226  7D98
18227  7D99
18228  7D9A
18229  7D9B
18230  7D9C
18231  7D9D
18232  7D9E
18233  7D9F
18234  7DA0
18235  7DA1
18236  7DA2
18237  7DA3
18238  7DA4
18239  7DA5
18240  7DA6
18241  7DA7
18242  7DA8
18243  7DA9
18244  7DAA
18245  7DAB
18246  7DAC
18247  7DAD
18248  7DAE
18249  7DAF
18250  7DB0
18251  7DB1
18252  7DB2
18253  7DB3
18254  7DB4
18255  7DB5
18256  7DB6
18257  7DB7
18258  7DB8
18259  7DB9
18260  7DBA
18261  7DBB
18262  7DBC
18263  7DBD
18264  7DBE
18265  7DBF
18266  7DC0
18267  7DC1
18268  7DC2
18269  7DC3
18270  7DC4
18271  7DC5
18272  7DC6
18273  7DC7
18274  7DC8
18275  7DC9
18276  7DCA
18277  7DCB
18278  7DCC
18279  7DCD
18280  7DCE
18281  7DCF
18282  7DD0
18283  7DD1
18284  7DD2
18285  7DD3
18286  7DD4
18287  7DD5
18288  7DD6
18289  7DD7
18290  7DD8
18291  7DD9
18292  7DDA
18293  7DDB
18294  7DDC
18295  7DDD
18296  7DDE
18297  7DDF
18298  7DE0
18299  7DE1
18300  7DE2
18301  7DE3
18302  7DE4
18303  7DE5
18304  7DE6
18305  7DE7
18306  7DE8
18307  7DE9
18308  7DEA
18309  7DEB
18310  7DEC
18311  7DED
18312  7DEE
18313  7DEF
18314  7DF0
18315  7DF1
18316  7DF2
18317  7DF3
18318  7DF4
18319  7DF5
18320  7DF6
18321  7DF7
18322  7DF8
18323  7DF9
18324  7DFA
18325  7DFB
18326  7DFC
18327  7DFD
18328  7DFE
18329  7DFF
18330  7E00
18331  7E01
18332  7E02
18333  7E03
18334  7E04
18335  7E05
18336  7E06
18337  7E07
18338  7E08
18339  7E09
18340  7E0A
18341  7E0B
18342  7E0C
18343  7E0D
18344  7E0E
18345  7E0F
18346  7E10
18347  7E11
18348  7E12
18349  7E13
18350  7E14
18351  7E15
18352  7E16
18353  7E17
18354  7E18
18355  7E19
18356  7E1A
18357  7E1B
18358  7E1C
18359  7E1D
18360  7E1E
18361  7E1F
18362  7E20
18363  7E21
18364  7E22
18365  7E23
18366  7E24
18367  7E25
18368  7E26
18369  7E27
18370  7E28
18371  7E29
18372  7E2A
18373  7E2B
18374  7E2C
18375  7E2D
18376  7E2E
18377  7E2F
18378  7E30
18379  7E31
18380  7E32
18381  7E33
18382  7E34
18383  7E35
18384  7E36
18385  7E37
18386  7E38
18387  7E39
18388  7E3A
18389  7E3B
18390  7E3C
18391  7E3D
18392  7E3E
18393  7E3F
18394  7E40
18395  7E41
18396  7E42
18397  7E43
18398  7E44
18399  7E45
18400  7E46
18401  7E47
18402  7E48
18403  7E49
18404  7E4A
18405  7E4B
18406  7E4C
18407  7E4D
18408  7E4E
18409  7E4F
18410  7E50
18411  7E51
18412  7E52
18413  7E53
18414  7E54
18415  7E55
18416  7E56
18417  7E57
18418  7E58
18419  7E59
18420  7E5A
18421  7E5B
18422  7E5C
18423  7E5D
18424  7E5E
18425  7E5F
18426  7E60
18427  7E61
18428  7E62
18429  7E63
18430  7E64
18431  7E65
18432  7E66
18433  7E67
18434  7E68
18435  7E69
18436  7E6A
18437  7E6B
18438  7E6C
18439  7E6D
18440  7E6E
18441  7E6F
18442  7E70
18443  7E71
18444  7E72
18445  7E73
18446  7E74
18447  7E75
18448  7E76
18449  7E77
18450  7E78
18451  7E79
18452  7E7A
18453  7E7B
18454  7E7C
18455  7E7D
18456  7E7E
18457  7E7F
18458  7E80
18459  7E81
18460  7E82
18461  7E83
18462  7E84
18463  7E85
18464  7E86
18465  7E87
18466  7E88
18467  7E89
18468  7E8A
18469  7E8B
18470  7E8C
18471  7E8D
18472  7E8E
18473  7E8F
18474  7E90
18475  7E91
18476  7E92
18477  7E93
18478  7E94
18479  7E95
18480  7E96
18481  7E97
18482  7E98
18483  7E99
18484  7E9A
18485  7E9B
18486  7E9C
18487  7E9D
18488  7E9E
18489  7E9F
18490  7EA0
18491  7EA1
18492  7EA2
18493  7EA3
18494  7EA4
18495  7EA5
18496  7EA6
18497  7EA7
18498  7EA8
18499  7EA9
18500  7EAA
18501  7EAB
18502  7EAC
18503  7EAD
18504  7EAE
18505  7EAF
18506  7EB0
18507  7EB1
18508  7EB2
18509  7EB3
18510  7EB4
18511  7EB5
18512  7EB6
18513  7EB7
18514  7EB8
18515  7EB9
18516  7EBA
18517  7EBB
18518  7EBC
18519  7EBD
18520  7EBE
18521  7EBF
18522  7EC0
18523  7EC1
18524  7EC2
18525  7EC3
18526  7EC4
18527  7EC5
18528  7EC6
18529  7EC7
18530  7EC8
18531  7EC9
18532  7ECA
18533  7ECB
18534  7ECC
18535  7ECD
18536  7ECE
18537  7ECF
18538  7ED0
18539  7ED1
18540  7ED2
18541  7ED3
18542  7ED4
18543  7ED5
18544  7ED6
18545  7ED7
18546  7ED8
18547  7ED9
18548  7EDA
18549  7EDB
18550  7EDC
18551  7EDD
18552  7EDE
18553  7EDF
18554  7EE0
18555  7EE1
18556  7EE2
18557  7EE3
18558  7EE4
18559  7EE5
18560  7EE6
18561  7EE7
18562  7EE8
18563  7EE9
18564  7EEA
18565  7EEB
18566  7EEC
18567  7EED
18568  7EEE
18569  7EEF
18570  7EF0
18571  7EF1
18572  7EF2
18573  7EF3
18574  7EF4
18575  7EF5
18576  7EF6
18577  7EF7
18578  7EF8
18579  7EF9
18580  7EFA
18581  7EFB
18582  7EFC
18583  7EFD
18584  7EFE
18585  7EFF
18586  7F00
18587  7F01
18588  7F02
18589  7F03
18590  7F04
18591  7F05
18592  7F06
18593  7F07
18594  7F08
18595  7F09
18596  7F0A
18597  7F0B
18598  7F0C
18599  7F0D
18600  7F0E
18601  7F0F
18602  7F10
18603  7F11
18604  7F12
18605  7F13
18606  7F14
18607  7F15
18608  7F16
18609  7F17
18610  7F18
18611  7F19
18612  7F1A
18613  7F1B
18614  7F1C
18615  7F1D
18616  7F1E
18617  7F1F
18618  7F20
18619  7F21
18620  7F22
18621  7F23
18622  7F24
18623  7F25
18624  7F26
18625  7F27
18626  7F28
18627  7F29
18628  7F2A
18629  7F2B
18630  7F2C
18631  7F2D
18632  7F2E
18633  7F2F
18634  7F30
18635  7F31
18636  7F32
18637  7F33
18638  7F34
18639  7F35
18640  7F36
18641  7F37
18642  7F38
18643  7F39
18644  7F3A
18645  7F3B
18646  7F3C
18647  7F3D
18648  7F3E
18649  7F3F
18650  7F40
18651  7F41
18652  7F42
18653  7F43
18654  7F44
18655  7F45
18656  7F46
18657  7F47
18658  7F48
18659  7F49
18660  7F4A
18661  7F4B
18662  7F4C
18663  7F4D
18664  7F4E
18665  7F4F
18666  7F50
18667  7F51
18668  7F52
18669  7F53
18670  7F54
18671  7F55
18672  7F56
18673  7F57
18674  7F58
18675  7F59
18676  7F5A
18677  7F5B
18678  7F5C
18679  7F5D
18680  7F5E
18681  7F5F
18682  7F60
18683  7F61
18684  7F62
18685  7F63
18686  7F64
18687  7F65
18688  7F66
18689  7F67
18690  7F68
18691  7F69
18692  7F6A
18693  7F6B
18694  7F6C
18695  7F6D
18696  7F6E
18697  7F6F
18698  7F70
18699  7F71
18700  7F72
18701  7F73
18702  7F74
18703  7F75
18704  7F76
18705  7F77
18706  7F78
18707  7F79
18708  7F7A
18709  7F7B
18710  7F7C
18711  7F7D
18712  7F7E
18713  7F7F
18714  7F80
18715  7F81
18716  7F82
18717  7F83
18718  7F84
18719  7F85
18720  7F86
18721  7F87
18722  7F88
18723  7F89
18724  7F8A
18725  7F8B
18726  7F8C
18727  7F8D
18728  7F8E
18729  7F8F
18730  7F90
18731  7F91
18732  7F92
18733  7F93
18734  7F94
18735  7F95
18736  7F96
18737  7F97
18738  7F98
18739  7F99
18740  7F9A
18741  7F9B
18742  7F9C
18743  7F9D
18744  7F9E
18745  7F9F
18746  7FA0
18747  7FA1
18748  7FA2
18749  7FA3
18750  7FA4
18751  7FA5
18752  7FA6
18753  7FA7
18754  7FA8
18755  7FA9
18756  7FAA
18757  7FAB
18758  7FAC
18759  7FAD
18760  7FAE
18761  7FAF
18762  7FB0
18763  7FB1
18764  7FB2
18765  7FB3
18766  7FB4
18767  7FB5
18768  7FB6
18769  7FB7
18770  7FB8
18771  7FB9
18772  7FBA
18773  7FBB
18774  7FBC
18775  7FBD
18776  7FBE
18777  7FBF
18778  7FC0
18779  7FC1
18780  7FC2
18781  7FC3
18782  7FC4
18783  7FC5
18784  7FC6
18785  7FC7
18786  7FC8
18787  7FC9
18788  7FCA
18789  7FCB
18790  7FCC
18791  7FCD
18792  7FCE
18793  7FCF
18794  7FD0
18795  7FD1
18796  7FD2
18797  7FD3
18798  7FD4
18799  7FD5
18800  7FD6
18801  7FD7
18802  7FD8
18803  7FD9
18804  7FDA
18805  7FDB
18806  7FDC
18807  7FDD
18808  7FDE
18809  7FDF
18810  7FE0
18811  7FE1
18812  7FE2
18813  7FE3
18814  7FE4
18815  7FE5
18816  7FE6
18817  7FE7
18818  7FE8
18819  7FE9
18820  7FEA
18821  7FEB
18822  7FEC
18823  7FED
18824  7FEE
18825  7FEF
18826  7FF0
18827  7FF1
18828  7FF2
18829  7FF3
18830  7FF4
18831  7FF5
18832  7FF6
18833  7FF7
18834  7FF8
18835  7FF9
18836  7FFA
18837  7FFB
18838  7FFC
18839  7FFD
18840  7FFE
18841  7FFF
18842  8000
18843  8001
18844  8002
18845  8003
18846  8004
18847  8005
18848  8006
18849  8007
18850  8008
18851  8009
18852  800A
18853  800B
18854  800C
18855  800D
18856  800E
18857  800F
18858  8010
18859  8011
18860  8012
18861  8013
18862  8014
18863  8015
18864  8016
18865  8017
18866  8018
18867  8019
18868  801A
18869  801B
18870  801C
18871  801D
18872  801E
18873  801F
18874  8020
18875  8021
18876  8022
18877  8023
18878  8024
18879  8025
18880  8026
18881  8027
18882  8028
18883  8029
18884  802A
18885  802B
18886  802C
18887  802D
18888  802E
18889  802F
18890  8030
18891  8031
18892  8032
18893  8033
18894  8034
18895  8035
18896  8036
18897  8037
18898  8038
18899  8039
18900  803A
18901  803B
18902  803C
18903  803D
18904  803E
18905  803F
18906  8040
18907  8041
18908  8042
18909  8043
18910  8044
18911  8045
18912  8046
18913  8047
18914  8048
18915  8049
18916  804A
18917  804B
18918  804C
18919  804D
18920  804E
18921  804F
18922  8050
18923  8051
18924  8052
18925  8053
18926  8054
18927  8055
18928  8056
18929  8057
18930  8058
18931  8059
18932  805A
18933  805B
18934  805C
18935  805D
18936  805E
18937  805F
18938  8060
18939  8061
18940  8062
18941  8063
18942  8064
18943  8065
18944  8066
18945  8067
18946  8068
18947  8069
18948  806A
18949  806B
18950  806C
18951  806D
18952  806E
18953  806F
18954  8070
18955  8071
18956  8072
18957  8073
18958  8074
18959  8075
18960  8076
18961  8077
18962  8078
18963  8079
18964  807A
18965  807B
18966  807C
18967  807D
18968  807E
18969  807F
18970  8080
18971  8081
18972  8082
18973  8083
18974  8084
18975  8085
18976  8086
18977  8087
18978  8088
18979  8089
18980  808A
18981  808B
18982  808C
18983  808D
18984  808E
18985  808F
18986  8090
18987  8091
18988  8092
18989  8093
18990  8094
18991  8095
18992  8096
18993  8097
18994  8098
18995  8099
18996  809A
18997  809B
18998  809C
18999  809D
19000  809E
19001  809F
19002  80A0
19003  80A1
19004  80A2
19005  80A3
19006  80A4
19007  80A5
19008  80A6
19009  80A7
19010  80A8
19011  80A9
19012  80AA
19013  80AB
19014  80AC
19015  80AD
19016  80AE
19017  80AF
19018  80B0
19019  80B1
19020  80B2
19021  80B3
19022  80B4
19023  80B5
19024  80B6
19025  80B7
19026  80B8
19027  80B9
19028  80BA
19029  80BB
19030  80BC
19031  80BD
19032  80BE
19033  80BF
19034  80C0
19035  80C1
19036  80C2
19037  80C3
19038  80C4
19039  80C5
19040  80C6
19041  80C7
19042  80C8
19043  80C9
19044  80CA
19045  80CB
19046  80CC
19047  80CD
19048  80CE
19049  80CF
19050  80D0
19051  80D1
19052  80D2
19053  80D3
19054  80D4
19055  80D5
19056  80D6
19057  80D7
19058  80D8
19059  80D9
19060  80DA
19061  80DB
19062  80DC
19063  80DD
19064  80DE
19065  80DF
19066  80E0
19067  80E1
19068  80E2
19069  80E3
19070  80E4
19071  80E5
19072  80E6
19073  80E7
19074  80E8
19075  80E9
19076  80EA
19077  80EB
19078  80EC
19079  80ED
19080  80EE
19081  80EF
19082  80F0
19083  80F1
19084  80F2
19085  80F3
19086  80F4
19087  80F5
19088  80F6
19089  80F7
19090  80F8
19091  80F9
19092  80FA
19093  80FB
19094  80FC
19095  80FD
19096  80FE
19097  80FF
19098  8100
19099  8101
19100  8102
19101  8103
19102  8104
19103  8105
19104  8106
19105  8107
19106  8108
19107  8109
19108  810A
19109  810B
19110  810C
19111  810D
19112  810E
19113  810F
19114  8110
19115  8111
19116  8112
19117  8113
19118  8114
19119  8115
19120  8116
19121  8117
19122  8118
19123  8119
19124  811A
19125  811B
19126  811C
19127  811D
19128  811E
19129  811F
19130  8120
19131  8121
19132  8122
19133  8123
19134  8124
19135  8125
19136  8126
19137  8127
19138  8128
19139  8129
19140  812A
19141  812B
19142  812C
19143  812D
19144  812E
19145  812F
19146  8130
19147  8131
19148  8132
19149  8133
19150  8134
19151  8135
19152  8136
19153  8137
19154  8138
19155  8139
19156  813A
19157  813B
19158  813C
19159  813D
19160  813E
19161  813F
19162  8140
19163  8141
19164  8142
19165  8143
19166  8144
19167  8145
19168  8146
19169  8147
19170  8148
19171  8149
19172  814A
19173  814B
19174  814C
19175  814D
19176  814E
19177  814F
19178  8150
19179  8151
19180  8152
19181  8153
19182  8154
19183  8155
19184  8156
19185  8157
19186  8158
19187  8159
19188  815A
19189  815B
19190  815C
19191  815D
19192  815E
19193  815F
19194  8160
19195  8161
19196  8162
19197  8163
19198  8164
19199  8165
19200  8166
19201  8167
19202  8168
19203  8169
19204  816A
19205  816B
19206  816C
19207  816D
19208  816E
19209  816F
19210  8170
19211  8171
19212  8172
19213  8173
19214  8174
19215  8175
19216  8176
19217  8177
19218  8178
19219  8179
19220  817A
19221  817B
19222  817C
19223  817D
19224  817E
19225  817F
19226  8180
19227  8181
19228  8182
19229  8183
19230  8184
19231  8185
19232  8186
19233  8187
19234  8188
19235  8189
19236  818A
19237  818B
19238  818C
19239  818D
19240  818E
19241  818F
19242  8190
19243  8191
19244  8192
19245  8193
19246  8194
19247  8195
19248  8196
19249  8197
19250  8198
19251  8199
19252  819A
19253  819B
19254  819C
19255  819D
19256  819E
19257  819F
19258  81A0
19259  81A1
19260  81A2
19261  81A3
19262  81A4
19263  81A5
19264  81A6
19265  81A7
19266  81A8
19267  81A9
19268  81AA
19269  81AB
19270  81AC
19271  81AD
19272  81AE
19273  81AF
19274  81B0
19275  81B1
19276  81B2
19277  81B3
19278  81B4
19279  81B5
19280  81B6
19281  81B7
19282  81B8
19283  81B9
19284  81BA
19285  81BB
19286  81BC
19287  81BD
19288  81BE
19289  81BF
19290  81C0
19291  81C1
19292  81C2
19293  81C3
19294  81C4
19295  81C5
19296  81C6
19297  81C7
19298  81C8
19299  81C9
19300  81CA
19301  81CB
19302  81CC
19303  81CD
19304  81CE
19305  81CF
19306  81D0
19307  81D1
19308  81D2
19309  81D3
19310  81D4
19311  81D5
19312  81D6
19313  81D7
19314  81D8
19315  81D9
19316  81DA
19317  81DB
19318  81DC
19319  81DD
19320  81DE
19321  81DF
19322  81E0
19323  81E1
19324  81E2
19325  81E3
19326  81E4
19327  81E5
19328  81E6
19329  81E7
19330  81E8
19331  81E9
19332  81EA
19333  81EB
19334  81EC
19335  81ED
19336  81EE
19337  81EF
19338  81F0
19339  81F1
19340  81F2
19341  81F3
19342  81F4
19343  81F5
19344  81F6
19345  81F7
19346  81F8
19347  81F9
19348  81FA
19349  81FB
19350  81FC
19351  81FD
19352  81FE
19353  81FF
19354  8200
19355  8201
19356  8202
19357  8203
19358  8204
19359  8205
19360  8206
19361  8207
19362  8208
19363  8209
19364  820A
19365  820B
19366  820C
19367  820D
19368  820E
19369  820F
19370  8210
19371  8211
19372  8212
19373  8213
19374  8214
19375  8215
19376  8216
19377  8217
19378  8218
19379  8219
19380  821A
19381  821B
19382  821C
19383  821D
19384  821E
19385  821F
19386  8220
19387  8221
19388  8222
19389  8223
19390  8224
19391  8225
19392  8226
19393  8227
19394  8228
19395  8229
19396  822A
19397  822B
19398  822C
19399  822D
19400  822E
19401  822F
19402  8230
19403  8231
19404  8232
19405  8233
19406  8234
19407  8235
19408  8236
19409  8237
19410  8238
19411  8239
19412  823A
19413  823B
19414  823C
19415  823D
19416  823E
19417  823F
19418  8240
19419  8241
19420  8242
19421  8243
19422  8244
19423  8245
19424  8246
19425  8247
19426  8248
19427  8249
19428  824A
19429  824B
19430  824C
19431  824D
19432  824E
19433  824F
19434  8250
19435  8251
19436  8252
19437  8253
19438  8254
19439  8255
19440  8256
19441  8257
19442  8258
19443  8259
19444  825A
19445  825B
19446  825C
19447  825D
19448  825E
19449  825F
19450  8260
19451  8261
19452  8262
19453  8263
19454  8264
19455  8265
19456  8266
19457  8267
19458  8268
19459  8269
19460  826A
19461  826B
19462  826C
19463  826D
19464  826E
19465  826F
19466  8270
19467  8271
19468  8272
19469  8273
19470  8274
19471  8275
19472  8276
19473  8277
19474  8278
19475  8279
19476  827A
19477  827B
19478  827C
19479  827D
19480  827E
19481  827F
19482  8280
19483  8281
19484  8282
19485  8283
19486  8284
19487  8285
19488  8286
19489  8287
19490  8288
19491  8289
19492  828A
19493  828B
19494  828C
19495  828D
19496  828E
19497  828F
19498  8290
19499  8291
19500  8292
19501  8293
19502  8294
19503  8295
19504  8296
19505  8297
19506  8298
19507  8299
19508  829A
19509  829B
19510  829C
19511  829D
19512  829E
19513  829F
19514  82A0
19515  82A1
19516  82A2
19517  82A3
19518  82A4
19519  82A5
19520  82A6
19521  82A7
19522  82A8
19523  82A9
19524  82AA
19525  82AB
19526  82AC
19527  82AD
19528  82AE
19529  82AF
19530  82B0
19531  82B1
19532  82B2
19533  82B3
19534  82B4
19535  82B5
19536  82B6
19537  82B7
19538  82B8
19539  82B9
19540  82BA
19541  82BB
19542  82BC
19543  82BD
19544  82BE
19545  82BF
19546  82C0
19547  82C1
19548  82C2
19549  82C3
19550  82C4
19551  82C5
19552  82C6
19553  82C7
19554  82C8
19555  82C9
19556  82CA
19557  82CB
19558  82CC
19559  82CD
19560  82CE
19561  82CF
19562  82D0
19563  82D1
19564  82D2
19565  82D3
19566  82D4
19567  82D5
19568  82D6
19569  82D7
19570  82D8
19571  82D9
19572  82DA
19573  82DB
19574  82DC
19575  82DD
19576  82DE
19577  82DF
19578  82E0
19579  82E1
19580  82E2
19581  82E3
19582  82E4
19583  82E5
19584  82E6
19585  82E7
19586  82E8
19587  82E9
19588  82EA
19589  82EB
19590  82EC
19591  82ED
19592  82EE
19593  82EF
19594  82F0
19595  82F1
19596  82F2
19597  82F3
19598  82F4
19599  82F5
19600  82F6
19601  82F7
19602  82F8
19603  82F9
19604  82FA
19605  82FB
19606  82FC
19607  82FD
19608  82FE
19609  82FF
19610  8300
19611  8301
19612  8302
19613  8303
19614  8304
19615  8305
19616  8306
19617  8307
19618  8308
19619  8309
19620  830A
19621  830B
19622  830C
19623  830D
19624  830E
19625  830F
19626  8310
19627  8311
19628  8312
19629  8313
19630  8314
19631  8315
19632  8316
19633  8317
19634  8318
19635  8319
19636  831A
19637  831B
19638  831C
19639  831D
19640  831E
19641  831F
19642  8320
19643  8321
19644  8322
19645  8323
19646  8324
19647  8325
19648  8326
19649  8327
19650  8328
19651  8329
19652  832A
19653  832B
19654  832C
19655  832D
19656  832E
19657  832F
19658  8330
19659  8331
19660  8332
19661  8333
19662  8334
19663  8335
19664  8336
19665  8337
19666  8338
19667  8339
19668  833A
19669  833B
19670  833C
19671  833D
19672  833E
19673  833F
19674  8340
19675  8341
19676  8342
19677  8343
19678  8344
19679  8345
19680  8346
19681  8347
19682  8348
19683  8349
19684  834A
19685  834B
19686  834C
19687  834D
19688  834E
19689  834F
19690  8350
19691  8351
19692  8352
19693  8353
19694  8354
19695  8355
19696  8356
19697  8357
19698  8358
19699  8359
19700  835A
19701  835B
19702  835C
19703  835D
19704  835E
19705  835F
19706  8360
19707  8361
19708  8362
19709  8363
19710  8364
19711  8365
19712  8366
19713  8367
19714  8368
19715  8369
19716  836A
19717  836B
19718  836C
19719  836D
19720  836E
19721  836F
19722  8370
19723  8371
19724  8372
19725  8373
19726  8374
19727  8375
19728  8376
19729  8377
19730  8378
19731  8379
19732  837A
19733  837B
19734  837C
19735  837D
19736  837E
19737  837F
19738  8380
19739  8381
19740  8382
19741  8383
19742  8384
19743  8385
19744  8386
19745  8387
19746  8388
19747  8389
19748  838A
19749  838B
19750  838C
19751  838D
19752  838E
19753  838F
19754  8390
19755  8391
19756  8392
19757  8393
19758  8394
19759  8395
19760  8396
19761  8397
19762  8398
19763  8399
19764  839A
19765  839B
19766  839C
19767  839D
19768  839E
19769  839F
19770  83A0
19771  83A1
19772  83A2
19773  83A3
19774  83A4
19775  83A5
19776  83A6
19777  83A7
19778  83A8
19779  83A9
19780  83AA
19781  83AB
19782  83AC
19783  83AD
19784  83AE
19785  83AF
19786  83B0
19787  83B1
19788  83B2
19789  83B3
19790  83B4
19791  83B5
19792  83B6
19793  83B7
19794  83B8
19795  83B9
19796  83BA
19797  83BB
19798  83BC
19799  83BD
19800  83BE
19801  83BF
19802  83C0
19803  83C1
19804  83C2
19805  83C3
19806  83C4
19807  83C5
19808  83C6
19809  83C7
19810  83C8
19811  83C9
19812  83CA
19813  83CB
19814  83CC
19815  83CD
19816  83CE
19817  83CF
19818  83D0
19819  83D1
19820  83D2
19821  83D3
19822  83D4
19823  83D5
19824  83D6
19825  83D7
19826  83D8
19827  83D9
19828  83DA
19829  83DB
19830  83DC
19831  83DD
19832  83DE
19833  83DF
19834  83E0
19835  83E1
19836  83E2
19837  83E3
19838  83E4
19839  83E5
19840  83E6
19841  83E7
19842  83E8
19843  83E9
19844  83EA
19845  83EB
19846  83EC
19847  83ED
19848  83EE
19849  83EF
19850  83F0
19851  83F1
19852  83F2
19853  83F3
19854  83F4
19855  83F5
19856  83F6
19857  83F7
19858  83F8
19859  83F9
19860  83FA
19861  83FB
19862  83FC
19863  83FD
19864  83FE
19865  83FF
19866  8400
19867  8401
19868  8402
19869  8403
19870  8404
19871  8405
19872  8406
19873  8407
19874  8408
19875  8409
19876  840A
19877  840B
19878  840C
19879  840D
19880  840E
19881  840F
19882  8410
19883  8411
19884  8412
19885  8413
19886  8414
19887  8415
19888  8416
19889  8417
19890  8418
19891  8419
19892  841A
19893  841B
19894  841C
19895  841D
19896  841E
19897  841F
19898  8420
19899  8421
19900  8422
19901  8423
19902  8424
19903  8425
19904  8426
19905  8427
19906  8428
19907  8429
19908  842A
19909  842B
19910  842C
19911  842D
19912  842E
19913  842F
19914  8430
19915  8431
19916  8432
19917  8433
19918  8434
19919  8435
19920  8436
19921  8437
19922  8438
19923  8439
19924  843A
19925  843B
19926  843C
19927  843D
19928  843E
19929  843F
19930  8440
19931  8441
19932  8442
19933  8443
19934  8444
19935  8445
19936  8446
19937  8447
19938  8448
19939  8449
19940  844A
19941  844B
19942  844C
19943  844D
19944  844E
19945  844F
19946  8450
19947  8451
19948  8452
19949  8453
19950  8454
19951  8455
19952  8456
19953  8457
19954  8458
19955  8459
19956  845A
19957  845B
19958  845C
19959  845D
19960  845E
19961  845F
19962  8460
19963  8461
19964  8462
19965  8463
19966  8464
19967  8465
19968  8466
19969  8467
19970  8468
19971  8469
19972  846A
19973  846B
19974  846C
19975  846D
19976  846E
19977  846F
19978  8470
19979  8471
19980  8472
19981  8473
19982  8474
19983  8475
19984  8476
19985  8477
19986  8478
19987  8479
19988  847A
19989  847B
19990  847C
19991  847D
19992  847E
19993  847F
19994  8480
19995  8481
19996  8482
19997  8483
19998  8484
19999  8485
20000  8486
20001  8487
20002  8488
20003  8489
20004  848A
20005  848B
20006  848C
20007  848D
20008  848E
20009  848F
20010  8490
20011  8491
20012  8492
20013  8493
20014  8494
20015  8495
20016  8496
20017  8497
20018  8498
20019  8499
20020  849A
20021  849B
20022  849C
20023  849D
20024  849E
20025  849F
20026  84A0
20027  84A1
20028  84A2
20029  84A3
20030  84A4
20031  84A5
20032  84A6
20033  84A7
20034  84A8
20035  84A9
20036  84AA
20037  84AB
20038  84AC
20039  84AD
20040  84AE
20041  84AF
20042  84B0
20043  84B1
20044  84B2
20045  84B3
20046  84B4
20047  84B5
20048  84B6
20049  84B7
20050  84B8
20051  84B9
20052  84BA
20053  84BB
20054  84BC
20055  84BD
20056  84BE
20057  84BF
20058  84C0
20059  84C1
20060  84C2
20061  84C3
20062  84C4
20063  84C5
20064  84C6
20065  84C7
20066  84C8
20067  84C9
20068  84CA
20069  84CB
20070  84CC
20071  84CD
20072  84CE
20073  84CF
20074  84D0
20075  84D1
20076  84D2
20077  84D3
20078  84D4
20079  84D5
20080  84D6
20081  84D7
20082  84D8
20083  84D9
20084  84DA
20085  84DB
20086  84DC
20087  84DD
20088  84DE
20089  84DF
20090  84E0
20091  84E1
20092  84E2
20093  84E3
20094  84E4
20095  84E5
20096  84E6
20097  84E7
20098  84E8
20099  84E9
20100  84EA
20101  84EB
20102  84EC
20103  84ED
20104  84EE
20105  84EF
20106  84F0
20107  84F1
20108  84F2
20109  84F3
20110  84F4
20111  84F5
20112  84F6
20113  84F7
20114  84F8
20115  84F9
20116  84FA
20117  84FB
20118  84FC
20119  84FD
20120  84FE
20121  84FF
20122  8500
20123  8501
20124  8502
20125  8503
20126  8504
20127  8505
20128  8506
20129  8507
20130  8508
20131  8509
20132  850A
20133  850B
20134  850C
20135  850D
20136  850E
20137  850F
20138  8510
20139  8511
20140  8512
20141  8513
20142  8514
20143  8515
20144  8516
20145  8517
20146  8518
20147  8519
20148  851A
20149  851B
20150  851C
20151  851D
20152  851E
20153  851F
20154  8520
20155  8521
20156  8522
20157  8523
20158  8524
20159  8525
20160  8526
20161  8527
20162  8528
20163  8529
20164  852A
20165  852B
20166  852C
20167  852D
20168  852E
20169  852F
20170  8530
20171  8531
20172  8532
20173  8533
20174  8534
20175  8535
20176  8536
20177  8537
20178  8538
20179  8539
20180  853A
20181  853B
20182  853C
20183  853D
20184  853E
20185  853F
20186  8540
20187  8541
20188  8542
20189  8543
20190  8544
20191  8545
20192  8546
20193  8547
20194  8548
20195  8549
20196  854A
20197  854B
20198  854C
20199  854D
20200  854E
20201  854F
20202  8550
20203  8551
20204  8552
20205  8553
20206  8554
20207  8555
20208  8556
20209  8557
20210  8558
20211  8559
20212  855A
20213  855B
20214  855C
20215  855D
20216  855E
20217  855F
20218  8560
20219  8561
20220  8562
20221  8563
20222  8564
20223  8565
20224  8566
20225  8567
20226  8568
20227  8569
20228  856A
20229  856B
20230  856C
20231  856D
20232  856E
20233  856F
20234  8570
20235  8571
20236  8572
20237  8573
20238  8574
20239  8575
20240  8576
20241  8577
20242  8578
20243  8579
20244  857A
20245  857B
20246  857C
20247  857D
20248  857E
20249  857F
20250  8580
20251  8581
20252  8582
20253  8583
20254  8584
20255  8585
20256  8586
20257  8587
20258  8588
20259  8589
20260  858A
20261  858B
20262  858C
20263  858D
20264  858E
20265  858F
20266  8590
20267  8591
20268  8592
20269  8593
20270  8594
20271  8595
20272  8596
20273  8597
20274  8598
20275  8599
20276  859A
20277  859B
20278  859C
20279  859D
20280  859E
20281  859F
20282  85A0
20283  85A1
20284  85A2
20285  85A3
20286  85A4
20287  85A5
20288  85A6
20289  85A7
20290  85A8
20291  85A9
20292  85AA
20293  85AB
20294  85AC
20295  85AD
20296  85AE
20297  85AF
20298  85B0
20299  85B1
20300  85B2
20301  85B3
20302  85B4
20303  85B5
20304  85B6
20305  85B7
20306  85B8
20307  85B9
20308  85BA
20309  85BB
20310  85BC
20311  85BD
20312  85BE
20313  85BF
20314  85C0
20315  85C1
20316  85C2
20317  85C3
20318  85C4
20319  85C5
20320  85C6
20321  85C7
20322  85C8
20323  85C9
20324  85CA
20325  85CB
20326  85CC
20327  85CD
20328  85CE
20329  85CF
20330  85D0
20331  85D1
20332  85D2
20333  85D3
20334  85D4
20335  85D5
20336  85D6
20337  85D7
20338  85D8
20339  85D9
20340  85DA
20341  85DB
20342  85DC
20343  85DD
20344  85DE
20345  85DF
20346  85E0
20347  85E1
20348  85E2
20349  85E3
20350  85E4
20351  85E5
20352  85E6
20353  85E7
20354  85E8
20355  85E9
20356  85EA
20357  85EB
20358  85EC
20359  85ED
20360  85EE
20361  85EF
20362  85F0
20363  85F1
20364  85F2
20365  85F3
20366  85F4
20367  85F5
20368  85F6
20369  85F7
20370  85F8
20371  85F9
20372  85FA
20373  85FB
20374  85FC
20375  85FD
20376  85FE
20377  85FF
20378  8600
20379  8601
20380  8602
20381  8603
20382  8604
20383  8605
20384  8606
20385  8607
20386  8608
20387  8609
20388  860A
20389  860B
20390  860C
20391  860D
20392  860E
20393  860F
20394  8610
20395  8611
20396  8612
20397  8613
20398  8614
20399  8615
20400  8616
20401  8617
20402  8618
20403  8619
20404  861A
20405  861B
20406  861C
20407  861D
20408  861E
20409  861F
20410  8620
20411  8621
20412  8622
20413  8623
20414  8624
20415  8625
20416  8626
20417  8627
20418  8628
20419  8629
20420  862A
20421  862B
20422  862C
20423  862D
20424  862E
20425  862F
20426  8630
20427  8631
20428  8632
20429  8633
20430  8634
20431  8635
20432  8636
20433  8637
20434  8638
20435  8639
20436  863A
20437  863B
20438  863C
20439  863D
20440  863E
20441  863F
20442  8640
20443  8641
20444  8642
20445  8643
20446  8644
20447  8645
20448  8646
20449  8647
20450  8648
20451  8649
20452  864A
20453  864B
20454  864C
20455  864D
20456  864E
20457  864F
20458  8650
20459  8651
20460  8652
20461  8653
20462  8654
20463  8655
20464  8656
20465  8657
20466  8658
20467  8659
20468  865A
20469  865B
20470  865C
20471  865D
20472  865E
20473  865F
20474  8660
20475  8661
20476  8662
20477  8663
20478  8664
20479  8665
20480  8666
20481  8667
20482  8668
20483  8669
20484  866A
20485  866B
20486  866C
20487  866D
20488  866E
20489  866F
20490  8670
20491  8671
20492  8672
20493  8673
20494  8674
20495  8675
20496  8676
20497  8677
20498  8678
20499  8679
20500  867A
20501  867B
20502  867C
20503  867D
20504  867E
20505  867F
20506  8680
20507  8681
20508  8682
20509  8683
20510  8684
20511  8685
20512  8686
20513  8687
20514  8688
20515  8689
20516  868A
20517  868B
20518  868C
20519  868D
20520  868E
20521  868F
20522  8690
20523  8691
20524  8692
20525  8693
20526  8694
20527  8695
20528  8696
20529  8697
20530  8698
20531  8699
20532  869A
20533  869B
20534  869C
20535  869D
20536  869E
20537  869F
20538  86A0
20539  86A1
20540  86A2
20541  86A3
20542  86A4
20543  86A5
20544  86A6
20545  86A7
20546  86A8
20547  86A9
20548  86AA
20549  86AB
20550  86AC
20551  86AD
20552  86AE
20553  86AF
20554  86B0
20555  86B1
20556  86B2
20557  86B3
20558  86B4
20559  86B5
20560  86B6
20561  86B7
20562  86B8
20563  86B9
20564  86BA
20565  86BB
20566  86BC
20567  86BD
20568  86BE
20569  86BF
20570  86C0
20571  86C1
20572  86C2
20573  86C3
20574  86C4
20575  86C5
20576  86C6
20577  86C7
20578  86C8
20579  86C9
20580  86CA
20581  86CB
20582  86CC
20583  86CD
20584  86CE
20585  86CF
20586  86D0
20587  86D1
20588  86D2
20589  86D3
20590  86D4
20591  86D5
20592  86D6
20593  86D7
20594  86D8
20595  86D9
20596  86DA
20597  86DB
20598  86DC
20599  86DD
20600  86DE
20601  86DF
20602  86E0
20603  86E1
20604  86E2
20605  86E3
20606  86E4
20607  86E5
20608  86E6
20609  86E7
20610  86E8
20611  86E9
20612  86EA
20613  86EB
20614  86EC
20615  86ED
20616  86EE
20617  86EF
20618  86F0
20619  86F1
20620  86F2
20621  86F3
20622  86F4
20623  86F5
20624  86F6
20625  86F7
20626  86F8
20627  86F9
20628  86FA
20629  86FB
20630  86FC
20631  86FD
20632  86FE
20633  86FF
20634  8700
20635  8701
20636  8702
20637  8703
20638  8704
20639  8705
20640  8706
20641  8707
20642  8708
20643  8709
20644  870A
20645  870B
20646  870C
20647  870D
20648  870E
20649  870F
20650  8710
20651  8711
20652  8712
20653  8713
20654  8714
20655  8715
20656  8716
20657  8717
20658  8718
20659  8719
20660  871A
20661  871B
20662  871C
20663  871D
20664  871E
20665  871F
20666  8720
20667  8721
20668  8722
20669  8723
20670  8724
20671  8725
20672  8726
20673  8727
20674  8728
20675  8729
20676  872A
20677  872B
20678  872C
20679  872D
20680  872E
20681  872F
20682  8730
20683  8731
20684  8732
20685  8733
20686  8734
20687  8735
20688  8736
20689  8737
20690  8738
20691  8739
20692  873A
20693  873B
20694  873C
20695  873D
20696  873E
20697  873F
20698  8740
20699  8741
20700  8742
20701  8743
20702  8744
20703  8745
20704  8746
20705  8747
20706  8748
20707  8749
20708  874A
20709  874B
20710  874C
20711  874D
20712  874E
20713  874F
20714  8750
20715  8751
20716  8752
20717  8753
20718  8754
20719  8755
20720  8756
20721  8757
20722  8758
20723  8759
20724  875A
20725  875B
20726  875C
20727  875D
20728  875E
20729  875F
20730  8760
20731  8761
20732  8762
20733  8763
20734  8764
20735  8765
20736  8766
20737  8767
20738  8768
20739  8769
20740  876A
20741  876B
20742  876C
20743  876D
20744  876E
20745  876F
20746  8770
20747  8771
20748  8772
20749  8773
20750  8774
20751  8775
20752  8776
20753  8777
20754  8778
20755  8779
20756  877A
20757  877B
20758  877C
20759  877D
20760  877E
20761  877F
20762  8780
20763  8781
20764  8782
20765  8783
20766  8784
20767  8785
20768  8786
20769  8787
20770  8788
20771  8789
20772  878A
20773  878B
20774  878C
20775  878D
20776  878E
20777  878F
20778  8790
20779  8791
20780  8792
20781  8793
20782  8794
20783  8795
20784  8796
20785  8797
20786  8798
20787  8799
20788  879A
20789  879B
20790  879C
20791  879D
20792  879E
20793  879F
20794  87A0
20795  87A1
20796  87A2
20797  87A3
20798  87A4
20799  87A5
20800  87A6
20801  87A7
20802  87A8
20803  87A9
20804  87AA
20805  87AB
20806  87AC
20807  87AD
20808  87AE
20809  87AF
20810  87B0
20811  87B1
20812  87B2
20813  87B3
20814  87B4
20815  87B5
20816  87B6
20817  87B7
20818  87B8
20819  87B9
20820  87BA
20821  87BB
20822  87BC
20823  87BD
20824  87BE
20825  87BF
20826  87C0
20827  87C1
20828  87C2
20829  87C3
20830  87C4
20831  87C5
20832  87C6
20833  87C7
20834  87C8
20835  87C9
20836  87CA
20837  87CB
20838  87CC
20839  87CD
20840  87CE
20841  87CF
20842  87D0
20843  87D1
20844  87D2
20845  87D3
20846  87D4
20847  87D5
20848  87D6
20849  87D7
20850  87D8
20851  87D9
20852  87DA
20853  87DB
20854  87DC
20855  87DD
20856  87DE
20857  87DF
20858  87E0
20859  87E1
20860  87E2
20861  87E3
20862  87E4
20863  87E5
20864  87E6
20865  87E7
20866  87E8
20867  87E9
20868  87EA
20869  87EB
20870  87EC
20871  87ED
20872  87EE
20873  87EF
20874  87F0
20875  87F1
20876  87F2
20877  87F3
20878  87F4
20879  87F5
20880  87F6
20881  87F7
20882  87F8
20883  87F9
20884  87FA
20885  87FB
20886  87FC
20887  87FD
20888  87FE
20889  87FF
20890  8800
20891  8801
20892  8802
20893  8803
20894  8804
20895  8805
20896  8806
20897  8807
20898  8808
20899  8809
20900  880A
20901  880B
20902  880C
20903  880D
20904  880E
20905  880F
20906  8810
20907  8811
20908  8812
20909  8813
20910  8814
20911  8815
20912  8816
20913  8817
20914  8818
20915  8819
20916  881A
20917  881B
20918  881C
20919  881D
20920  881E
20921  881F
20922  8820
20923  8821
20924  8822
20925  8823
20926  8824
20927  8825
20928  8826
20929  8827
20930  8828
20931  8829
20932  882A
20933  882B
20934  882C
20935  882D
20936  882E
20937  882F
20938  8830
20939  8831
20940  8832
20941  8833
20942  8834
20943  8835
20944  8836
20945  8837
20946  8838
20947  8839
20948  883A
20949  883B
20950  883C
20951  883D
20952  883E
20953  883F
20954  8840
20955  8841
20956  8842
20957  8843
20958  8844
20959  8845
20960  8846
20961  8847
20962  8848
20963  8849
20964  884A
20965  884B
20966  884C
20967  884D
20968  884E
20969  884F
20970  8850
20971  8851
20972  8852
20973  8853
20974  8854
20975  8855
20976  8856
20977  8857
20978  8858
20979  8859
20980  885A
20981  885B
20982  885C
20983  885D
20984  885E
20985  885F
20986  8860
20987  8861
20988  8862
20989  8863
20990  8864
20991  8865
20992  8866
20993  8867
20994  8868
20995  8869
20996  886A
20997  886B
20998  886C
20999  886D
21000  886E
21001  886F
21002  8870
21003  8871
21004  8872
21005  8873
21006  8874
21007  8875
21008  8876
21009  8877
21010  8878
21011  8879
21012  887A
21013  887B
21014  887C
21015  887D
21016  887E
21017  887F
21018  8880
21019  8881
21020  8882
21021  8883
21022  8884
21023  8885
21024  8886
21025  8887
21026  8888
21027  8889
21028  888A
21029  888B
21030  888C
21031  888D
21032  888E
21033  888F
21034  8890
21035  8891
21036  8892
21037  8893
21038  8894
21039  8895
21040  8896
21041  8897
21042  8898
21043  8899
21044  889A
21045  889B
21046  889C
21047  889D
21048  889E
21049  889F
21050  88A0
21051  88A1
21052  88A2
21053  88A3
21054  88A4
21055  88A5
21056  88A6
21057  88A7
21058  88A8
21059  88A9
21060  88AA
21061  88AB
21062  88AC
21063  88AD
21064  88AE
21065  88AF
21066  88B0
21067  88B1
21068  88B2
21069  88B3
21070  88B4
21071  88B5
21072  88B6
21073  88B7
21074  88B8
21075  88B9
21076  88BA
21077  88BB
21078  88BC
21079  88BD
21080  88BE
21081  88BF
21082  88C0
21083  88C1
21084  88C2
21085  88C3
21086  88C4
21087  88C5
21088  88C6
21089  88C7
21090  88C8
21091  88C9
21092  88CA
21093  88CB
21094  88CC
21095  88CD
21096  88CE
21097  88CF
21098  88D0
21099  88D1
21100  88D2
21101  88D3
21102  88D4
21103  88D5
21104  88D6
21105  88D7
21106  88D8
21107  88D9
21108  88DA
21109  88DB
21110  88DC
21111  88DD
21112  88DE
21113  88DF
21114  88E0
21115  88E1
21116  88E2
21117  88E3
21118  88E4
21119  88E5
21120  88E6
21121  88E7
21122  88E8
21123  88E9
21124  88EA
21125  88EB
21126  88EC
21127  88ED
21128  88EE
21129  88EF
21130  88F0
21131  88F1
21132  88F2
21133  88F3
21134  88F4
21135  88F5
21136  88F6
21137  88F7
21138  88F8
21139  88F9
21140  88FA
21141  88FB
21142  88FC
21143  88FD
21144  88FE
21145  88FF
21146  8900
21147  8901
21148  8902
21149  8903
21150  8904
21151  8905
21152  8906
21153  8907
21154  8908
21155  8909
21156  890A
21157  890B
21158  890C
21159  890D
21160  890E
21161  890F
21162  8910
21163  8911
21164  8912
21165  8913
21166  8914
21167  8915
21168  8916
21169  8917
21170  8918
21171  8919
21172  891A
21173  891B
21174  891C
21175  891D
21176  891E
21177  891F
21178  8920
21179  8921
21180  8922
21181  8923
21182  8924
21183  8925
21184  8926
21185  8927
21186  8928
21187  8929
21188  892A
21189  892B
21190  892C
21191  892D
21192  892E
21193  892F
21194  8930
21195  8931
21196  8932
21197  8933
21198  8934
21199  8935
21200  8936
21201  8937
21202  8938
21203  8939
21204  893A
21205  893B
21206  893C
21207  893D
21208  893E
21209  893F
21210  8940
21211  8941
21212  8942
21213  8943
21214  8944
21215  8945
21216  8946
21217  8947
21218  8948
21219  8949
21220  894A
21221  894B
21222  894C
21223  894D
21224  894E
21225  894F
21226  8950
21227  8951
21228  8952
21229  8953
21230  8954
21231  8955
21232  8956
21233  8957
21234  8958
21235  8959
21236  895A
21237  895B
21238  895C
21239  895D
21240  895E
21241  895F
21242  8960
21243  8961
21244  8962
21245  8963
21246  8964
21247  8965
21248  8966
21249  8967
21250  8968
21251  8969
21252  896A
21253  896B
21254  896C
21255  896D
21256  896E
21257  896F
21258  8970
21259  8971
21260  8972
21261  8973
21262  8974
21263  8975
21264  8976
21265  8977
21266  8978
21267  8979
21268  897A
21269  897B
21270  897C
21271  897D
21272  897E
21273  897F
21274  8980
21275  8981
21276  8982
21277  8983
21278  8984
21279  8985
21280  8986
21281  8987
21282  8988
21283  8989
21284  898A
21285  898B
21286  898C
21287  898D
21288  898E
21289  898F
21290  8990
21291  8991
21292  8992
21293  8993
21294  8994
21295  8995
21296  8996
21297  8997
21298  8998
21299  8999
21300  899A
21301  899B
21302  899C
21303  899D
21304  899E
21305  899F
21306  89A0
21307  89A1
21308  89A2
21309  89A3
21310  89A4
21311  89A5
21312  89A6
21313  89A7
21314  89A8
21315  89A9
21316  89AA
21317  89AB
21318  89AC
21319  89AD
21320  89AE
21321  89AF
21322  89B0
21323  89B1
21324  89B2
21325  89B3
21326  89B4
21327  89B5
21328  89B6
21329  89B7
21330  89B8
21331  89B9
21332  89BA
21333  89BB
21334  89BC
21335  89BD
21336  89BE
21337  89BF
21338  89C0
21339  89C1
21340  89C2
21341  89C3
21342  89C4
21343  89C5
21344  89C6
21345  89C7
21346  89C8
21347  89C9
21348  89CA
21349  89CB
21350  89CC
21351  89CD
21352  89CE
21353  89CF
21354  89D0
21355  89D1
21356  89D2
21357  89D3
21358  89D4
21359  89D5
21360  89D6
21361  89D7
21362  89D8
21363  89D9
21364  89DA
21365  89DB
21366  89DC
21367  89DD
21368  89DE
21369  89DF
21370  89E0
21371  89E1
21372  89E2
21373  89E3
21374  89E4
21375  89E5
21376  89E6
21377  89E7
21378  89E8
21379  89E9
21380  89EA
21381  89EB
21382  89EC
21383  89ED
21384  89EE
21385  89EF
21386  89F0
21387  89F1
21388  89F2
21389  89F3
21390  89F4
21391  89F5
21392  89F6
21393  89F7
21394  89F8
21395  89F9
21396  89FA
21397  89FB
21398  89FC
21399  89FD
21400  89FE
21401  89FF
21402  8A00
21403  8A01
21404  8A02
21405  8A03
21406  8A04
21407  8A05
21408  8A06
21409  8A07
21410  8A08
21411  8A09
21412  8A0A
21413  8A0B
21414  8A0C
21415  8A0D
21416  8A0E
21417  8A0F
21418  8A10
21419  8A11
21420  8A12
21421  8A13
21422  8A14
21423  8A15
21424  8A16
21425  8A17
21426  8A18
21427  8A19
21428  8A1A
21429  8A1B
21430  8A1C
21431  8A1D
21432  8A1E
21433  8A1F
21434  8A20
21435  8A21
21436  8A22
21437  8A23
21438  8A24
21439  8A25
21440  8A26
21441  8A27
21442  8A28
21443  8A29
21444  8A2A
21445  8A2B
21446  8A2C
21447  8A2D
21448  8A2E
21449  8A2F
21450  8A30
21451  8A31
21452  8A32
21453  8A33
21454  8A34
21455  8A35
21456  8A36
21457  8A37
21458  8A38
21459  8A39
21460  8A3A
21461  8A3B
21462  8A3C
21463  8A3D
21464  8A3E
21465  8A3F
21466  8A40
21467  8A41
21468  8A42
21469  8A43
21470  8A44
21471  8A45
21472  8A46
21473  8A47
21474  8A48
21475  8A49
21476  8A4A
21477  8A4B
21478  8A4C
21479  8A4D
21480  8A4E
21481  8A4F
21482  8A50
21483  8A51
21484  8A52
21485  8A53
21486  8A54
21487  8A55
21488  8A56
21489  8A57
21490  8A58
21491  8A59
21492  8A5A
21493  8A5B
21494  8A5C
21495  8A5D
21496  8A5E
21497  8A5F
21498  8A60
21499  8A61
21500  8A62
21501  8A63
21502  8A64
21503  8A65
21504  8A66
21505  8A67
21506  8A68
21507  8A69
21508  8A6A
21509  8A6B
21510  8A6C
21511  8A6D
21512  8A6E
21513  8A6F
21514  8A70
21515  8A71
21516  8A72
21517  8A73
21518  8A74
21519  8A75
21520  8A76
21521  8A77
21522  8A78
21523  8A79
21524  8A7A
21525  8A7B
21526  8A7C
21527  8A7D
21528  8A7E
21529  8A7F
21530  8A80
21531  8A81
21532  8A82
21533  8A83
21534  8A84
21535  8A85
21536  8A86
21537  8A87
21538  8A88
21539  8A89
21540  8A8A
21541  8A8B
21542  8A8C
21543  8A8D
21544  8A8E
21545  8A8F
21546  8A90
21547  8A91
21548  8A92
21549  8A93
21550  8A94
21551  8A95
21552  8A96
21553  8A97
21554  8A98
21555  8A99
21556  8A9A
21557  8A9B
21558  8A9C
21559  8A9D
21560  8A9E
21561  8A9F
21562  8AA0
21563  8AA1
21564  8AA2
21565  8AA3
21566  8AA4
21567  8AA5
21568  8AA6
21569  8AA7
21570  8AA8
21571  8AA9
21572  8AAA
21573  8AAB
21574  8AAC
21575  8AAD
21576  8AAE
21577  8AAF
21578  8AB0
21579  8AB1
21580  8AB2
21581  8AB3
21582  8AB4
21583  8AB5
21584  8AB6
21585  8AB7
21586  8AB8
21587  8AB9
21588  8ABA
21589  8ABB
21590  8ABC
21591  8ABD
21592  8ABE
21593  8ABF
21594  8AC0
21595  8AC1
21596  8AC2
21597  8AC3
21598  8AC4
21599  8AC5
21600  8AC6
21601  8AC7
21602  8AC8
21603  8AC9
21604  8ACA
21605  8ACB
21606  8ACC
21607  8ACD
21608  8ACE
21609  8ACF
21610  8AD0
21611  8AD1
21612  8AD2
21613  8AD3
21614  8AD4
21615  8AD5
21616  8AD6
21617  8AD7
21618  8AD8
21619  8AD9
21620  8ADA
21621  8ADB
21622  8ADC
21623  8ADD
21624  8ADE
21625  8ADF
21626  8AE0
21627  8AE1
21628  8AE2
21629  8AE3
21630  8AE4
21631  8AE5
21632  8AE6
21633  8AE7
21634  8AE8
21635  8AE9
21636  8AEA
21637  8AEB
21638  8AEC
21639  8AED
21640  8AEE
21641  8AEF
21642  8AF0
21643  8AF1
21644  8AF2
21645  8AF3
21646  8AF4
21647  8AF5
21648  8AF6
21649  8AF7
21650  8AF8
21651  8AF9
21652  8AFA
21653  8AFB
21654  8AFC
21655  8AFD
21656  8AFE
21657  8AFF
21658  8B00
21659  8B01
21660  8B02
21661  8B03
21662  8B04
21663  8B05
21664  8B06
21665  8B07
21666  8B08
21667  8B09
21668  8B0A
21669  8B0B
21670  8B0C
21671  8B0D
21672  8B0E
21673  8B0F
21674  8B10
21675  8B11
21676  8B12
21677  8B13
21678  8B14
21679  8B15
21680  8B16
21681  8B17
21682  8B18
21683  8B19
21684  8B1A
21685  8B1B
21686  8B1C
21687  8B1D
21688  8B1E
21689  8B1F
21690  8B20
21691  8B21
21692  8B22
21693  8B23
21694  8B24
21695  8B25
21696  8B26
21697  8B27
21698  8B28
21699  8B29
21700  8B2A
21701  8B2B
21702  8B2C
21703  8B2D
21704  8B2E
21705  8B2F
21706  8B30
21707  8B31
21708  8B32
21709  8B33
21710  8B34
21711  8B35
21712  8B36
21713  8B37
21714  8B38
21715  8B39
21716  8B3A
21717  8B3B
21718  8B3C
21719  8B3D
21720  8B3E
21721  8B3F
21722  8B40
21723  8B41
21724  8B42
21725  8B43
21726  8B44
21727  8B45
21728  8B46
21729  8B47
21730  8B48
21731  8B49
21732  8B4A
21733  8B4B
21734  8B4C
21735  8B4D
21736  8B4E
21737  8B4F
21738  8B50
21739  8B51
21740  8B52
21741  8B53
21742  8B54
21743  8B55
21744  8B56
21745  8B57
21746  8B58
21747  8B59
21748  8B5A
21749  8B5B
21750  8B5C
21751  8B5D
21752  8B5E
21753  8B5F
21754  8B60
21755  8B61
21756  8B62
21757  8B63
21758  8B64
21759  8B65
21760  8B66
21761  8B67
21762  8B68
21763  8B69
21764  8B6A
21765  8B6B
21766  8B6C
21767  8B6D
21768  8B6E
21769  8B6F
21770  8B70
21771  8B71
21772  8B72
21773  8B73
21774  8B74
21775  8B75
21776  8B76
21777  8B77
21778  8B78
21779  8B79
21780  8B7A
21781  8B7B
21782  8B7C
21783  8B7D
21784  8B7E
21785  8B7F
21786  8B80
21787  8B81
21788  8B82
21789  8B83
21790  8B84
21791  8B85
21792  8B86
21793  8B87
21794  8B88
21795  8B89
21796  8B8A
21797  8B8B
21798  8B8C
21799  8B8D
21800  8B8E
21801  8B8F
21802  8B90
21803  8B91
21804  8B92
21805  8B93
21806  8B94
21807  8B95
21808  8B96
21809  8B97
21810  8B98
21811  8B99
21812  8B9A
21813  8B9B
21814  8B9C
21815  8B9D
21816  8B9E
21817  8B9F
21818  8BA0
21819  8BA1
21820  8BA2
21821  8BA3
21822  8BA4
21823  8BA5
21824  8BA6
21825  8BA7
21826  8BA8
21827  8BA9
21828  8BAA
21829  8BAB
21830  8BAC
21831  8BAD
21832  8BAE
21833  8BAF
21834  8BB0
21835  8BB1
21836  8BB2
21837  8BB3
21838  8BB4
21839  8BB5
21840  8BB6
21841  8BB7
21842  8BB8
21843  8BB9
21844  8BBA
21845  8BBB
21846  8BBC
21847  8BBD
21848  8BBE
21849  8BBF
21850  8BC0
21851  8BC1
21852  8BC2
21853  8BC3
21854  8BC4
21855  8BC5
21856  8BC6
21857  8BC7
21858  8BC8
21859  8BC9
21860  8BCA
21861  8BCB
21862  8BCC
21863  8BCD
21864  8BCE
21865  8BCF
21866  8BD0
21867  8BD1
21868  8BD2
21869  8BD3
21870  8BD4
21871  8BD5
21872  8BD6
21873  8BD7
21874  8BD8
21875  8BD9
21876  8BDA
21877  8BDB
21878  8BDC
21879  8BDD
21880  8BDE
21881  8BDF
21882  8BE0
21883  8BE1
21884  8BE2
21885  8BE3
21886  8BE4
21887  8BE5
21888  8BE6
21889  8BE7
21890  8BE8
21891  8BE9
21892  8BEA
21893  8BEB
21894  8BEC
21895  8BED
21896  8BEE
21897  8BEF
21898  8BF0
21899  8BF1
21900  8BF2
21901  8BF3
21902  8BF4
21903  8BF5
21904  8BF6
21905  8BF7
21906  8BF8
21907  8BF9
21908  8BFA
21909  8BFB
21910  8BFC
21911  8BFD
21912  8BFE
21913  8BFF
21914  8C00
21915  8C01
21916  8C02
21917  8C03
21918  8C04
21919  8C05
21920  8C06
21921  8C07
21922  8C08
21923  8C09
21924  8C0A
21925  8C0B
21926  8C0C
21927  8C0D
21928  8C0E
21929  8C0F
21930  8C10
21931  8C11
21932  8C12
21933  8C13
21934  8C14
21935  8C15
21936  8C16
21937  8C17
21938  8C18
21939  8C19
21940  8C1A
21941  8C1B
21942  8C1C
21943  8C1D
21944  8C1E
21945  8C1F
21946  8C20
21947  8C21
21948  8C22
21949  8C23
21950  8C24
21951  8C25
21952  8C26
21953  8C27
21954  8C28
21955  8C29
21956  8C2A
21957  8C2B
21958  8C2C
21959  8C2D
21960  8C2E
21961  8C2F
21962  8C30
21963  8C31
21964  8C32
21965  8C33
21966  8C34
21967  8C35
21968  8C36
21969  8C37
21970  8C38
21971  8C39
21972  8C3A
21973  8C3B
21974  8C3C
21975  8C3D
21976  8C3E
21977  8C3F
21978  8C40
21979  8C41
21980  8C42
21981  8C43
21982  8C44
21983  8C45
21984  8C46
21985  8C47
21986  8C48
21987  8C49
21988  8C4A
21989  8C4B
21990  8C4C
21991  8C4D
21992  8C4E
21993  8C4F
21994  8C50
21995  8C51
21996  8C52
21997  8C53
21998  8C54
21999  8C55
22000  8C56
22001  8C57
22002  8C58
22003  8C59
22004  8C5A
22005  8C5B
22006  8C5C
22007  8C5D
22008  8C5E
22009  8C5F
22010  8C60
22011  8C61
22012  8C62
22013  8C63
22014  8C64
22015  8C65
22016  8C66
22017  8C67
22018  8C68
22019  8C69
22020  8C6A
22021  8C6B
22022  8C6C
22023  8C6D
22024  8C6E
22025  8C6F
22026  8C70
22027  8C71
22028  8C72
22029  8C73
22030  8C74
22031  8C75
22032  8C76
22033  8C77
22034  8C78
22035  8C79
22036  8C7A
22037  8C7B
22038  8C7C
22039  8C7D
22040  8C7E
22041  8C7F
22042  8C80
22043  8C81
22044  8C82
22045  8C83
22046  8C84
22047  8C85
22048  8C86
22049  8C87
22050  8C88
22051  8C89
22052  8C8A
22053  8C8B
22054  8C8C
22055  8C8D
22056  8C8E
22057  8C8F
22058  8C90
22059  8C91
22060  8C92
22061  8C93
22062  8C94
22063  8C95
22064  8C96
22065  8C97
22066  8C98
22067  8C99
22068  8C9A
22069  8C9B
22070  8C9C
22071  8C9D
22072  8C9E
22073  8C9F
22074  8CA0
22075  8CA1
22076  8CA2
22077  8CA3
22078  8CA4
22079  8CA5
22080  8CA6
22081  8CA7
22082  8CA8
22083  8CA9
22084  8CAA
22085  8CAB
22086  8CAC
22087  8CAD
22088  8CAE
22089  8CAF
22090  8CB0
22091  8CB1
22092  8CB2
22093  8CB3
22094  8CB4
22095  8CB5
22096  8CB6
22097  8CB7
22098  8CB8
22099  8CB9
22100  8CBA
22101  8CBB
22102  8CBC
22103  8CBD
22104  8CBE
22105  8CBF
22106  8CC0
22107  8CC1
22108  8CC2
22109  8CC3
22110  8CC4
22111  8CC5
22112  8CC6
22113  8CC7
22114  8CC8
22115  8CC9
22116  8CCA
22117  8CCB
22118  8CCC
22119  8CCD
22120  8CCE
22121  8CCF
22122  8CD0
22123  8CD1
22124  8CD2
22125  8CD3
22126  8CD4
22127  8CD5
22128  8CD6
22129  8CD7
22130  8CD8
22131  8CD9
22132  8CDA
22133  8CDB
22134  8CDC
22135  8CDD
22136  8CDE
22137  8CDF
22138  8CE0
22139  8CE1
22140  8CE2
22141  8CE3
22142  8CE4
22143  8CE5
22144  8CE6
22145  8CE7
22146  8CE8
22147  8CE9
22148  8CEA
22149  8CEB
22150  8CEC
22151  8CED
22152  8CEE
22153  8CEF
22154  8CF0
22155  8CF1
22156  8CF2
22157  8CF3
22158  8CF4
22159  8CF5
22160  8CF6
22161  8CF7
22162  8CF8
22163  8CF9
22164  8CFA
22165  8CFB
22166  8CFC
22167  8CFD
22168  8CFE
22169  8CFF
22170  8D00
22171  8D01
22172  8D02
22173  8D03
22174  8D04
22175  8D05
22176  8D06
22177  8D07
22178  8D08
22179  8D09
22180  8D0A
22181  8D0B
22182  8D0C
22183  8D0D
22184  8D0E
22185  8D0F
22186  8D10
22187  8D11
22188  8D12
22189  8D13
22190  8D14
22191  8D15
22192  8D16
22193  8D17
22194  8D18
22195  8D19
22196  8D1A
22197  8D1B
22198  8D1C
22199  8D1D
22200  8D1E
22201  8D1F
22202  8D20
22203  8D21
22204  8D22
22205  8D23
22206  8D24
22207  8D25
22208  8D26
22209  8D27
22210  8D28
22211  8D29
22212  8D2A
22213  8D2B
22214  8D2C
22215  8D2D
22216  8D2E
22217  8D2F
22218  8D30
22219  8D31
22220  8D32
22221  8D33
22222  8D34
22223  8D35
22224  8D36
22225  8D37
22226  8D38
22227  8D39
22228  8D3A
22229  8D3B
22230  8D3C
22231  8D3D
22232  8D3E
22233  8D3F
22234  8D40
22235  8D41
22236  8D42
22237  8D43
22238  8D44
22239  8D45
22240  8D46
22241  8D47
22242  8D48
22243  8D49
22244  8D4A
22245  8D4B
22246  8D4C
22247  8D4D
22248  8D4E
22249  8D4F
22250  8D50
22251  8D51
22252  8D52
22253  8D53
22254  8D54
22255  8D55
22256  8D56
22257  8D57
22258  8D58
22259  8D59
22260  8D5A
22261  8D5B
22262  8D5C
22263  8D5D
22264  8D5E
22265  8D5F
22266  8D60
22267  8D61
22268  8D62
22269  8D63
22270  8D64
22271  8D65
22272  8D66
22273  8D67
22274  8D68
22275  8D69
22276  8D6A
22277  8D6B
22278  8D6C
22279  8D6D
22280  8D6E
22281  8D6F
22282  8D70
22283  8D71
22284  8D72
22285  8D73
22286  8D74
22287  8D75
22288  8D76
22289  8D77
22290  8D78
22291  8D79
22292  8D7A
22293  8D7B
22294  8D7C
22295  8D7D
22296  8D7E
22297  8D7F
22298  8D80
22299  8D81
22300  8D82
22301  8D83
22302  8D84
22303  8D85
22304  8D86
22305  8D87
22306  8D88
22307  8D89
22308  8D8A
22309  8D8B
22310  8D8C
22311  8D8D
22312  8D8E
22313  8D8F
22314  8D90
22315  8D91
22316  8D92
22317  8D93
22318  8D94
22319  8D95
22320  8D96
22321  8D97
22322  8D98
22323  8D99
22324  8D9A
22325  8D9B
22326  8D9C
22327  8D9D
22328  8D9E
22329  8D9F
22330  8DA0
22331  8DA1
22332  8DA2
22333  8DA3
22334  8DA4
22335  8DA5
22336  8DA6
22337  8DA7
22338  8DA8
22339  8DA9
22340  8DAA
22341  8DAB
22342  8DAC
22343  8DAD
22344  8DAE
22345  8DAF
22346  8DB0
22347  8DB1
22348  8DB2
22349  8DB3
22350  8DB4
22351  8DB5
22352  8DB6
22353  8DB7
22354  8DB8
22355  8DB9
22356  8DBA
22357  8DBB
22358  8DBC
22359  8DBD
22360  8DBE
22361  8DBF
22362  8DC0
22363  8DC1
22364  8DC2
22365  8DC3
22366  8DC4
22367  8DC5
22368  8DC6
22369  8DC7
22370  8DC8
22371  8DC9
22372  8DCA
22373  8DCB
22374  8DCC
22375  8DCD
22376  8DCE
22377  8DCF
22378  8DD0
22379  8DD1
22380  8DD2
22381  8DD3
22382  8DD4
22383  8DD5
22384  8DD6
22385  8DD7
22386  8DD8
22387  8DD9
22388  8DDA
22389  8DDB
22390  8DDC
22391  8DDD
22392  8DDE
22393  8DDF
22394  8DE0
22395  8DE1
22396  8DE2
22397  8DE3
22398  8DE4
22399  8DE5
22400  8DE6
22401  8DE7
22402  8DE8
22403  8DE9
22404  8DEA
22405  8DEB
22406  8DEC
22407  8DED
22408  8DEE
22409  8DEF
22410  8DF0
22411  8DF1
22412  8DF2
22413  8DF3
22414  8DF4
22415  8DF5
22416  8DF6
22417  8DF7
22418  8DF8
22419  8DF9
22420  8DFA
22421  8DFB
22422  8DFC
22423  8DFD
22424  8DFE
22425  8DFF
22426  8E00
22427  8E01
22428  8E02
22429  8E03
22430  8E04
22431  8E05
22432  8E06
22433  8E07
22434  8E08
22435  8E09
22436  8E0A
22437  8E0B
22438  8E0C
22439  8E0D
22440  8E0E
22441  8E0F
22442  8E10
22443  8E11
22444  8E12
22445  8E13
22446  8E14
22447  8E15
22448  8E16
22449  8E17
22450  8E18
22451  8E19
22452  8E1A
22453  8E1B
22454  8E1C
22455  8E1D
22456  8E1E
22457  8E1F
22458  8E20
22459  8E21
22460  8E22
22461  8E23
22462  8E24
22463  8E25
22464  8E26
22465  8E27
22466  8E28
22467  8E29
22468  8E2A
22469  8E2B
22470  8E2C
22471  8E2D
22472  8E2E
22473  8E2F
22474  8E30
22475  8E31
22476  8E32
22477  8E33
22478  8E34
22479  8E35
22480  8E36
22481  8E37
22482  8E38
22483  8E39
22484  8E3A
22485  8E3B
22486  8E3C
22487  8E3D
22488  8E3E
22489  8E3F
22490  8E40
22491  8E41
22492  8E42
22493  8E43
22494  8E44
22495  8E45
22496  8E46
22497  8E47
22498  8E48
22499  8E49
22500  8E4A
22501  8E4B
22502  8E4C
22503  8E4D
22504  8E4E
22505  8E4F
22506  8E50
22507  8E51
22508  8E52
22509  8E53
22510  8E54
22511  8E55
22512  8E56
22513  8E57
22514  8E58
22515  8E59
22516  8E5A
22517  8E5B
22518  8E5C
22519  8E5D
22520  8E5E
22521  8E5F
22522  8E60
22523  8E61
22524  8E62
22525  8E63
22526  8E64
22527  8E65
22528  8E66
22529  8E67
22530  8E68
22531  8E69
22532  8E6A
22533  8E6B
22534  8E6C
22535  8E6D
22536  8E6E
22537  8E6F
22538  8E70
22539  8E71
22540  8E72
22541  8E73
22542  8E74
22543  8E75
22544  8E76
22545  8E77
22546  8E78
22547  8E79
22548  8E7A
22549  8E7B
22550  8E7C
22551  8E7D
22552  8E7E
22553  8E7F
22554  8E80
22555  8E81
22556  8E82
22557  8E83
22558  8E84
22559  8E85
22560  8E86
22561  8E87
22562  8E88
22563  8E89
22564  8E8A
22565  8E8B
22566  8E8C
22567  8E8D
22568  8E8E
22569  8E8F
22570  8E90
22571  8E91
22572  8E92
22573  8E93
22574  8E94
22575  8E95
22576  8E96
22577  8E97
22578  8E98
22579  8E99
22580  8E9A
22581  8E9B
22582  8E9C
22583  8E9D
22584  8E9E
22585  8E9F
22586  8EA0
22587  8EA1
22588  8EA2
22589  8EA3
22590  8EA4
22591  8EA5
22592  8EA6
22593  8EA7
22594  8EA8
22595  8EA9
22596  8EAA
22597  8EAB
22598  8EAC
22599  8EAD
22600  8EAE
22601  8EAF
22602  8EB0
22603  8EB1
22604  8EB2
22605  8EB3
22606  8EB4
22607  8EB5
22608  8EB6
22609  8EB7
22610  8EB8
22611  8EB9
22612  8EBA
22613  8EBB
22614  8EBC
22615  8EBD
22616  8EBE
22617  8EBF
22618  8EC0
22619  8EC1
22620  8EC2
22621  8EC3
22622  8EC4
22623  8EC5
22624  8EC6
22625  8EC7
22626  8EC8
22627  8EC9
22628  8ECA
22629  8ECB
22630  8ECC
22631  8ECD
22632  8ECE
22633  8ECF
22634  8ED0
22635  8ED1
22636  8ED2
22637  8ED3
22638  8ED4
22639  8ED5
22640  8ED6
22641  8ED7
22642  8ED8
22643  8ED9
22644  8EDA
22645  8EDB
22646  8EDC
22647  8EDD
22648  8EDE
22649  8EDF
22650  8EE0
22651  8EE1
22652  8EE2
22653  8EE3
22654  8EE4
22655  8EE5
22656  8EE6
22657  8EE7
22658  8EE8
22659  8EE9
22660  8EEA
22661  8EEB
22662  8EEC
22663  8EED
22664  8EEE
22665  8EEF
22666  8EF0
22667  8EF1
22668  8EF2
22669  8EF3
22670  8EF4
22671  8EF5
22672  8EF6
22673  8EF7
22674  8EF8
22675  8EF9
22676  8EFA
22677  8EFB
22678  8EFC
22679  8EFD
22680  8EFE
22681  8EFF
22682  8F00
22683  8F01
22684  8F02
22685  8F03
22686  8F04
22687  8F05
22688  8F06
22689  8F07
22690  8F08
22691  8F09
22692  8F0A
22693  8F0B
22694  8F0C
22695  8F0D
22696  8F0E
22697  8F0F
22698  8F10
22699  8F11
22700  8F12
22701  8F13
22702  8F14
22703  8F15
22704  8F16
22705  8F17
22706  8F18
22707  8F19
22708  8F1A
22709  8F1B
22710  8F1C
22711  8F1D
22712  8F1E
22713  8F1F
22714  8F20
22715  8F21
22716  8F22
22717  8F23
22718  8F24
22719  8F25
22720  8F26
22721  8F27
22722  8F28
22723  8F29
22724  8F2A
22725  8F2B
22726  8F2C
22727  8F2D
22728  8F2E
22729  8F2F
22730  8F30
22731  8F31
22732  8F32
22733  8F33
22734  8F34
22735  8F35
22736  8F36
22737  8F37
22738  8F38
22739  8F39
22740  8F3A
22741  8F3B
22742  8F3C
22743  8F3D
22744  8F3E
22745  8F3F
22746  8F40
22747  8F41
22748  8F42
22749  8F43
22750  8F44
22751  8F45
22752  8F46
22753  8F47
22754  8F48
22755  8F49
22756  8F4A
22757  8F4B
22758  8F4C
22759  8F4D
22760  8F4E
22761  8F4F
22762  8F50
22763  8F51
22764  8F52
22765  8F53
22766  8F54
22767  8F55
22768  8F56
22769  8F57
22770  8F58
22771  8F59
22772  8F5A
22773  8F5B
22774  8F5C
22775  8F5D
22776  8F5E
22777  8F5F
22778  8F60
22779  8F61
22780  8F62
22781  8F63
22782  8F64
22783  8F65
22784  8F66
22785  8F67
22786  8F68
22787  8F69
22788  8F6A
22789  8F6B
22790  8F6C
22791  8F6D
22792  8F6E
22793  8F6F
22794  8F70
22795  8F71
22796  8F72
22797  8F73
22798  8F74
22799  8F75
22800  8F76
22801  8F77
22802  8F78
22803  8F79
22804  8F7A
22805  8F7B
22806  8F7C
22807  8F7D
22808  8F7E
22809  8F7F
22810  8F80
22811  8F81
22812  8F82
22813  8F83
22814  8F84
22815  8F85
22816  8F86
22817  8F87
22818  8F88
22819  8F89
22820  8F8A
22821  8F8B
22822  8F8C
22823  8F8D
22824  8F8E
22825  8F8F
22826  8F90
22827  8F91
22828  8F92
22829  8F93
22830  8F94
22831  8F95
22832  8F96
22833  8F97
22834  8F98
22835  8F99
22836  8F9A
22837  8F9B
22838  8F9C
22839  8F9D
22840  8F9E
22841  8F9F
22842  8FA0
22843  8FA1
22844  8FA2
22845  8FA3
22846  8FA4
22847  8FA5
22848  8FA6
22849  8FA7
22850  8FA8
22851  8FA9
22852  8FAA
22853  8FAB
22854  8FAC
22855  8FAD
22856  8FAE
22857  8FAF
22858  8FB0
22859  8FB1
22860  8FB2
22861  8FB3
22862  8FB4
22863  8FB5
22864  8FB6
22865  8FB7
22866  8FB8
22867  8FB9
22868  8FBA
22869  8FBB
22870  8FBC
22871  8FBD
22872  8FBE
22873  8FBF
22874  8FC0
22875  8FC1
22876  8FC2
22877  8FC3
22878  8FC4
22879  8FC5
22880  8FC6
22881  8FC7
22882  8FC8
22883  8FC9
22884  8FCA
22885  8FCB
22886  8FCC
22887  8FCD
22888  8FCE
22889  8FCF
22890  8FD0
22891  8FD1
22892  8FD2
22893  8FD3
22894  8FD4
22895  8FD5
22896  8FD6
22897  8FD7
22898  8FD8
22899  8FD9
22900  8FDA
22901  8FDB
22902  8FDC
22903  8FDD
22904  8FDE
22905  8FDF
22906  8FE0
22907  8FE1
22908  8FE2
22909  8FE3
22910  8FE4
22911  8FE5
22912  8FE6
22913  8FE7
22914  8FE8
22915  8FE9
22916  8FEA
22917  8FEB
22918  8FEC
22919  8FED
22920  8FEE
22921  8FEF
22922  8FF0
22923  8FF1
22924  8FF2
22925  8FF3
22926  8FF4
22927  8FF5
22928  8FF6
22929  8FF7
22930  8FF8
22931  8FF9
22932  8FFA
22933  8FFB
22934  8FFC
22935  8FFD
22936  8FFE
22937  8FFF
22938  9000
22939  9001
22940  9002
22941  9003
22942  9004
22943  9005
22944  9006
22945  9007
22946  9008
22947  9009
22948  900A
22949  900B
22950  900C
22951  900D
22952  900E
22953  900F
22954  9010
22955  9011
22956  9012
22957  9013
22958  9014
22959  9015
22960  9016
22961  9017
22962  9018
22963  9019
22964  901A
22965  901B
22966  901C
22967  901D
22968  901E
22969  901F
22970  9020
22971  9021
22972  9022
22973  9023
22974  9024
22975  9025
22976  9026
22977  9027
22978  9028
22979  9029
22980  902A
22981  902B
22982  902C
22983  902D
22984  902E
22985  902F
22986  9030
22987  9031
22988  9032
22989  9033
22990  9034
22991  9035
22992  9036
22993  9037
22994  9038
22995  9039
22996  903A
22997  903B
22998  903C
22999  903D
23000  903E
23001  903F
23002  9040
23003  9041
23004  9042
23005  9043
23006  9044
23007  9045
23008  9046
23009  9047
23010  9048
23011  9049
23012  904A
23013  904B
23014  904C
23015  904D
23016  904E
23017  904F
23018  9050
23019  9051
23020  9052
23021  9053
23022  9054
23023  9055
23024  9056
23025  9057
23026  9058
23027  9059
23028  905A
23029  905B
23030  905C
23031  905D
23032  905E
23033  905F
23034  9060
23035  9061
23036  9062
23037  9063
23038  9064
23039  9065
23040  9066
23041  9067
23042  9068
23043  9069
23044  906A
23045  906B
23046  906C
23047  906D
23048  906E
23049  906F
23050  9070
23051  9071
23052  9072
23053  9073
23054  9074
23055  9075
23056  9076
23057  9077
23058  9078
23059  9079
23060  907A
23061  907B
23062  907C
23063  907D
23064  907E
23065  907F
23066  9080
23067  9081
23068  9082
23069  9083
23070  9084
23071  9085
23072  9086
23073  9087
23074  9088
23075  9089
23076  908A
23077  908B
23078  908C
23079  908D
23080  908E
23081  908F
23082  9090
23083  9091
23084  9092
23085  9093
23086  9094
23087  9095
23088  9096
23089  9097
23090  9098
23091  9099
23092  909A
23093  909B
23094  909C
23095  909D
23096  909E
23097  909F
23098  90A0
23099  90A1
23100  90A2
23101  90A3
23102  90A4
23103  90A5
23104  90A6
23105  90A7
23106  90A8
23107  90A9
23108  90AA
23109  90AB
23110  90AC
23111  90AD
23112  90AE
23113  90AF
23114  90B0
23115  90B1
23116  90B2
23117  90B3
23118  90B4
23119  90B5
23120  90B6
23121  90B7
23122  90B8
23123  90B9
23124  90BA
23125  90BB
23126  90BC
23127  90BD
23128  90BE
23129  90BF
23130  90C0
23131  90C1
23132  90C2
23133  90C3
23134  90C4
23135  90C5
23136  90C6
23137  90C7
23138  90C8
23139  90C9
23140  90CA
23141  90CB
23142  90CC
23143  90CD
23144  90CE
23145  90CF
23146  90D0
23147  90D1
23148  90D2
23149  90D3
23150  90D4
23151  90D5
23152  90D6
23153  90D7
23154  90D8
23155  90D9
23156  90DA
23157  90DB
23158  90DC
23159  90DD
23160  90DE
23161  90DF
23162  90E0
23163  90E1
23164  90E2
23165  90E3
23166  90E4
23167  90E5
23168  90E6
23169  90E7
23170  90E8
23171  90E9
23172  90EA
23173  90EB
23174  90EC
23175  90ED
23176  90EE
23177  90EF
23178  90F0
23179  90F1
23180  90F2
23181  90F3
23182  90F4
23183  90F5
23184  90F6
23185  90F7
23186  90F8
23187  90F9
23188  90FA
23189  90FB
23190  90FC
23191  90FD
23192  90FE
23193  90FF
23194  9100
23195  9101
23196  9102
23197  9103
23198  9104
23199  9105
23200  9106
23201  9107
23202  9108
23203  9109
23204  910A
23205  910B
23206  910C
23207  910D
23208  910E
23209  910F
23210  9110
23211  9111
23212  9112
23213  9113
23214  9114
23215  9115
23216  9116
23217  9117
23218  9118
23219  9119
23220  911A
23221  911B
23222  911C
23223  911D
23224  911E
23225  911F
23226  9120
23227  9121
23228  9122
23229  9123
23230  9124
23231  9125
23232  9126
23233  9127
23234  9128
23235  9129
23236  912A
23237  912B
23238  912C
23239  912D
23240  912E
23241  912F
23242  9130
23243  9131
23244  9132
23245  9133
23246  9134
23247  9135
23248  9136
23249  9137
23250  9138
23251  9139
23252  913A
23253  913B
23254  913C
23255  913D
23256  913E
23257  913F
23258  9140
23259  9141
23260  9142
23261  9143
23262  9144
23263  9145
23264  9146
23265  9147
23266  9148
23267  9149
23268  914A
23269  914B
23270  914C
23271  914D
23272  914E
23273  914F
23274  9150
23275  9151
23276  9152
23277  9153
23278  9154
23279  9155
23280  9156
23281  9157
23282  9158
23283  9159
23284  915A
23285  915B
23286  915C
23287  915D
23288  915E
23289  915F
23290  9160
23291  9161
23292  9162
23293  9163
23294  9164
23295  9165
23296  9166
23297  9167
23298  9168
23299  9169
23300  916A
23301  916B
23302  916C
23303  916D
23304  916E
23305  916F
23306  9170
23307  9171
23308  9172
23309  9173
23310  9174
23311  9175
23312  9176
23313  9177
23314  9178
23315  9179
23316  917A
23317  917B
23318  917C
23319  917D
23320  917E
23321  917F
23322  9180
23323  9181
23324  9182
23325  9183
23326  9184
23327  9185
23328  9186
23329  9187
23330  9188
23331  9189
23332  918A
23333  918B
23334  918C
23335  918D
23336  918E
23337  918F
23338  9190
23339  9191
23340  9192
23341  9193
23342  9194
23343  9195
23344  9196
23345  9197
23346  9198
23347  9199
23348  919A
23349  919B
23350  919C
23351  919D
23352  919E
23353  919F
23354  91A0
23355  91A1
23356  91A2
23357  91A3
23358  91A4
23359  91A5
23360  91A6
23361  91A7
23362  91A8
23363  91A9
23364  91AA
23365  91AB
23366  91AC
23367  91AD
23368  91AE
23369  91AF
23370  91B0
23371  91B1
23372  91B2
23373  91B3
23374  91B4
23375  91B5
23376  91B6
23377  91B7
23378  91B8
23379  91B9
23380  91BA
23381  91BB
23382  91BC
23383  91BD
23384  91BE
23385  91BF
23386  91C0
23387  91C1
23388  91C2
23389  91C3
23390  91C4
23391  91C5
23392  91C6
23393  91C7
23394  91C8
23395  91C9
23396  91CA
23397  91CB
23398  91CC
23399  91CD
23400  91CE
23401  91CF
23402  91D0
23403  91D1
23404  91D2
23405  91D3
23406  91D4
23407  91D5
23408  91D6
23409  91D7
23410  91D8
23411  91D9
23412  91DA
23413  91DB
23414  91DC
23415  91DD
23416  91DE
23417  91DF
23418  91E0
23419  91E1
23420  91E2
23421  91E3
23422  91E4
23423  91E5
23424  91E6
23425  91E7
23426  91E8
23427  91E9
23428  91EA
23429  91EB
23430  91EC
23431  91ED
23432  91EE
23433  91EF
23434  91F0
23435  91F1
23436  91F2
23437  91F3
23438  91F4
23439  91F5
23440  91F6
23441  91F7
23442  91F8
23443  91F9
23444  91FA
23445  91FB
23446  91FC
23447  91FD
23448  91FE
23449  91FF
23450  9200
23451  9201
23452  9202
23453  9203
23454  9204
23455  9205
23456  9206
23457  9207
23458  9208
23459  9209
23460  920A
23461  920B
23462  920C
23463  920D
23464  920E
23465  920F
23466  9210
23467  9211
23468  9212
23469  9213
23470  9214
23471  9215
23472  9216
23473  9217
23474  9218
23475  9219
23476  921A
23477  921B
23478  921C
23479  921D
23480  921E
23481  921F
23482  9220
23483  9221
23484  9222
23485  9223
23486  9224
23487  9225
23488  9226
23489  9227
23490  9228
23491  9229
23492  922A
23493  922B
23494  922C
23495  922D
23496  922E
23497  922F
23498  9230
23499  9231
23500  9232
23501  9233
23502  9234
23503  9235
23504  9236
23505  9237
23506  9238
23507  9239
23508  923A
23509  923B
23510  923C
23511  923D
23512  923E
23513  923F
23514  9240
23515  9241
23516  9242
23517  9243
23518  9244
23519  9245
23520  9246
23521  9247
23522  9248
23523  9249
23524  924A
23525  924B
23526  924C
23527  924D
23528  924E
23529  924F
23530  9250
23531  9251
23532  9252
23533  9253
23534  9254
23535  9255
23536  9256
23537  9257
23538  9258
23539  9259
23540  925A
23541  925B
23542  925C
23543  925D
23544  925E
23545  925F
23546  9260
23547  9261
23548  9262
23549  9263
23550  9264
23551  9265
23552  9266
23553  9267
23554  9268
23555  9269
23556  926A
23557  926B
23558  926C
23559  926D
23560  926E
23561  926F
23562  9270
23563  9271
23564  9272
23565  9273
23566  9274
23567  9275
23568  9276
23569  9277
23570  9278
23571  9279
23572  927A
23573  927B
23574  927C
23575  927D
23576  927E
23577  927F
23578  9280
23579  9281
23580  9282
23581  9283
23582  9284
23583  9285
23584  9286
23585  9287
23586  9288
23587  9289
23588  928A
23589  928B
23590  928C
23591  928D
23592  928E
23593  928F
23594  9290
23595  9291
23596  9292
23597  9293
23598  9294
23599  9295
23600  9296
23601  9297
23602  9298
23603  9299
23604  929A
23605  929B
23606  929C
23607  929D
23608  929E
23609  929F
23610  92A0
23611  92A1
23612  92A2
23613  92A3
23614  92A4
23615  92A5
23616  92A6
23617  92A7
23618  92A8
23619  92A9
23620  92AA
23621  92AB
23622  92AC
23623  92AD
23624  92AE
23625  92AF
23626  92B0
23627  92B1
23628  92B2
23629  92B3
23630  92B4
23631  92B5
23632  92B6
23633  92B7
23634  92B8
23635  92B9
23636  92BA
23637  92BB
23638  92BC
23639  92BD
23640  92BE
23641  92BF
23642  92C0
23643  92C1
23644  92C2
23645  92C3
23646  92C4
23647  92C5
23648  92C6
23649  92C7
23650  92C8
23651  92C9
23652  92CA
23653  92CB
23654  92CC
23655  92CD
23656  92CE
23657  92CF
23658  92D0
23659  92D1
23660  92D2
23661  92D3
23662  92D4
23663  92D5
23664  92D6
23665  92D7
23666  92D8
23667  92D9
23668  92DA
23669  92DB
23670  92DC
23671  92DD
23672  92DE
23673  92DF
23674  92E0
23675  92E1
23676  92E2
23677  92E3
23678  92E4
23679  92E5
23680  92E6
23681  92E7
23682  92E8
23683  92E9
23684  92EA
23685  92EB
23686  92EC
23687  92ED
23688  92EE
23689  92EF
23690  92F0
23691  92F1
23692  92F2
23693  92F3
23694  92F4
23695  92F5
23696  92F6
23697  92F7
23698  92F8
23699  92F9
23700  92FA
23701  92FB
23702  92FC
23703  92FD
23704  92FE
23705  92FF
23706  9300
23707  9301
23708  9302
23709  9303
23710  9304
23711  9305
23712  9306
23713  9307
23714  9308
23715  9309
23716  930A
23717  930B
23718  930C
23719  930D
23720  930E
23721  930F
23722  9310
23723  9311
23724  9312
23725  9313
23726  9314
23727  9315
23728  9316
23729  9317
23730  9318
23731  9319
23732  931A
23733  931B
23734  931C
23735  931D
23736  931E
23737  931F
23738  9320
23739  9321
23740  9322
23741  9323
23742  9324
23743  9325
23744  9326
23745  9327
23746  9328
23747  9329
23748  932A
23749  932B
23750  932C
23751  932D
23752  932E
23753  932F
23754  9330
23755  9331
23756  9332
23757  9333
23758  9334
23759  9335
23760  9336
23761  9337
23762  9338
23763  9339
23764  933A
23765  933B
23766  933C
23767  933D
23768  933E
23769  933F
23770  9340
23771  9341
23772  9342
23773  9343
23774  9344
23775  9345
23776  9346
23777  9347
23778  9348
23779  9349
23780  934A
23781  934B
23782  934C
23783  934D
23784  934E
23785  934F
23786  9350
23787  9351
23788  9352
23789  9353
23790  9354
23791  9355
23792  9356
23793  9357
23794  9358
23795  9359
23796  935A
23797  935B
23798  935C
23799  935D
23800  935E
23801  935F
23802  9360
23803  9361
23804  9362
23805  9363
23806  9364
23807  9365
23808  9366
23809  9367
23810  9368
23811  9369
23812  936A
23813  936B
23814  936C
23815  936D
23816  936E
23817  936F
23818  9370
23819  9371
23820  9372
23821  9373
23822  9374
23823  9375
23824  9376
23825  9377
23826  9378
23827  9379
23828  937A
23829  937B
23830  937C
23831  937D
23832  937E
23833  937F
23834  9380
23835  9381
23836  9382
23837  9383
23838  9384
23839  9385
23840  9386
23841  9387
23842  9388
23843  9389
23844  938A
23845  938B
23846  938C
23847  938D
23848  938E
23849  938F
23850  9390
23851  9391
23852  9392
23853  9393
23854  9394
23855  9395
23856  9396
23857  9397
23858  9398
23859  9399
23860  939A
23861  939B
23862  939C
23863  939D
23864  939E
23865  939F
23866  93A0
23867  93A1
23868  93A2
23869  93A3
23870  93A4
23871  93A5
23872  93A6
23873  93A7
23874  93A8
23875  93A9
23876  93AA
23877  93AB
23878  93AC
23879  93AD
23880  93AE
23881  93AF
23882  93B0
23883  93B1
23884  93B2
23885  93B3
23886  93B4
23887  93B5
23888  93B6
23889  93B7
23890  93B8
23891  93B9
23892  93BA
23893  93BB
23894  93BC
23895  93BD
23896  93BE
23897  93BF
23898  93C0
23899  93C1
23900  93C2
23901  93C3
23902  93C4
23903  93C5
23904  93C6
23905  93C7
23906  93C8
23907  93C9
23908  93CA
23909  93CB
23910  93CC
23911  93CD
23912  93CE
23913  93CF
23914  93D0
23915  93D1
23916  93D2
23917  93D3
23918  93D4
23919  93D5
23920  93D6
23921  93D7
23922  93D8
23923  93D9
23924  93DA
23925  93DB
23926  93DC
23927  93DD
23928  93DE
23929  93DF
23930  93E0
23931  93E1
23932  93E2
23933  93E3
23934  93E4
23935  93E5
23936  93E6
23937  93E7
23938  93E8
23939  93E9
23940  93EA
23941  93EB
23942  93EC
23943  93ED
23944  93EE
23945  93EF
23946  93F0
23947  93F1
23948  93F2
23949  93F3
23950  93F4
23951  93F5
23952  93F6
23953  93F7
23954  93F8
23955  93F9
23956  93FA
23957  93FB
23958  93FC
23959  93FD
23960  93FE
23961  93FF
23962  9400
23963  9401
23964  9402
23965  9403
23966  9404
23967  9405
23968  9406
23969  9407
23970  9408
23971  9409
23972  940A
23973  940B
23974  940C
23975  940D
23976  940E
23977  940F
23978  9410
23979  9411
23980  9412
23981  9413
23982  9414
23983  9415
23984  9416
23985  9417
23986  9418
23987  9419
23988  941A
23989  941B
23990  941C
23991  941D
23992  941E
23993  941F
23994  9420
23995  9421
23996  9422
23997  9423
23998  9424
23999  9425
24000  9426
24001  9427
24002  9428
24003  9429
24004  942A
24005  942B
24006  942C
24007  942D
24008  942E
24009  942F
24010  9430
24011  9431
24012  9432
24013  9433
24014  9434
24015  9435
24016  9436
24017  9437
24018  9438
24019  9439
24020  943A
24021  943B
24022  943C
24023  943D
24024  943E
24025  943F
24026  9440
24027  9441
24028  9442
24029  9443
24030  9444
24031  9445
24032  9446
24033  9447
24034  9448
24035  9449
24036  944A
24037  944B
24038  944C
24039  944D
24040  944E
24041  944F
24042  9450
24043  9451
24044  9452
24045  9453
24046  9454
24047  9455
24048  9456
24049  9457
24050  9458
24051  9459
24052  945A
24053  945B
24054  945C
24055  945D
24056  945E
24057  945F
24058  9460
24059  9461
24060  9462
24061  9463
24062  9464
24063  9465
24064  9466
24065  9467
24066  9468
24067  9469
24068  946A
24069  946B
24070  946C
24071  946D
24072  946E
24073  946F
24074  9470
24075  9471
24076  9472
24077  9473
24078  9474
24079  9475
24080  9476
24081  9477
24082  9478
24083  9479
24084  947A
24085  947B
24086  947C
24087  947D
24088  947E
24089  947F
24090  9480
24091  9481
24092  9482
24093  9483
24094  9484
24095  9485
24096  9486
24097  9487
24098  9488
24099  9489
24100  948A
24101  948B
24102  948C
24103  948D
24104  948E
24105  948F
24106  9490
24107  9491
24108  9492
24109  9493
24110  9494
24111  9495
24112  9496
24113  9497
24114  9498
24115  9499
24116  949A
24117  949B
24118  949C
24119  949D
24120  949E
24121  949F
24122  94A0
24123  94A1
24124  94A2
24125  94A3
24126  94A4
24127  94A5
24128  94A6
24129  94A7
24130  94A8
24131  94A9
24132  94AA
24133  94AB
24134  94AC
24135  94AD
24136  94AE
24137  94AF
24138  94B0
24139  94B1
24140  94B2
24141  94B3
24142  94B4
24143  94B5
24144  94B6
24145  94B7
24146  94B8
24147  94B9
24148  94BA
24149  94BB
24150  94BC
24151  94BD
24152  94BE
24153  94BF
24154  94C0
24155  94C1
24156  94C2
24157  94C3
24158  94C4
24159  94C5
24160  94C6
24161  94C7
24162  94C8
24163  94C9
24164  94CA
24165  94CB
24166  94CC
24167  94CD
24168  94CE
24169  94CF
24170  94D0
24171  94D1
24172  94D2
24173  94D3
24174  94D4
24175  94D5
24176  94D6
24177  94D7
24178  94D8
24179  94D9
24180  94DA
24181  94DB
24182  94DC
24183  94DD
24184  94DE
24185  94DF
24186  94E0
24187  94E1
24188  94E2
24189  94E3
24190  94E4
24191  94E5
24192  94E6
24193  94E7
24194  94E8
24195  94E9
24196  94EA
24197  94EB
24198  94EC
24199  94ED
24200  94EE
24201  94EF
24202  94F0
24203  94F1
24204  94F2
24205  94F3
24206  94F4
24207  94F5
24208  94F6
24209  94F7
24210  94F8
24211  94F9
24212  94FA
24213  94FB
24214  94FC
24215  94FD
24216  94FE
24217  94FF
24218  9500
24219  9501
24220  9502
24221  9503
24222  9504
24223  9505
24224  9506
24225  9507
24226  9508
24227  9509
24228  950A
24229  950B
24230  950C
24231  950D
24232  950E
24233  950F
24234  9510
24235  9511
24236  9512
24237  9513
24238  9514
24239  9515
24240  9516
24241  9517
24242  9518
24243  9519
24244  951A
24245  951B
24246  951C
24247  951D
24248  951E
24249  951F
24250  9520
24251  9521
24252  9522
24253  9523
24254  9524
24255  9525
24256  9526
24257  9527
24258  9528
24259  9529
24260  952A
24261  952B
24262  952C
24263  952D
24264  952E
24265  952F
24266  9530
24267  9531
24268  9532
24269  9533
24270  9534
24271  9535
24272  9536
24273  9537
24274  9538
24275  9539
24276  953A
24277  953B
24278  953C
24279  953D
24280  953E
24281  953F
24282  9540
24283  9541
24284  9542
24285  9543
24286  9544
24287  9545
24288  9546
24289  9547
24290  9548
24291  9549
24292  954A
24293  954B
24294  954C
24295  954D
24296  954E
24297  954F
24298  9550
24299  9551
24300  9552
24301  9553
24302  9554
24303  9555
24304  9556
24305  9557
24306  9558
24307  9559
24308  955A
24309  955B
24310  955C
24311  955D
24312  955E
24313  955F
24314  9560
24315  9561
24316  9562
24317  9563
24318  9564
24319  9565
24320  9566
24321  9567
24322  9568
24323  9569
24324  956A
24325  956B
24326  956C
24327  956D
24328  956E
24329  956F
24330  9570
24331  9571
24332  9572
24333  9573
24334  9574
24335  9575
24336  9576
24337  9577
24338  9578
24339  9579
24340  957A
24341  957B
24342  957C
24343  957D
24344  957E
24345  957F
24346  9580
24347  9581
24348  9582
24349  9583
24350  9584
24351  9585
24352  9586
24353  9587
24354  9588
24355  9589
24356  958A
24357  958B
24358  958C
24359  958D
24360  958E
24361  958F
24362  9590
24363  9591
24364  9592
24365  9593
24366  9594
24367  9595
24368  9596
24369  9597
24370  9598
24371  9599
24372  959A
24373  959B
24374  959C
24375  959D
24376  959E
24377  959F
24378  95A0
24379  95A1
24380  95A2
24381  95A3
24382  95A4
24383  95A5
24384  95A6
24385  95A7
24386  95A8
24387  95A9
24388  95AA
24389  95AB
24390  95AC
24391  95AD
24392  95AE
24393  95AF
24394  95B0
24395  95B1
24396  95B2
24397  95B3
24398  95B4
24399  95B5
24400  95B6
24401  95B7
24402  95B8
24403  95B9
24404  95BA
24405  95BB
24406  95BC
24407  95BD
24408  95BE
24409  95BF
24410  95C0
24411  95C1
24412  95C2
24413  95C3
24414  95C4
24415  95C5
24416  95C6
24417  95C7
24418  95C8
24419  95C9
24420  95CA
24421  95CB
24422  95CC
24423  95CD
24424  95CE
24425  95CF
24426  95D0
24427  95D1
24428  95D2
24429  95D3
24430  95D4
24431  95D5
24432  95D6
24433  95D7
24434  95D8
24435  95D9
24436  95DA
24437  95DB
24438  95DC
24439  95DD
24440  95DE
24441  95DF
24442  95E0
24443  95E1
24444  95E2
24445  95E3
24446  95E4
24447  95E5
24448  95E6
24449  95E7
24450  95E8
24451  95E9
24452  95EA
24453  95EB
24454  95EC
24455  95ED
24456  95EE
24457  95EF
24458  95F0
24459  95F1
24460  95F2
24461  95F3
24462  95F4
24463  95F5
24464  95F6
24465  95F7
24466  95F8
24467  95F9
24468  95FA
24469  95FB
24470  95FC
24471  95FD
24472  95FE
24473  95FF
24474  9600
24475  9601
24476  9602
24477  9603
24478  9604
24479  9605
24480  9606
24481  9607
24482  9608
24483  9609
24484  960A
24485  960B
24486  960C
24487  960D
24488  960E
24489  960F
24490  9610
24491  9611
24492  9612
24493  9613
24494  9614
24495  9615
24496  9616
24497  9617
24498  9618
24499  9619
24500  961A
24501  961B
24502  961C
24503  961D
24504  961E
24505  961F
24506  9620
24507  9621
24508  9622
24509  9623
24510  9624
24511  9625
24512  9626
24513  9627
24514  9628
24515  9629
24516  962A
24517  962B
24518  962C
24519  962D
24520  962E
24521  962F
24522  9630
24523  9631
24524  9632
24525  9633
24526  9634
24527  9635
24528  9636
24529  9637
24530  9638
24531  9639
24532  963A
24533  963B
24534  963C
24535  963D
24536  963E
24537  963F
24538  9640
24539  9641
24540  9642
24541  9643
24542  9644
24543  9645
24544  9646
24545  9647
24546  9648
24547  9649
24548  964A
24549  964B
24550  964C
24551  964D
24552  964E
24553  964F
24554  9650
24555  9651
24556  9652
24557  9653
24558  9654
24559  9655
24560  9656
24561  9657
24562  9658
24563  9659
24564  965A
24565  965B
24566  965C
24567  965D
24568  965E
24569  965F
24570  9660
24571  9661
24572  9662
24573  9663
24574  9664
24575  9665
24576  9666
24577  9667
24578  9668
24579  9669
24580  966A
24581  966B
24582  966C
24583  966D
24584  966E
24585  966F
24586  9670
24587  9671
24588  9672
24589  9673
24590  9674
24591  9675
24592  9676
24593  9677
24594  9678
24595  9679
24596  967A
24597  967B
24598  967C
24599  967D
24600  967E
24601  967F
24602  9680
24603  9681
24604  9682
24605  9683
24606  9684
24607  9685
24608  9686
24609  9687
24610  9688
24611  9689
24612  968A
24613  968B
24614  968C
24615  968D
24616  968E
24617  968F
24618  9690
24619  9691
24620  9692
24621  9693
24622  9694
24623  9695
24624  9696
24625  9697
24626  9698
24627  9699
24628  969A
24629  969B
24630  969C
24631  969D
24632  969E
24633  969F
24634  96A0
24635  96A1
24636  96A2
24637  96A3
24638  96A4
24639  96A5
24640  96A6
24641  96A7
24642  96A8
24643  96A9
24644  96AA
24645  96AB
24646  96AC
24647  96AD
24648  96AE
24649  96AF
24650  96B0
24651  96B1
24652  96B2
24653  96B3
24654  96B4
24655  96B5
24656  96B6
24657  96B7
24658  96B8
24659  96B9
24660  96BA
24661  96BB
24662  96BC
24663  96BD
24664  96BE
24665  96BF
24666  96C0
24667  96C1
24668  96C2
24669  96C3
24670  96C4
24671  96C5
24672  96C6
24673  96C7
24674  96C8
24675  96C9
24676  96CA
24677  96CB
24678  96CC
24679  96CD
24680  96CE
24681  96CF
24682  96D0
24683  96D1
24684  96D2
24685  96D3
24686  96D4
24687  96D5
24688  96D6
24689  96D7
24690  96D8
24691  96D9
24692  96DA
24693  96DB
24694  96DC
24695  96DD
24696  96DE
24697  96DF
24698  96E0
24699  96E1
24700  96E2
24701  96E3
24702  96E4
24703  96E5
24704  96E6
24705  96E7
24706  96E8
24707  96E9
24708  96EA
24709  96EB
24710  96EC
24711  96ED
24712  96EE
24713  96EF
24714  96F0
24715  96F1
24716  96F2
24717  96F3
24718  96F4
24719  96F5
24720  96F6
24721  96F7
24722  96F8
24723  96F9
24724  96FA
24725  96FB
24726  96FC
24727  96FD
24728  96FE
24729  96FF
24730  9700
24731  9701
24732  9702
24733  9703
24734  9704
24735  9705
24736  9706
24737  9707
24738  9708
24739  9709
24740  970A
24741  970B
24742  970C
24743  970D
24744  970E
24745  970F
24746  9710
24747  9711
24748  9712
24749  9713
24750  9714
24751  9715
24752  9716
24753  9717
24754  9718
24755  9719
24756  971A
24757  971B
24758  971C
24759  971D
24760  971E
24761  971F
24762  9720
24763  9721
24764  9722
24765  9723
24766  9724
24767  9725
24768  9726
24769  9727
24770  9728
24771  9729
24772  972A
24773  972B
24774  972C
24775  972D
24776  972E
24777  972F
24778  9730
24779  9731
24780  9732
24781  9733
24782  9734
24783  9735
24784  9736
24785  9737
24786  9738
24787  9739
24788  973A
24789  973B
24790  973C
24791  973D
24792  973E
24793  973F
24794  9740
24795  9741
24796  9742
24797  9743
24798  9744
24799  9745
24800  9746
24801  9747
24802  9748
24803  9749
24804  974A
24805  974B
24806  974C
24807  974D
24808  974E
24809  974F
24810  9750
24811  9751
24812  9752
24813  9753
24814  9754
24815  9755
24816  9756
24817  9757
24818  9758
24819  9759
24820  975A
24821  975B
24822  975C
24823  975D
24824  975E
24825  975F
24826  9760
24827  9761
24828  9762
24829  9763
24830  9764
24831  9765
24832  9766
24833  9767
24834  9768
24835  9769
24836  976A
24837  976B
24838  976C
24839  976D
24840  976E
24841  976F
24842  9770
24843  9771
24844  9772
24845  9773
24846  9774
24847  9775
24848  9776
24849  9777
24850  9778
24851  9779
24852  977A
24853  977B
24854  977C
24855  977D
24856  977E
24857  977F
24858  9780
24859  9781
24860  9782
24861  9783
24862  9784
24863  9785
24864  9786
24865  9787
24866  9788
24867  9789
24868  978A
24869  978B
24870  978C
24871  978D
24872  978E
24873  978F
24874  9790
24875  9791
24876  9792
24877  9793
24878  9794
24879  9795
24880  9796
24881  9797
24882  9798
24883  9799
24884  979A
24885  979B
24886  979C
24887  979D
24888  979E
24889  979F
24890  97A0
24891  97A1
24892  97A2
24893  97A3
24894  97A4
24895  97A5
24896  97A6
24897  97A7
24898  97A8
24899  97A9
24900  97AA
24901  97AB
24902  97AC
24903  97AD
24904  97AE
24905  97AF
24906  97B0
24907  97B1
24908  97B2
24909  97B3
24910  97B4
24911  97B5
24912  97B6
24913  97B7
24914  97B8
24915  97B9
24916  97BA
24917  97BB
24918  97BC
24919  97BD
24920  97BE
24921  97BF
24922  97C0
24923  97C1
24924  97C2
24925  97C3
24926  97C4
24927  97C5
24928  97C6
24929  97C7
24930  97C8
24931  97C9
24932  97CA
24933  97CB
24934  97CC
24935  97CD
24936  97CE
24937  97CF
24938  97D0
24939  97D1
24940  97D2
24941  97D3
24942  97D4
24943  97D5
24944  97D6
24945  97D7
24946  97D8
24947  97D9
24948  97DA
24949  97DB
24950  97DC
24951  97DD
24952  97DE
24953  97DF
24954  97E0
24955  97E1
24956  97E2
24957  97E3
24958  97E4
24959  97E5
24960  97E6
24961  97E7
24962  97E8
24963  97E9
24964  97EA
24965  97EB
24966  97EC
24967  97ED
24968  97EE
24969  97EF
24970  97F0
24971  97F1
24972  97F2
24973  97F3
24974  97F4
24975  97F5
24976  97F6
24977  97F7
24978  97F8
24979  97F9
24980  97FA
24981  97FB
24982  97FC
24983  97FD
24984  97FE
24985  97FF
24986  9800
24987  9801
24988  9802
24989  9803
24990  9804
24991  9805
24992  9806
24993  9807
24994  9808
24995  9809
24996  980A
24997  980B
24998  980C
24999  980D
25000  980E
25001  980F
25002  9810
25003  9811
25004  9812
25005  9813
25006  9814
25007  9815
25008  9816
25009  9817
25010  9818
25011  9819
25012  981A
25013  981B
25014  981C
25015  981D
25016  981E
25017  981F
25018  9820
25019  9821
25020  9822
25021  9823
25022  9824
25023  9825
25024  9826
25025  9827
25026  9828
25027  9829
25028  982A
25029  982B
25030  982C
25031  982D
25032  982E
25033  982F
25034  9830
25035  9831
25036  9832
25037  9833
25038  9834
25039  9835
25040  9836
25041  9837
25042  9838
25043  9839
25044  983A
25045  983B
25046  983C
25047  983D
25048  983E
25049  983F
25050  9840
25051  9841
25052  9842
25053  9843
25054  9844
25055  9845
25056  9846
25057  9847
25058  9848
25059  9849
25060  984A
25061  984B
25062  984C
25063  984D
25064  984E
25065  984F
25066  9850
25067  9851
25068  9852
25069  9853
25070  9854
25071  9855
25072  9856
25073  9857
25074  9858
25075  9859
25076  985A
25077  985B
25078  985C
25079  985D
25080  985E
25081  985F
25082  9860
25083  9861
25084  9862
25085  9863
25086  9864
25087  9865
25088  9866
25089  9867
25090  9868
25091  9869
25092  986A
25093  986B
25094  986C
25095  986D
25096  986E
25097  986F
25098  9870
25099  9871
25100  9872
25101  9873
25102  9874
25103  9875
25104  9876
25105  9877
25106  9878
25107  9879
25108  987A
25109  987B
25110  987C
25111  987D
25112  987E
25113  987F
25114  9880
25115  9881
25116  9882
25117  9883
25118  9884
25119  9885
25120  9886
25121  9887
25122  9888
25123  9889
25124  988A
25125  988B
25126  988C
25127  988D
25128  988E
25129  988F
25130  9890
25131  9891
25132  9892
25133  9893
25134  9894
25135  9895
25136  9896
25137  9897
25138  9898
25139  9899
25140  989A
25141  989B
25142  989C
25143  989D
25144  989E
25145  989F
25146  98A0
25147  98A1
25148  98A2
25149  98A3
25150  98A4
25151  98A5
25152  98A6
25153  98A7
25154  98A8
25155  98A9
25156  98AA
25157  98AB
25158  98AC
25159  98AD
25160  98AE
25161  98AF
25162  98B0
25163  98B1
25164  98B2
25165  98B3
25166  98B4
25167  98B5
25168  98B6
25169  98B7
25170  98B8
25171  98B9
25172  98BA
25173  98BB
25174  98BC
25175  98BD
25176  98BE
25177  98BF
25178  98C0
25179  98C1
25180  98C2
25181  98C3
25182  98C4
25183  98C5
25184  98C6
25185  98C7
25186  98C8
25187  98C9
25188  98CA
25189  98CB
25190  98CC
25191  98CD
25192  98CE
25193  98CF
25194  98D0
25195  98D1
25196  98D2
25197  98D3
25198  98D4
25199  98D5
25200  98D6
25201  98D7
25202  98D8
25203  98D9
25204  98DA
25205  98DB
25206  98DC
25207  98DD
25208  98DE
25209  98DF
25210  98E0
25211  98E1
25212  98E2
25213  98E3
25214  98E4
25215  98E5
25216  98E6
25217  98E7
25218  98E8
25219  98E9
25220  98EA
25221  98EB
25222  98EC
25223  98ED
25224  98EE
25225  98EF
25226  98F0
25227  98F1
25228  98F2
25229  98F3
25230  98F4
25231  98F5
25232  98F6
25233  98F7
25234  98F8
25235  98F9
25236  98FA
25237  98FB
25238  98FC
25239  98FD
25240  98FE
25241  98FF
25242  9900
25243  9901
25244  9902
25245  9903
25246  9904
25247  9905
25248  9906
25249  9907
25250  9908
25251  9909
25252  990A
25253  990B
25254  990C
25255  990D
25256  990E
25257  990F
25258  9910
25259  9911
25260  9912
25261  9913
25262  9914
25263  9915
25264  9916
25265  9917
25266  9918
25267  9919
25268  991A
25269  991B
25270  991C
25271  991D
25272  991E
25273  991F
25274  9920
25275  9921
25276  9922
25277  9923
25278  9924
25279  9925
25280  9926
25281  9927
25282  9928
25283  9929
25284  992A
25285  992B
25286  992C
25287  992D
25288  992E
25289  992F
25290  9930
25291  9931
25292  9932
25293  9933
25294  9934
25295  9935
25296  9936
25297  9937
25298  9938
25299  9939
025300  000988        
025301  000989  var hFonts[56] ;
025302  000990  var stringsCV[56] := [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], hstrings ;
25303  4D10
25304  4D11
25305  4D12
25306  4D13
25307  4D14
25308  4D15
25309  4D16
25310  4D17
25311  4D18
25312  4D19
25313  4D1A
25314  4D1B
25315  4D1C
25316  4D1D
25317  4D1E
25318  4D1F
25319  4D20
25320  4D21
25321  4D22
25322  4D23
25323  4D24
25324  4D25
25325  4D26
25326  4D27
25327  4D28
25328  4D29
25329  4D2A
25330  4D2B
25331  4D2C
25332  4D2D
25333  4D2E
25334  4D2F
25335  4D30
25336  4D31
25337  4D32
25338  4D33
25339  4D34
25340  4D35
25341  4D36
25342  4D37
25343  4D38
25344  4D39
25345  4D3A
25346  4D3B
25347  4D3C
25348  4D3D
25349  4D3E
25350  4D3F
25351  4D40
25352  4D41
25353  4D42
25354  4D43
25355  4D44
25356  4D45
25357  4D46
25358  4D47
25359  4D48
25360  4D49
25361  4D4A
25362  4D4B
25363  4D4C
25364  4D4D
25365  4D4E
25366  4D4F
25367  4D50
25368  4D51
25369  4D52
25370  4D53
25371  4D54
25372  4D55
25373  4D56
25374  4D57
25375  4D58
25376  4D59
25377  4D5A
25378  4D5B
25379  4D5C
25380  4D5D
25381  4D5E
25382  4D5F
25383  4D60
25384  4D61
25385  4D62
25386  4D63
25387  4D64
25388  4D65
25389  4D66
25390  4D67
25391  4D68
25392  4D69
25393  4D6A
25394  4D6B
25395  4D6C
25396  4D6D
25397  4D6E
25398  4D6F
25399  4D70
25400  4D71
25401  4D72
25402  4D73
25403  4D74
25404  4D75
25405  4D76
25406  4D77
25407  4D78
25408  4D79
25409  4D7A
25410  4D7B
25411  4D7C
25412  4D7D
25413  4D7E
25414  4D7F
025415  000991  // Start P2.inc
025416  000992  var oObjects[MaxTotObjects+1] ;                 // address of objects
025417  000993  var CurrentForm, oldn, ImageTouched ;
025418  000994  var TouchXpos, TouchYpos ;
025419  000995  var InputType, TouchState, CurInputData, pInputIndex ;
025420  000996  var comRX[40], cmd[CMDLenMAX] ;
025421  000997        
025422  000998  var InputCS, OutputCS ;
025423  000999        
025424  001000        
025425  001001        
025426  001002  func seroutCS(var op)
025427  001003      serout(op) ;
025428  001004      OutputCS ^= op ;
025429  001005  endfunc
025430  001006        
025431  001007  func nak0()
025432  001008      serout(NAK) ;
025433  001009      InputCS := 0 ;
025434  001010  endfunc
025435  001011        
025436  001012  func seroutOcs()
025437  001013      serout(OutputCS) ;
025438  001014      OutputCS := 0 ;
025439  001015  endfunc
025440  001016        
025441  001017  func SendReport(var id, var objt, var objn, var val)
025442  001018      seroutCS(id) ;
025443  001019      seroutCS(objt) ;
025444  001020      seroutCS(objn) ;
025445  001021      seroutCS(val >> 8) ; // first 8 bits
025446  001022      seroutCS(val) ;
025447  001023      seroutOcs() ;
025448  001024  endfunc
025449  001025        
025450  001026  func TMul(var p1, var p2, var p3)
025451  001027      var var32[2], var322[2] ;
025452  001028      umul_1616(var32, p1, *(CurInputData+p2)) ;
025453  001029      umul_1616(var322, var32[1], *(CurInputData+p3)) ;
025454  001030      umul_1616(var32, var32[0], *(CurInputData+p3)) ;
025455  001031      return(var32[1] + var322[0]) ;
025456  001032  endfunc
025457  001033        
025458  001034  func ReadObject(var ObjectType, var ObjectIdx)
025459  001035      var j, k, Objects ;
025460  001036      Objects := *(oObjects+ObjectType) ;
025461  001037        
025462  001038      j := 2 + ObjectIdx * 2 + Objects ;
025463  001039       if (ObjectType == tForm)
025464  001040          k := CurrentForm ;
025465  001041      else if ((ObjectType == tCustomdigits) || (ObjectType == tLeddigits))
025466  001042          k := img_GetWord(hndl, *j, IMAGE_TAG2);
025467  001043      else if (ObjectType == tStrings)
025468  001044          k := stringsCV[ObjectIdx];
025469  001045          else
025470  001046          k := img_GetWord(hndl, *j, IMAGE_INDEX);
025471  001047          if (((ObjectType == tWinButton) || (ObjectType == tAniButton) || (ObjectType == tUserButton) || (ObjectType == t4Dbutton)) && (k)) k := 1 ; // this is not correct for blocked buttons and cannot be fixed as we cannot
025472  001048                                                                                                                                                      // determine if button is momentary or not which is needed for correct answer.
025473  001049      endif
025474  001050      SendReport(REPORT_OBJ, ObjectType, ObjectIdx, k) ;
025475  001051  endfunc
025476  001052        
025477  001053        
025478  001054  func WriteObject(var ObjectType, var ObjectIdx, var NewVal)
025479  001055      var i, j, k, Objects ;
025480  001056      ObjectType &= 0x3f ;
025481  001057      if (ObjectType == tForm)
025482  001058          ActivateForm(ObjectIdx) ;
025483  001059      else
025484  001060          Objects := *(oObjects+ObjectType)+ObjectIdx*2+2 ;
025485  001061          i := *(Objects) ;
025486  001062          switch (ObjectType)
025487  001063              case tUserButton :
025488  001064                  j := InputControls[oUserButtons[ObjectIdx+1]] ;
025489  001065                  break ;
025490  001066              case t4Dbutton :
025491  001067                  j := InputControls[o4Dbuttons[ObjectIdx+1]] ;
025492  001068                  break ;
025493  001069              default : j := -1 ;
025494  001070          endswitch
025495  001071          if (j != -1)
025496  001072              k := img_GetWord(hndl, i , IMAGE_INDEX) ;
025497  001073              if (   (k == -1)                    // currently disabled
025498  001074                  && (NewVal != -1) )             // and don't want it disabled
025499  001075                  img_ClearAttributes(hndl, i, I_TOUCH_DISABLE);    // enable touch
025500  001076              else if (   (k != -1)               // currently enabled
025501  001077                       && (NewVal == -1) )        // and want it disabled
025502  001078                  img_SetWord(hndl, i, IMAGE_INDEX, 0xffff) ;       // make invisible
025503  001079                  img_SetAttributes(hndl, i, I_TOUCH_DISABLE);      // and disable touch
025504  001080                  if (FormBGcolors[CurrentForm] != ColorBGimage)
025505  001081                      gfx_RectangleFilled(img_GetWord(hndl, i, IMAGE_XPOS), img_GetWord(hndl, i, IMAGE_YPOS),
025506  001082                                          img_GetWord(hndl, i, IMAGE_XPOS) + img_GetWord(hndl, i, IMAGE_WIDTH),
025507  001083                                          img_GetWord(hndl, i, IMAGE_YPOS) + img_GetWord(hndl, i, IMAGE_HEIGHT), FormBGcolors[CurrentForm]);
025508  001084                  else
025509  001085                      gfx_ClipWindow(img_GetWord(hndl, i, IMAGE_XPOS), img_GetWord(hndl, i, IMAGE_YPOS),
025510  001086                                     img_GetWord(hndl, i, IMAGE_XPOS) + img_GetWord(hndl, i, IMAGE_WIDTH),
025511  001087                                     img_GetWord(hndl, i, IMAGE_YPOS) + img_GetWord(hndl, i, IMAGE_HEIGHT)) ;
025512  001088                      gfx_Clipping(ON) ;
025513  001089                      img_Show(hndl,FormStartIndex[CurrentForm]) ;
025514  001090                      gfx_Clipping(OFF) ;
025515  001091                  endif
025516  001092                  return ;
025517  001093              else
025518  001094              NewVal := NewVal << 1 ;
025519  001095              if (OVF())      // button group index change
025520  001096                  if (*(j+InputData+Ofs_IPD_P1))
025521  001097                      k &= 1 ;    // mask off old group index for momentary
025522  001098                  else
025523  001099                      k &= 3 ;    // mask off old group index for toggle
025524  001100                  endif
025525  001101              else            // normal set
025526  001102                  if (*(j+InputData+Ofs_IPD_P2) != -1) TurnOffButtons(*(j+InputData+Ofs_IPD_P2)) ;
025527  001103                  k &= 0xfffc ;    // retain only group index for state set
025528  001104              endif
025529  001105              NewVal |= k ;
025530  001106              endif
025531  001107          endif
025532  001108           if (ObjectType == tCustomdigits)
025533  001109              img_SetWord(hndl, i , IMAGE_TAG2, NewVal); // where state is 0 to 2
025534  001110              ledDigitsDisplay(i, oCustomdigitss, oCustomDigitsn) ;
025535  001111          else if (ObjectType == tStrings)
025536  001112              PrintStrings(ObjectIdx, NewVal, 0);
025537  001113          else
025538  001114              img_SetWord(hndl, i , IMAGE_INDEX, NewVal); // where state is 0 to 2
025539  001115              img_Show(hndl, i) ; // will only display if form is current
025540  001116          endif
025541  001117      endif
025542  001118  endfunc
025543  001119        
025544  001120  func TurnOffButtons(var group)
025545  001121      var j, k, l;
025546  001122      for (j := 0; j < nInputs; j++)
025547  001123          k := j*IPDatasize ;
025548  001124          if (*(InputData+k+Ofs_IPD_P2) == group)
025549  001125              l := -1 ;
025550  001126               if (*(InputData+k) == t4Dbutton)
025551  001127                  l := o4Dbuttons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
025552  001128                  if (img_GetWord(hndl, l, IMAGE_INDEX) != 0xffff)
025553  001129                  img_SetWord(hndl, l, IMAGE_INDEX, 0);
025554  001130                  img_Show(hndl, l);      // only shows on current form
025555  001131                  endif
025556  001132              else if (*(InputData+k) == tUserButton)
025557  001133                  l := oUserButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
025558  001134                  img_SetWord(hndl, l, IMAGE_INDEX, img_GetWord(hndl, l, IMAGE_INDEX) & 0xfffc );
025559  001135                  img_Show(hndl, l);      // only shows on current form
025560  001136              endif
025561  001137          endif
025562  001138      next
025563  001139  endfunc
025564  001140        
025565  001141        
025566  001142  // WARNING, this code will crash if newval exceeds maximum displayable number
025567  001143  func ledDigitsDisplay(var imgidx, var typeptr, var setptr)
025568  001144      var i, j, m, left, lstb, nv, newval, digita[7] ; // 7 is enough for -32768, the 0th digit is not used
025569  001145      if (!((img_GetWord(hndl, imgidx, IMAGE_FLAGS) & I_ENABLED))) return ;  // ;img_GetWord(hndl, imgidx, IMAGE_TAG2) ;if diabled then exit
025570  001146      newval := img_GetWord(hndl, imgidx, IMAGE_TAG2) ;
025571  001147      i := -1 ;
025572  001148      j := *(typeptr) ;
025573  001149      repeat
025574  001150          typeptr += 2 ;
025575  001151          i++ ;
025576  001152          until (*(typeptr) == imgidx);
025577  001153      j := setptr + i*10 ;
025578  001154      left := *(j+Ofs_Digits_Left) ;
025579  001155      imgidx++ ;
025580  001156        
025581  001157      nv := newval ;
025582  001158      lstb := 1 ;
025583  001159      for (i := *(j+Ofs_Digits_Digits); i > 0; i--)
025584  001160          m := nv % 10 ;
025585  001161          if ( *(j+Ofs_Digits_LeadingBlanks) && (i <= *(j+Ofs_Digits_Digits) - *(j+Ofs_Digits_MinDigits)) )
025586  001162              if (nv == 0)
025587  001163                  m := 10 ;
025588  001164                  if (lstb == 1) lstb := i ;
025589  001165              endif
025590  001166          endif
025591  001167        
025592  001168          digita[i] := ABS(m) ;
025593  001169          nv /= 10 ;
025594  001170      next
025595  001171      if (newval < 0)
025596  001172          digita[lstb] := 11 ;
025597  001173      endif
025598  001174      for (i := 1; i <= *(j+Ofs_Digits_Digits); i++)
025599  001175          img_SetWord(hndl, imgidx, IMAGE_INDEX, digita[i]);
025600  001176          img_SetWord(hndl, imgidx, IMAGE_XPOS, left) ;
025601  001177          img_Show(hndl, imgidx);
025602  001178          left += *(j+Ofs_Digits_Widthdigit) ;
025603  001179      next
025604  001180  endfunc
025605  001181        
025606  001182        
025607  001183  func ActivateForm(var newform)
025608  001184      var i, j, *p ;
025609  001185        
025610  001186      if (CurrentForm != -1) // deactivate old form, by disabling all inputs
025611  001187          for (i := FormStartIndex[CurrentForm]; i <= FormEndIndex[CurrentForm]; i++)
025612  001188              if (img_GetWord(hndl, i, IMAGE_TAG))
025613  001189                  img_Disable(hndl,i) ;
025614  001190              endif
025615  001191          next
025616  001192      endif
025617  001193      CurrentForm := newform ;
025618  001194      // display newform image or clear to image color
025619  001195      if (FormBGcolors[CurrentForm] != ColorBGimage)
025620  001196          gfx_Set(BACKGROUND_COLOUR,FormBGcolors[CurrentForm]);
025621  001197          gfx_Cls() ;
025622  001198          DoGFXObjects() ;                                    // display GFX 'widgets'
025623  001199      endif
025624  001200        
025625  001201      // enable inputs
025626  001202      for (i := FormStartIndex[CurrentForm]; i < FormEndIndex[CurrentForm]; i++)
025627  001203          j := img_GetWord(hndl, i, IMAGE_TAG) ;
025628  001204          if (j)
025629  001205              j-- ;
025630  001206              img_SetAttributes(hndl, i, I_STAYONTOP+I_ENABLED);        // make sure this is on top of form, if applicable
025631  001207              //if (j != tKeyboard)
025632  001208              if (img_GetWord(hndl, i, IMAGE_INDEX) != 0xffff)
025633  001209              if (((j <= tWinButton) || (j >= t4Dbutton)) && (j != tSmartGauge) )               // enable inputs
025634  001210                  img_ClearAttributes(hndl, i, I_TOUCH_DISABLE);        // ensure touch is enabled
025635  001211              endif
025636  001212              img_Show(hndl,i) ; // show initialy, if required
025637  001213              endif
025638  001214              if (j == tForm)
025639  001215                  DoGFXObjects() ;                                    // display GFX 'widgets' for image backgruobds
025640  001216              else if (j == tCustomdigits)
025641  001217                  ledDigitsDisplay(i, oCustomdigitss, oCustomDigitsn) ;
025642  001218              endif
025643  001219          endif
025644  001220      next
025645  001221      for (i := 0; i < nStrings; i++)
025646  001222          if (stringsCV[i] != -1)
025647  001223              WriteObject(tStrings, i, stringsCV[i]) ;
025648  001224          endif
025649  001225      next
025650  001226        
025651  001227  endfunc
025652  001228        
025653  001229  func UpdateObjects(var newval)
025654  001230      var IPidx, otherOBJ ;
025655  001231      if ( ( img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) != newval) || (TouchState == Ofs_IPD_RELEASE) ) // only bother if values changed, or release
025656  001232        
025657  001233          img_SetWord(hndl, *(pInputIndex), IMAGE_INDEX, newval);
025658  001234              img_Show(hndl, *(pInputIndex));      // only shows on current form
025659  001235          if ((InputType == t4Dbutton) || (InputType == tUserButton) || (InputType == tWinButton))
025660  001236              if (*(CurInputData+Ofs_IPD_P1))
025661  001237                  newval &= 1;
025662  001238              else
025663  001239                  newval &= 3;
025664  001240              endif
025665  001241              if (newval > 1) newval := 1;
025666  001242          endif
025667  001243          IPidx := *(CurInputData+TouchState) ;
025668  001244          while(IPidx != 0)
025669  001245              otherOBJ := IPidx + InputData;
025670  001246              if (*(otherOBJ) == OT_REPORT)
025671  001247          SendReport(REPORT_EVENT, InputType, *(otherOBJ+Ofs_IPD_OBJVIDX), newval) ;
025672  001248              else if (*(otherOBJ) == OT_MAGIC)
025673  001249                  IPidx := *(otherOBJ+Ofs_IPD_P5) ;
025674  001250                  IPidx(newval) ;
025675  001251              else if (TouchState == *(otherOBJ+Ofs_IPD_P4))
025676  001252                  if (*(otherOBJ) == OT_ACTIVATE)
025677  001253                      ActivateForm(*(otherOBJ+Ofs_IPD_P2) ) ;
025678  001254                      InputType := tForm ;
025679  001255                  else if (*(otherOBJ) == OT_SETCONST)
025680  001256                      newval := *(otherOBJ+Ofs_IPD_P3) ;
025681  001257                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
025682  001258                  else if (*(otherOBJ) == OT_SETANOTHER)
025683  001259                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
025684  001260                  else if (*(otherOBJ) == OT_PREVFRAME)
025685  001261                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX))
025686  001262                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)-1) ;
025687  001263                      endif
025688  001264                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
025689  001265                  else if (*(otherOBJ) == OT_NEXTFRAME)
025690  001266                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) < *(otherOBJ+Ofs_IPD_P3))
025691  001267                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)+1) ;
025692  001268                      endif
025693  001269                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
025694  001270                  else if (*(otherOBJ) == OT_PREVSTRING)
025695  001271                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)])
025696  001272                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]-1) ;
025697  001273                      endif
025698  001274                  else if (*(otherOBJ) == OT_NEXTSTRING)
025699  001275                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)] < *(otherOBJ+Ofs_IPD_P3)) // fix IPD_P2 not filled in yet
025700  001276                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]+1) ;
025701  001277                      endif
025702  001278                  endif
025703  001279              endif
025704  001280              IPidx := *(otherOBJ+TouchState) ;
025705  001281          wend
025706  001282      endif
025707  001283  endfunc
025708  001284        
025709  001285  // End P2.inc
025710  001286  func DoGFXObjects()
025711  001287  endfunc
025712  001288        
025713  001289  // Start P3.inc
025714  001290  func main()
025715  001291      var comTX[50], cmdi, i, j, TouchStatus ;
025716  001292        
025717  001293        
025718  001294      gfx_ScreenMode(LANDSCAPE_R) ;
025719  001295        
025720  001296      putstr("Mounting...\n");
025721  001297      if (!(file_Mount()))
025722  001298          while(!(file_Mount()))
025723  001299              putstr("Drive not mounted...");
025724  001300              pause(200);
025725  001301              gfx_Cls();
025726  001302              pause(200);
025727  001303          wend
025728  001304      endif
025729  001305  //    gfx_MoveTo(0, 0);
025730  001306  //    print(mem_Heap()," ") ;
025731  001307  //    gfx_TransparentColour(0x0020);
025732  001308  //    gfx_Transparency(ON);
025733  001309        
025734  001310      // open image control
025735  001311      hndl := file_LoadImageControl("BCN3D_~1.dat", "BCN3D_~1.gci", 1);
025736  001312        
025737  001313      // init 'constants'
025738  001314  // End P3.inc
025739  001315        
025740  001316      oObjects[tDipSwitch] := oDipSwitchs ;
025741  001317      oObjects[tKnob] := oKnobs ;
025742  001318      oObjects[tRockerSwitch] := oRockerSwitchs ;
025743  001319      oObjects[tRotarySwitch] := oRotarySwitchs ;
025744  001320      oObjects[tGSlider] := oGSliders ;
025745  001321      oObjects[tTrackbar] := oTrackbars ;
025746  001322      oObjects[tWinButton] := oWinButtons ;
025747  001323      oObjects[tAngularmeter] := oAngularmeters ;
025748  001324      oObjects[tCoolgauge] := oCoolgauges ;
025749  001325      oObjects[tCustomdigits] := oCustomdigitss ;
025750  001326      oObjects[tForm] := oForms ;
025751  001327      oObjects[tGauge] := oGauges ;
025752  001328      oObjects[tImage] := oImages ;
025753  001329      oObjects[tKeyboard] := oKeyboards ;
025754  001330      oObjects[tLed] := oLeds ;
025755  001331      oObjects[tLeddigits] := oLeddigitss ;
025756  001332      oObjects[tMeter] := oMeters ;
025757  001333      oObjects[tStrings] := oStringss ;
025758  001334      oObjects[tThermometer] := oThermometers ;
025759  001335      oObjects[tUserled] := oUserleds ;
025760  001336      oObjects[tVideo] := oVideos ;
025761  001337      oObjects[tStaticText] := oStaticTexts ;
025762  001338      oObjects[tSounds] := oSoundss ;
025763  001339      oObjects[tTimer] := oTimers ;
025764  001340      oObjects[tSpectrum] := oSpectrums ;
025765  001341      oObjects[tTank] := oTanks ;
025766  001342      oObjects[tUserImages] := oUserImagess ;
025767  001343      oObjects[tPinOutput] := oPinOutputs ;
025768  001344      oObjects[tPinInput] := oPinInputs ;
025769  001345      oObjects[t4Dbutton] := o4Dbuttons ;
025770  001346      oObjects[tAniButton] := oAniButtons ;
025771  001347      oObjects[tColorPicker] := oColorPickers ;
025772  001348      oObjects[tUserButton] := oUserButtons ;
025773  001349      oObjects[tMagicObject] := oMagicObjects ;
025774  001350      oObjects[tSmartGauge] := oSmartGauges ;
025775  001351      oObjects[tSmartSlider] := oSmartSliders ;
025776  001352      oObjects[tSmartKnob] := oSmartKnobs ;
025777  001353      hFonts[1] := file_LoadImageControl("BCN3D_~1.d02", "BCN3D_~1.g02", 1)  ;
025778  001354      hFonts[2] := file_LoadImageControl("BCN3D_~1.d07", "BCN3D_~1.g07", 1)  ;
025779  001355      hFonts[3] := file_LoadImageControl("BCN3D_~1.d01", "BCN3D_~1.g01", 1)  ;
025780  001356      hFonts[48] := file_LoadImageControl("BCN3D_~1.d0C", "BCN3D_~1.g0C", 1)  ;
025781  001357      hFonts[0] := hFonts[2] ;
025782  001358      hFonts[6] := hFonts[2] ;
025783  001359      hFonts[7] := hFonts[2] ;
025784  001360      hFonts[8] := hFonts[1] ;
025785  001361      hFonts[9] := hFonts[2] ;
025786  001362      hFonts[10] := hFonts[2] ;
025787  001363      hFonts[11] := hFonts[2] ;
025788  001364      hFonts[12] := hFonts[1] ;
025789  001365      hFonts[13] := hFonts[48] ;
025790  001366      hFonts[16] := hFonts[1] ;
025791  001367      hFonts[23] := hFonts[1] ;
025792  001368      hFonts[27] := hFonts[2] ;
025793  001369      hFonts[38] := hFonts[2] ;
025794  001370      hFonts[39] := hFonts[2] ;
025795  001371      hFonts[44] := hFonts[2] ;
025796  001372      hFonts[49] := hFonts[2] ;
025797  001373      hFonts[50] := hFonts[1] ;
025798  001374      hFonts[53] := hFonts[48] ;
025799  001375      hFonts[55] := hFonts[48] ;
025800  001376  // Start P4.inc
025801  001377      hstrings := file_Open("BCN3D_~1.txf", 'r') ; // Open handle to access uSD strings, uncomment if required
025802  001378      // init comms
025803  001379      com_Init(comRX,CMDLenMAX,0);
025804  001380      com_SetBaud(COM0,19886);
025805  001381      com_TXbuffer(comTX, 100, 0);
025806  001382      snd_BufSize(2) ;
025807  001383      // tag 'real' objects
025808  001384      for (i := 0; i <= MaxTotObjects; i++)
025809  001385          if (   (i != tSounds)
025810  001386              && (i != tTimer)
025811  001387              && (i != tPinOutput)
025812  001388              && (i != tMagicObject)
025813  001389              && (i != tPinInput) )
025814  001390              TouchXpos := oObjects[i] ;
025815  001391              TouchYpos := *(TouchXpos) ;
025816  001392              for (ImageTouched := 1; ImageTouched <= TouchYpos; ImageTouched++)
025817  001393                  oldn := *(TouchXpos+ImageTouched*2) ;
025818  001394                  img_SetAttributes(hndl, oldn, I_TOUCH_DISABLE);  // ensure touch is enabled
025819  001395                  if (oldn != -1)
025820  001396                      img_SetWord(hndl, oldn, IMAGE_TAG, i+1);
025821  001397                      img_Disable(hndl, oldn) ;
025822  001398                  endif
025823  001399              next
025824  001400          endif
025825  001401      next
025826  001402        
025827  001403      // display initial form
025828  001404      CurrentForm := -1 ;
025829  001405  // End P4.inc
025830  001406  // Start P5.inc
025831  001407      ActivateForm(0) ; // need to change this according to first actual form
025832  001408        
025833  001409  // End P5.inc
025834  001410  // Start P6.inc
025835  001411      touch_Set(TOUCH_ENABLE);                            // enable the touch screen
025836  001412      oldn := -1 ;
025837  001413      repeat
025838  001414        
025839  001415          // check comms for command, how to NAK invalid command
025840  001416          if (com_Count() != 0)
025841  001417              i := serin() ;
025842  001418              InputCS ^= i ;               // update checksum
025843  001419              if (   (cmdi > 2)
025844  001420                  && (cmd[0] == WRITE_STRU) )
025845  001421                  j := (cmdi-1) >> 1 + 2 ;
025846  001422                  if (j == CMDLenMAX)    // max length exceeded
025847  001423                      nak0() ;
025848  001424                      cmdi := -1 ;
025849  001425                  else if (cmdi & 1)
025850  001426                      cmd[j] := i ;
025851  001427                      if (cmd[2] == 0)    // if string complete
025852  001428                          if (InputCS)
025853  001429                              nak0() ;
025854  001430                          else
025855  001431                              if (cmd[0] == WRITE_STRU)
025856  001432                              cmd[j] := 0 ;                     // terminate it
025857  001433                              PrintStrings(cmd[1], &cmd[3], 1) ;
025858  001434                              serout(ACK) ;
025859  001435                              else
025860  001436                              endif
025861  001437                          endif
025862  001438                          cmdi := -1 ;
025863  001439                      endif
025864  001440                  else
025865  001441                      cmd[j] := cmd[j] << 8 + i ;
025866  001442                      cmd[2]-- ;          // dec length
025867  001443                  endif
025868  001444                  cmdi++ ;
025869  001445              else // not unicode string
025870  001446                  cmd[cmdi++] := i ;
025871  001447                   if (cmd[0] == WRITE_STR)                  // Ansi String
025872  001448                      if (cmdi == CMDLenMAX)      // max length exceeded
025873  001449                          nak0() ;
025874  001450                          cmdi := 0 ;
025875  001451                      else if (cmdi > 2)
025876  001452                          if (cmd[2] == -1)
025877  001453                              if (InputCS)
025878  001454                                  nak0() ;
025879  001455                              else
025880  001456                                  if (cmd[0] == WRITE_STR)
025881  001457                                  cmd[cmdi-1] := 0 ;                     // terminate it
025882  001458                                  PrintStrings(cmd[1], &cmd[3], 1) ;
025883  001459                                  serout(ACK) ;
025884  001460                                  else
025885  001461                                  endif
025886  001462                              endif
025887  001463                              cmdi := 0 ;
025888  001464                          else
025889  001465                              cmd[2]-- ;          // dec length
025890  001466                          endif
025891  001467                      endif
025892  001468                  else if (   (cmd[0] == READ_OBJ)
025893  001469                           && (cmdi == 4)         )
025894  001470                      if (InputCS)
025895  001471                          nak0() ;
025896  001472                      else
025897  001473                          ReadObject(cmd[1], cmd[2]) ;
025898  001474                      endif
025899  001475                      cmdi := 0 ;
025900  001476                  else if (   (cmd[0] == WRITE_OBJ)    // 6 byte write command (gen option)
025901  001477                           && (cmdi == 6)          )
025902  001478                      if (InputCS)
025903  001479                          nak0() ;
025904  001480                      else
025905  001481                          WriteObject(cmd[1], cmd[2], cmd[3] << 8 + cmd[4]) ;
025906  001482                          serout(ACK) ;
025907  001483                      endif
025908  001484                      cmdi := 0 ;
025909  001485                  else if (   (cmd[0] == WRITE_CONTRAST)
025910  001486                           && (cmdi == 3)         )
025911  001487                      if (InputCS)
025912  001488                          nak0() ;
025913  001489                      else
025914  001490                          gfx_Contrast(cmd[1]) ;
025915  001491                          serout(ACK) ;
025916  001492                      endif
025917  001493                      cmdi := 0 ;
025918  001494                  else if (cmdi == 6)    // we have 6 bytes and we've gotten here -> something wrong
025919  001495                      nak0() ;
025920  001496                      cmdi := 0 ;
025921  001497                  endif
025922  001498              endif   // not unicode string
025923  001499          endif   // a character is available
025924  001500        
025925  001501        
025926  001502      // touch code processing
025927  001503        
025928  001504          TouchStatus := touch_Get(TOUCH_STATUS);               // get touchscreen status
025929  001505          ImageTouched := img_Touched(hndl,-1) ;
025930  001506          if ((TouchStatus == TOUCH_PRESSED) || (TouchStatus == TOUCH_RELEASED) || (TouchStatus == TOUCH_MOVING))
025931  001507              if ((TouchStatus != TOUCH_RELEASED) && (ImageTouched != oldn) && (oldn != -1))
025932  001508                  TouchStatus := TOUCH_RELEASED ;       // simulate release if we move off object
025933  001509              endif
025934  001510              if (TouchStatus != TOUCH_RELEASED)        // if not released
025935  001511                  if (oldn != -1)
025936  001512                      ImageTouched := oldn ;
025937  001513                  else
025938  001514                      if (oldn != ImageTouched)
025939  001515                  oldn := ImageTouched ;
025940  001516                          TouchStatus := TOUCH_PRESSED ;
025941  001517                      endif
025942  001518                  endif
025943  001519                  TouchXpos  := touch_Get(TOUCH_GETX);
025944  001520                  TouchYpos  := touch_Get(TOUCH_GETY);
025945  001521                  TouchState := Ofs_IPD_DOWN ;
025946  001522              else
025947  001523                  ImageTouched := oldn ;                     // simulate release of what we touched
025948  001524                  oldn := -1 ;                    // prevent double release
025949  001525                  TouchState := Ofs_IPD_RELEASE ;
025950  001526              endif
025951  001527              if (ImageTouched != -1)
025952  001528                          CurInputData := InputControls[ImageTouched] + InputData;
025953  001529                          InputType := *(CurInputData) ;
025954  001530                          if (InputType == tSmartSlider)
025955  001531                              i := tTrackbar ; // GSlider ;
025956  001532                          else if (InputType == tSmartKnob)
025957  001533                              i := tKnob ;
025958  001534                          else if (InputType >= t4Dbutton) 
025959  001535                              i := InputType - 23 ; // adjust to ensure next in gosub
025960  001536                          else 
025961  001537                              i := InputType ;
025962  001538                          endif
025963  001539                          gosub (i), (cDipswitch, cKnob, cRockerswitch, cRotaryswitch, cSlider, cTrackbar, cWinbutton, c4DButton, cAniButton, cColorPicker, cUserButton) ;
025964  001540              endif
025965  001541          endif
025966  001542   //       if ((n != -1) && (oldn == -1)) oldn := n ;    // save what we touched in case we move off it
025967  001543        
025968  001544          sys_EventsResume() ;
025969  001545      forever
025970  001546        
025971  001547  cDipswitch:
025972  001548        
025973  001549  cKnob:
025974  001550        
025975  001551  cRockerswitch:
025976  001552        
025977  001553  cRotaryswitch:
025978  001554        
025979  001555  cSlider:
025980  001556  cTrackbar:
025981  001557      if (*(CurInputData+Ofs_IPD_P1))
025982  001558          i := TouchXpos - *(CurInputData+Ofs_IPD_P2) ;
025983  001559          if (i < 0)
025984  001560              i := 0 ;
025985  001561          else if (i > *(CurInputData+Ofs_IPD_P3))        // height/width - 17)
025986  001562              i := *(CurInputData+Ofs_IPD_P4) ;           // maxvalue-minvalue
025987  001563          else
025988  001564  //            i := *(input+IPD_P4) * i / *(input+IPD_P3) ;    // max-min - (max-min) * posn / (height-17)
025989  001565              i := TMul(i, Ofs_IPD_P4, Ofs_IPD_P5) ;    // max-min - (max-min) * posn / (height-17)
025990  001566          endif
025991  001567      else
025992  001568          i := TouchYpos - *(CurInputData+Ofs_IPD_P2) ;
025993  001569          if (i < 0)
025994  001570              i := *(CurInputData+Ofs_IPD_P4) ;           // maxvalue-minvalue
025995  001571          else if (i > *(CurInputData+Ofs_IPD_P3))        // height/width - 17)
025996  001572              i := 0 ;
025997  001573          else
025998  001574  //            i := *(input+IPD_P4) - *(input+IPD_P4) * i / *(input+IPD_P3) ;    // max-min - (max-min) * posn / (height-17)
025999  001575              i := *(CurInputData+Ofs_IPD_P4) - TMul(i, Ofs_IPD_P4, Ofs_IPD_P5) ;    // max-min - (max-min) * posn / (height-17)
026000  001576          endif
026001  001577      endif
026002  001578      if (InputType == tGSlider)
026003  001579          pInputIndex := oGSliders ;
026004  001580      else if (InputType == tSmartSlider)
026005  001581          pInputIndex := oSmartSliders ;
026006  001582      else
026007  001583          pInputIndex := oTrackbars ;
026008  001584      endif
026009  001585      pInputIndex += *(CurInputData+Ofs_IPD_OBJVIDX) ;
026010  001586      UpdateObjects(i) ;
026011  001587  endsub ;
026012  001588        
026013  001589  c4DButton:
026014  001590      pInputIndex := o4Dbuttons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
026015  001591      goto gbutton ;
026016  001592  cUserButton:
026017  001593      pInputIndex := oUserButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
026018  001594      goto gbutton ;
026019  001595  cWinbutton:
026020  001596  gbutton:
026021  001597      i := img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) ; // current state
026022  001598      if (*(CurInputData+Ofs_IPD_P1))                                 // momentary, reports 0, but should report 1
026023  001599          if (TouchStatus == TOUCH_RELEASED)
026024  001600              i &= 0xfffe ;
026025  001601              TouchState == Ofs_IPD_DOWN ;
026026  001602          else
026027  001603              i |= 1 ;
026028  001604              TouchState == Ofs_IPD_RELEASE ;
026029  001605          endif
026030  001606      else if (*(CurInputData+Ofs_IPD_P2) == -1)                      // Toggle, reports 0+2, but should report 0+1
026031  001607          if (TouchStatus == TOUCH_RELEASED)                     // only truly change on release
026032  001608              if ((i & 3) == 3)
026033  001609                  i &= 0xfffc ;
026034  001610              else
026035  001611                  i++ ;
026036  001612              endif
026037  001613          else
026038  001614              i |= 1 ;                                      // make down regardless of current state
026039  001615          endif
026040  001616      else                        // group action, up all other buttons on touch press, reports 0 for button down
026041  001617          if (TouchStatus == TOUCH_PRESSED)                     // only truly change on release
026042  001618              TurnOffButtons(*(CurInputData+Ofs_IPD_P2)) ;
026043  001619          endif
026044  001620          i := (i & 0xfffc) | 2 ;
026045  001621      endif
026046  001622        
026047  001623      UpdateObjects(i) ;
026048  001624  endsub ;
026049  001625        
026050  001626  cAniButton:
026051  001627        
026052  001628  cColorPicker:
026053  001629        
026054  001630  endfunc
026055  001631  // End P6.inc
Notice: Check that the function called via pointer  'IPidx' requires 1 argument (line 1250 file:BCN3D_SIGMAX.4DGenieS)
Notice: local var 'p' in func 'ActivateForm' is never used (line 1184 file:BCN3D_SIGMAX.4DGenieS)


Symbol Table:
name                             decimal         hex
__MAXBANKS                             6  0x00000006 (const dword)  (not used)
__MAXMEM                           32768  0x00008000 (const dword)  (usage 1)
__MAXPROG                          32750  0x00007fee (const dword)  (usage 1)
__PLATFORM                             3  0x00000003 (const dword)  (not used)
__reserved10                        -111  0xffffff91 (PmmC func) args[0] r=0  (not used)
__reserved13                        -123  0xffffff85 (PmmC func) args[0] r=0  (not used)
__reserved14                        -124  0xffffff84 (PmmC func) args[0] r=0  (not used)
__reserved17                        -201  0xffffff37 (PmmC func) args[0] r=0  (not used)
__reserved18                        -202  0xffffff36 (PmmC func) args[0] r=0  (not used)
__reserved19                        -203  0xffffff35 (PmmC func) args[0] r=0  (not used)
__reserved20                        -204  0xffffff34 (PmmC func) args[0] r=0  (not used)
__reserved21                        -205  0xffffff33 (PmmC func) args[0] r=0  (not used)
__reserved22                        -206  0xffffff32 (PmmC func) args[0] r=0  (not used)
__reserved23                        -220  0xffffff24 (PmmC func) args[0] r=0  (not used)
__reserved24                        -221  0xffffff23 (PmmC func) args[0] r=0  (not used)
__reserved25                        -222  0xffffff22 (PmmC func) args[0] r=0  (not used)
__reserved26                        -223  0xffffff21 (PmmC func) args[0] r=0  (not used)
__reserved3                          -69  0xffffffbb (PmmC func) args[0] r=0  (not used)
__reserved30                        -283  0xfffffee5 (PmmC func) args[0] r=0  (not used)
__reserved4                          -70  0xffffffba (PmmC func) args[0] r=0  (not used)
__reserved42                        -373  0xfffffe8b (PmmC func) args[0] r=0  (not used)
__reserved43                        -387  0xfffffe7d (PmmC func) args[0] r=0  (not used)
__reserved44                        -388  0xfffffe7c (PmmC func) args[0] r=0  (not used)
__reserved45                        -389  0xfffffe7b (PmmC func) args[0] r=0  (not used)
__reserved46                        -390  0xfffffe7a (PmmC func) args[0] r=0  (not used)
__reserved5                          -76  0xffffffb4 (PmmC func) args[0] r=0  (not used)
__reserved51                        -411  0xfffffe65 (PmmC func) args[0] r=0  (not used)
__reserved52                        -412  0xfffffe64 (PmmC func) args[0] r=0  (not used)
__reserved53                        -422  0xfffffe5a (PmmC func) args[0] r=0  (not used)
__reserved54                        -423  0xfffffe59 (PmmC func) args[0] r=0  (not used)
__reserved57                        -457  0xfffffe37 (PmmC func) args[0] r=0  (not used)
__reserved58                        -458  0xfffffe36 (PmmC func) args[0] r=0  (not used)
__reserved6                          -77  0xffffffb3 (PmmC func) args[0] r=0  (not used)
__reserved60                        -467  0xfffffe2d (PmmC func) args[0] r=0  (not used)
__reserved61                        -468  0xfffffe2c (PmmC func) args[0] r=0  (not used)
__reserved62                        -469  0xfffffe2b (PmmC func) args[0] r=0  (not used)
__reserved63                        -490  0xfffffe16 (PmmC func) args[0] r=0  (not used)
__reserved64                        -491  0xfffffe15 (PmmC func) args[0] r=0  (not used)
__reserved65                        -492  0xfffffe14 (PmmC func) args[0] r=0  (not used)
__reserved66                        -493  0xfffffe13 (PmmC func) args[0] r=0  (not used)
__reserved68                        -509  0xfffffe03 (PmmC func) args[0] r=0  (not used)
__reserved69                        -510  0xfffffe02 (PmmC func) args[0] r=0  (not used)
__reserved70                        -511  0xfffffe01 (PmmC func) args[0] r=0  (not used)
__reserved72                        -520  0xfffffdf8 (PmmC func) args[0] r=0  (not used)
__reserved77                        -526  0xfffffdf2 (PmmC func) args[0] r=0  (not used)
__reserved78                        -527  0xfffffdf1 (PmmC func) args[0] r=0  (not used)
__reserved85                        -536  0xfffffde8 (PmmC func) args[0] r=0  (not used)
__reserved86                        -537  0xfffffde7 (PmmC func) args[0] r=0  (not used)
__reserved87                        -570  0xfffffdc6 (PmmC func) args[0] r=0  (not used)
__reserved88                        -571  0xfffffdc5 (PmmC func) args[0] r=0  (not used)
__reserved89                        -572  0xfffffdc4 (PmmC func) args[0] r=0  (not used)
__reserved9                         -110  0xffffff92 (PmmC func) args[0] r=0  (not used)
__translate                           -8  0xfffffff8 (PmmC func) args[4] r=1  (not used)
ABS                                  -53  0xffffffcb (PmmC func) args[1] r=1  (usage 3)
ACK                                    6  0x00000006 (const dword)  (usage 12)
ActivateForm                       22666  0x0000588a (User func) args[1] r=0  (usage 9)
ALICEBLUE                          63455  0x0000f7df (const dword)  (not used)
ALL                                65535  0x0000ffff (const dword)  (not used)
ana_HS                              -533  0xfffffdeb (PmmC func) args[7] r=0  (not used)
ANTIQUEWHITE                       65370  0x0000ff5a (const dword)  (not used)
APPEND                                 0  0x00000000 (const dword)  (not used)
AQUA                                2047  0x000007ff (const dword)  (not used)
AQUAMARINE                         32762  0x00007ffa (const dword)  (not used)
AUDIO_ENABLE                          17  0x00000011 (const dword)  (not used)
AZURE                              63487  0x0000f7ff (const dword)  (not used)
BACKGROUND_COLOUR                     17  0x00000011 (const dword)  (usage 3)
BAUD_110                               0  0x00000000 (const dword)  (not used)
BAUD_115200                           13  0x0000000d (const dword)  (not used)
BAUD_1200                              3  0x00000003 (const dword)  (not used)
BAUD_128000                           14  0x0000000e (const dword)  (not used)
BAUD_14400                             7  0x00000007 (const dword)  (not used)
BAUD_19200                             8  0x00000008 (const dword)  (not used)
BAUD_2400                              4  0x00000004 (const dword)  (not used)
BAUD_256000                           15  0x0000000f (const dword)  (not used)
BAUD_300                               1  0x00000001 (const dword)  (not used)
BAUD_300000                           16  0x00000010 (const dword)  (not used)
BAUD_31250                             9  0x00000009 (const dword)  (not used)
BAUD_375000                           17  0x00000011 (const dword)  (not used)
BAUD_38400                            10  0x0000000a (const dword)  (not used)
BAUD_4800                              5  0x00000005 (const dword)  (not used)
BAUD_500000                           18  0x00000012 (const dword)  (not used)
BAUD_56000                            11  0x0000000b (const dword)  (not used)
BAUD_57600                            12  0x0000000c (const dword)  (not used)
BAUD_600                               2  0x00000002 (const dword)  (not used)
BAUD_600000                           19  0x00000013 (const dword)  (not used)
BAUD_9600                              6  0x00000006 (const dword)  (not used)
BEIGE                              63419  0x0000f7bb (const dword)  (not used)
BEVEL_RADIUS                          27  0x0000001b (const dword)  (not used)
BEVEL_SHADOW                          29  0x0000001d (const dword)  (not used)
BEVEL_WIDTH                           28  0x0000001c (const dword)  (not used)
BIN                                    2  0x00000002 (const dword)  (not used)
BIN1                                 258  0x00000102 (const dword)  (not used)
BIN10                               2562  0x00000a02 (const dword)  (not used)
BIN10Z                              6658  0x00001a02 (const dword)  (not used)
BIN10ZB                            10754  0x00002a02 (const dword)  (not used)
BIN11                               2818  0x00000b02 (const dword)  (not used)
BIN11Z                              6914  0x00001b02 (const dword)  (not used)
BIN11ZB                            11010  0x00002b02 (const dword)  (not used)
BIN12                               3074  0x00000c02 (const dword)  (not used)
BIN12Z                              7170  0x00001c02 (const dword)  (not used)
BIN12ZB                            11266  0x00002c02 (const dword)  (not used)
BIN13                               3330  0x00000d02 (const dword)  (not used)
BIN13Z                              7426  0x00001d02 (const dword)  (not used)
BIN13ZB                            11522  0x00002d02 (const dword)  (not used)
BIN14                               3586  0x00000e02 (const dword)  (not used)
BIN14Z                              7682  0x00001e02 (const dword)  (not used)
BIN14ZB                            11778  0x00002e02 (const dword)  (not used)
BIN15                               3842  0x00000f02 (const dword)  (not used)
BIN15Z                              7938  0x00001f02 (const dword)  (not used)
BIN15ZB                            12034  0x00002f02 (const dword)  (not used)
BIN16                                  2  0x00000002 (const dword)  (not used)
BIN16Z                              4098  0x00001002 (const dword)  (not used)
BIN16ZB                             8194  0x00002002 (const dword)  (not used)
BIN1Z                               4354  0x00001102 (const dword)  (not used)
BIN1ZB                              8450  0x00002102 (const dword)  (not used)
BIN2                                 514  0x00000202 (const dword)  (not used)
BIN2Z                               4610  0x00001202 (const dword)  (not used)
BIN2ZB                              8706  0x00002202 (const dword)  (not used)
BIN3                                 770  0x00000302 (const dword)  (not used)
BIN3Z                               4866  0x00001302 (const dword)  (not used)
BIN3ZB                              8962  0x00002302 (const dword)  (not used)
BIN4                                1026  0x00000402 (const dword)  (not used)
BIN4Z                               5122  0x00001402 (const dword)  (not used)
BIN4ZB                              9218  0x00002402 (const dword)  (not used)
BIN5                                1282  0x00000502 (const dword)  (not used)
BIN5Z                               5378  0x00001502 (const dword)  (not used)
BIN5ZB                              9474  0x00002502 (const dword)  (not used)
BIN6                                1538  0x00000602 (const dword)  (not used)
BIN6Z                               5634  0x00001602 (const dword)  (not used)
BIN6ZB                              9730  0x00002602 (const dword)  (not used)
BIN7                                1794  0x00000702 (const dword)  (not used)
BIN7Z                               5890  0x00001702 (const dword)  (not used)
BIN7ZB                              9986  0x00002702 (const dword)  (not used)
BIN8                                2050  0x00000802 (const dword)  (not used)
BIN8Z                               6146  0x00001802 (const dword)  (not used)
BIN8ZB                             10242  0x00002802 (const dword)  (not used)
BIN9                                2306  0x00000902 (const dword)  (not used)
BIN9Z                               6402  0x00001902 (const dword)  (not used)
BIN9ZB                             10498  0x00002902 (const dword)  (not used)
BINZ                                4098  0x00001002 (const dword)  (not used)
BINZB                               8194  0x00002002 (const dword)  (not used)
BISQUE                             65336  0x0000ff38 (const dword)  (not used)
BLACK                                  0  0x00000000 (const dword)  (usage 21)
BLANCHEDALMOND                     65369  0x0000ff59 (const dword)  (not used)
BLUE                                  31  0x0000001f (const dword)  (not used)
BLUEVIOLET                         35164  0x0000895c (const dword)  (not used)
BOLD                                  16  0x00000010 (const dword)  (not used)
BOTTOM_POS                             5  0x00000005 (const dword)  (not used)
BREAK                              65533  0x0000fffd (const dword)  (not used)
BROWN                              41285  0x0000a145 (const dword)  (not used)
BURLYWOOD                          56784  0x0000ddd0 (const dword)  (not used)
bus_ClearPins                       -119  0xffffff89 (PmmC func) args[1] r=0  (not used)
BUS_RD_PIN                             4  0x00000004 (const dword)  (not used)
bus_Read                            -117  0xffffff8b (PmmC func) args[0] r=1  (not used)
bus_Read8                           -122  0xffffff86 (PmmC func) args[0] r=1  (not used)
bus_SetChangeInterrupt              -120  0xffffff88 (PmmC func) args[2] r=1  (not used)
bus_SetPins                         -118  0xffffff8a (PmmC func) args[1] r=0  (not used)
BUS_WR_PIN                             3  0x00000003 (const dword)  (not used)
bus_Write8                          -121  0xffffff87 (PmmC func) args[1] r=0  (not used)
BUTTON_DOWN                            0  0x00000000 (const dword)  (not used)
BUTTON_UP                              1  0x00000001 (const dword)  (not used)
ByteSwap                             -49  0xffffffcf (PmmC func) args[1] r=1  (not used)
c4DButton                         UNRESOLVED  (not used)
C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS    2806  0x00000af6 (const ??? 0)  (not used)
CADETBLUE                          23796  0x00005cf4 (const dword)  (not used)
cAniButton                        UNRESOLVED  (not used)
cColorPicker                      UNRESOLVED  (not used)
cDipswitch                        UNRESOLVED  (not used)
charheight                           -12  0xfffffff4 (PmmC func) args[1] r=1  (not used)
CHARTREUSE                         32736  0x00007fe0 (const dword)  (not used)
charwidth                            -11  0xfffffff5 (PmmC func) args[1] r=1  (not used)
CHECKED                                0  0x00000000 (const dword)  (not used)
CHOCOLATE                          54083  0x0000d343 (const dword)  (not used)
CHR                                  129  0x00000081 (const dword)  (not used)
cKnob                             UNRESOLVED  (not used)
CLIPPING                              19  0x00000013 (const dword)  (not used)
cmd                                  402  0x00000192 (mem) word[80] (global)  (usage 84)
CMDLenMAX                             80  0x00000050 (const dword)  (usage 12)
ColorBGimage                          32  0x00000020 (const dword)  (usage 360)
COLOUR16                               0  0x00000000 (const dword)  (not used)
COLOUR8                                1  0x00000001 (const dword)  (not used)
COM0                               63492  0x0000f804 (const dword)  (usage 3)
COM1                               63493  0x0000f805 (const dword)  (not used)
com1_Count                          -249  0xffffff07 (PmmC func) args[0] r=1  (not used)
com1_Error                          -257  0xfffffeff (PmmC func) args[0] r=1  (not used)
com1_Full                           -253  0xffffff03 (PmmC func) args[0] r=1  (not used)
com1_Init                           -233  0xffffff17 (PmmC func) args[3] r=0  (not used)
com1_InitBrk                        -578  0xfffffdbe (PmmC func) args[3] r=0  (not used)
com1_Reset                          -245  0xffffff0b (PmmC func) args[0] r=0  (not used)
COM1_RX_pin                         -226  0xffffff1e (PmmC func) args[1] r=1  (not used)
com1_RXblock                        -558  0xfffffdd2 (PmmC func) args[2] r=0  (not used)
com1_Sync                           -261  0xfffffefb (PmmC func) args[0] r=1  (not used)
COM1_TX_pin                         -229  0xffffff1b (PmmC func) args[1] r=1  (not used)
com1_TXblock                        -557  0xfffffdd3 (PmmC func) args[2] r=0  (not used)
com1_TXbuffer                       -265  0xfffffef7 (PmmC func) args[3] r=0  (not used)
com1_TXbufferBrk                    -574  0xfffffdc2 (PmmC func) args[3] r=0  (not used)
com1_TXbufferHold                   -277  0xfffffeeb (PmmC func) args[1] r=1  (not used)
com1_TXcount                        -269  0xfffffef3 (PmmC func) args[0] r=1  (not used)
com1_TXemptyEvent                   -273  0xfffffeef (PmmC func) args[1] r=1  (not used)
COM2                               63494  0x0000f806 (const dword)  (not used)
com2_Count                          -250  0xffffff06 (PmmC func) args[0] r=1  (not used)
com2_Error                          -258  0xfffffefe (PmmC func) args[0] r=1  (not used)
com2_Full                           -254  0xffffff02 (PmmC func) args[0] r=1  (not used)
com2_Init                           -234  0xffffff16 (PmmC func) args[3] r=0  (not used)
com2_InitBrk                        -579  0xfffffdbd (PmmC func) args[3] r=0  (not used)
com2_Reset                          -246  0xffffff0a (PmmC func) args[0] r=0  (not used)
COM2_RX_pin                         -227  0xffffff1d (PmmC func) args[1] r=1  (not used)
com2_RXblock                        -560  0xfffffdd0 (PmmC func) args[2] r=0  (not used)
com2_Sync                           -262  0xfffffefa (PmmC func) args[0] r=1  (not used)
COM2_TX_pin                         -230  0xffffff1a (PmmC func) args[1] r=1  (not used)
com2_TXblock                        -559  0xfffffdd1 (PmmC func) args[2] r=0  (not used)
com2_TXbuffer                       -266  0xfffffef6 (PmmC func) args[3] r=0  (not used)
com2_TXbufferBrk                    -575  0xfffffdc1 (PmmC func) args[3] r=0  (not used)
com2_TXbufferHold                   -278  0xfffffeea (PmmC func) args[1] r=1  (not used)
com2_TXcount                        -270  0xfffffef2 (PmmC func) args[0] r=1  (not used)
com2_TXemptyEvent                   -274  0xfffffeee (PmmC func) args[1] r=1  (not used)
COM3                               63495  0x0000f807 (const dword)  (not used)
com3_Count                          -251  0xffffff05 (PmmC func) args[0] r=1  (not used)
com3_Error                          -259  0xfffffefd (PmmC func) args[0] r=1  (not used)
com3_Full                           -255  0xffffff01 (PmmC func) args[0] r=1  (not used)
com3_Init                           -235  0xffffff15 (PmmC func) args[3] r=0  (not used)
com3_InitBrk                        -580  0xfffffdbc (PmmC func) args[3] r=0  (not used)
com3_Reset                          -247  0xffffff09 (PmmC func) args[0] r=0  (not used)
COM3_RX_pin                         -228  0xffffff1c (PmmC func) args[1] r=1  (not used)
com3_RXblock                        -562  0xfffffdce (PmmC func) args[2] r=0  (not used)
com3_Sync                           -263  0xfffffef9 (PmmC func) args[0] r=1  (not used)
COM3_TX_pin                         -231  0xffffff19 (PmmC func) args[1] r=1  (not used)
com3_TXblock                        -561  0xfffffdcf (PmmC func) args[2] r=0  (not used)
com3_TXbuffer                       -267  0xfffffef5 (PmmC func) args[3] r=0  (not used)
com3_TXbufferBrk                    -576  0xfffffdc0 (PmmC func) args[3] r=0  (not used)
com3_TXbufferHold                   -279  0xfffffee9 (PmmC func) args[1] r=1  (not used)
com3_TXcount                        -271  0xfffffef1 (PmmC func) args[0] r=1  (not used)
com3_TXemptyEvent                   -275  0xfffffeed (PmmC func) args[1] r=1  (not used)
com_Count                           -248  0xffffff08 (PmmC func) args[0] r=1  (usage 3)
com_Error                           -256  0xffffff00 (PmmC func) args[0] r=1  (not used)
com_Full                            -252  0xffffff04 (PmmC func) args[0] r=1  (not used)
com_Init                            -232  0xffffff18 (PmmC func) args[3] r=0  (usage 3)
com_InitBrk                         -577  0xfffffdbf (PmmC func) args[3] r=0  (not used)
com_Mode                            -280  0xfffffee8 (PmmC func) args[4] r=1  (not used)
com_Reset                           -244  0xffffff0c (PmmC func) args[0] r=0  (not used)
com_RXblock                         -282  0xfffffee6 (PmmC func) args[2] r=0  (not used)
com_SetBaud                         -225  0xffffff1f (PmmC func) args[2] r=1  (usage 3)
com_Sync                            -260  0xfffffefc (PmmC func) args[0] r=1  (not used)
com_TXblock                         -281  0xfffffee7 (PmmC func) args[2] r=0  (not used)
com_TXbuffer                        -264  0xfffffef8 (PmmC func) args[3] r=0  (usage 3)
com_TXbufferBrk                     -573  0xfffffdc3 (PmmC func) args[3] r=0  (not used)
com_TXbufferHold                    -276  0xfffffeec (PmmC func) args[1] r=1  (not used)
com_TXcount                         -268  0xfffffef4 (PmmC func) args[0] r=1  (not used)
com_TXemptyEvent                    -272  0xfffffef0 (PmmC func) args[1] r=1  (not used)
comRX                                322  0x00000142 (mem) word[40] (global)  (usage 3)
CONTRAST                              25  0x00000019 (const dword)  (not used)
CORAL                              64490  0x0000fbea (const dword)  (not used)
CORNFLOWERBLUE                     25789  0x000064bd (const dword)  (not used)
CORNSILK                           65499  0x0000ffdb (const dword)  (not used)
COS                                  -58  0xffffffc6 (PmmC func) args[1] r=1  (not used)
COUNT_EDGE                             3  0x00000003 (const dword)  (not used)
COUNT_FALL                             2  0x00000002 (const dword)  (not used)
COUNT_OFF                              0  0x00000000 (const dword)  (not used)
COUNT_RISE                             1  0x00000001 (const dword)  (not used)
crc_16                              -567  0xfffffdc9 (PmmC func) args[2] r=1  (not used)
crc_CCITT                           -569  0xfffffdc7 (PmmC func) args[3] r=1  (not used)
crc_CSUM_8                          -566  0xfffffdca (PmmC func) args[2] r=1  (not used)
crc_MODBUS                          -568  0xfffffdc8 (PmmC func) args[2] r=1  (not used)
CRIMSON                            55463  0x0000d8a7 (const dword)  (not used)
cRockerswitch                     UNRESOLVED  (not used)
cRotaryswitch                     UNRESOLVED  (not used)
cSlider                           UNRESOLVED  (not used)
cTrackbar                         UNRESOLVED  (not used)
CurInputData                         318  0x0000013e (mem) word (global)  (usage 63)
CurrentForm                          304  0x00000130 (mem) word (global)  (usage 51)
cUserButton                       UNRESOLVED  (not used)
cWinbutton                        UNRESOLVED  (not used)
CY                                   -64  0xffffffc0 (PmmC func) args[0] r=1  (not used)
CYAN                                2047  0x000007ff (const dword)  (not used)
DARKBLUE                              17  0x00000011 (const dword)  (not used)
DARKCYAN                            1105  0x00000451 (const dword)  (not used)
DARKGOLDENROD                      48161  0x0000bc21 (const dword)  (not used)
DARKGRAY                           44373  0x0000ad55 (const dword)  (not used)
DARKGREEN                            800  0x00000320 (const dword)  (not used)
DARKKHAKI                          48557  0x0000bdad (const dword)  (not used)
DARKMAGENTA                        34833  0x00008811 (const dword)  (not used)
DARKOLIVEGREEN                     21317  0x00005345 (const dword)  (not used)
DARKORANGE                         64608  0x0000fc60 (const dword)  (not used)
DARKORCHID                         39321  0x00009999 (const dword)  (not used)
DARKRED                            34816  0x00008800 (const dword)  (not used)
DARKSALMON                         60591  0x0000ecaf (const dword)  (not used)
DARKSEAGREEN                       36337  0x00008df1 (const dword)  (not used)
DARKSLATEBLUE                      18929  0x000049f1 (const dword)  (not used)
DARKSLATEGRAY                      10857  0x00002a69 (const dword)  (not used)
DARKTURQUOISE                       1658  0x0000067a (const dword)  (not used)
DARKVIOLET                         36890  0x0000901a (const dword)  (not used)
DEBUG_MODE                            64  0x00000040 (const dword)  (not used)
DEC                                 1290  0x0000050a (const dword)  (not used)
DEC1                                 266  0x0000010a (const dword)  (not used)
DEC1Z                               4362  0x0000110a (const dword)  (not used)
DEC1ZB                              8458  0x0000210a (const dword)  (not used)
DEC2                                 522  0x0000020a (const dword)  (not used)
DEC2Z                               4618  0x0000120a (const dword)  (not used)
DEC2ZB                              8714  0x0000220a (const dword)  (not used)
DEC3                                 778  0x0000030a (const dword)  (not used)
DEC3Z                               4874  0x0000130a (const dword)  (not used)
DEC3ZB                              8970  0x0000230a (const dword)  (not used)
DEC4                                1034  0x0000040a (const dword)  (not used)
DEC4Z                               5130  0x0000140a (const dword)  (not used)
DEC4ZB                              9226  0x0000240a (const dword)  (not used)
DEC5                                1290  0x0000050a (const dword)  (not used)
DEC5Z                               5386  0x0000150a (const dword)  (not used)
DEC5ZB                              9482  0x0000250a (const dword)  (not used)
DECZ                                5386  0x0000150a (const dword)  (not used)
DECZB                               9482  0x0000250a (const dword)  (not used)
DEEPPINK                           63666  0x0000f8b2 (const dword)  (not used)
DEEPSKYBLUE                         1535  0x000005ff (const dword)  (not used)
DIABLO                                 3  0x00000003 (const dword)  (usage 3)
DIMGRAY                            27469  0x00006b4d (const dword)  (not used)
DISABLE                                0  0x00000000 (const dword)  (not used)
DISK_BUF                              15  0x0000000f (const dword)  (not used)
DISK_DATA_HI                           7  0x00000007 (const dword)  (not used)
DISK_DATA_LO                           6  0x00000006 (const dword)  (not used)
DISK_FAT_HI                            3  0x00000003 (const dword)  (not used)
DISK_FAT_LO                            2  0x00000002 (const dword)  (not used)
DISK_FATCOPIES                        12  0x0000000c (const dword)  (not used)
DISK_FATSIZE                          11  0x0000000b (const dword)  (not used)
DISK_FIRST_SECT_HI                     1  0x00000001 (const dword)  (not used)
DISK_FIRST_SECT_LO                     0  0x00000000 (const dword)  (not used)
DISK_MAXCLUS_HI                        9  0x00000009 (const dword)  (not used)
DISK_MAXCLUS_LO                        8  0x00000008 (const dword)  (not used)
DISK_MAXROOT                          10  0x0000000a (const dword)  (not used)
DISK_ROOT_HI                           5  0x00000005 (const dword)  (not used)
DISK_ROOT_LO                           4  0x00000004 (const dword)  (not used)
DISK_SECT_PER_CLUS                    13  0x0000000d (const dword)  (not used)
DISK_TYPE                             14  0x0000000e (const dword)  (not used)
disp_BlitPixelsFromCOM0             -372  0xfffffe8c (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM1             -563  0xfffffdcd (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM2             -564  0xfffffdcc (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM3             -565  0xfffffdcb (PmmC func) args[0] r=0  (not used)
disp_Disconnect                     -371  0xfffffe8d (PmmC func) args[0] r=0  (not used)
disp_Init                           -370  0xfffffe8e (PmmC func) args[0] r=0  (not used)
disp_ReadWord                       -367  0xfffffe91 (PmmC func) args[0] r=1  (not used)
disp_setGRAM                        -363  0xfffffe95 (PmmC func) args[4] r=0  (not used)
disp_SetReg                         -362  0xfffffe96 (PmmC func) args[2] r=0  (not used)
disp_Sync                           -369  0xfffffe8f (PmmC func) args[1] r=0  (not used)
disp_WrGRAM                         -364  0xfffffe94 (PmmC func) args[1] r=0  (not used)
disp_WriteControl                   -365  0xfffffe93 (PmmC func) args[1] r=0  (not used)
disp_WriteWord                      -366  0xfffffe92 (PmmC func) args[1] r=0  (not used)
DODGERBLUE                          7327  0x00001c9f (const dword)  (not used)
DoGFXObjects                       22034  0x00005612 (User func) args[0] r=0  (usage 6)
DOWN                                   0  0x00000000 (const dword)  (not used)
DSK                                63490  0x0000f802 (const dword)  (not used)
ENABLE                                 1  0x00000001 (const dword)  (not used)
EVE_SP                               -65  0xffffffbf (PmmC func) args[0] r=1  (not used)
EVE_SSIZE                            -66  0xffffffbe (PmmC func) args[0] r=1  (not used)
EXTERN                               N/A         N/A (macro)  /**/   (not used)
FALSE_REASON                         141  0x0000008d (const dword)  (not used)
FCY_1                                 20  0x00000014 (const dword)  (not used)
FCY_256                               23  0x00000017 (const dword)  (not used)
FCY_64                                22  0x00000016 (const dword)  (not used)
FCY_8                                 21  0x00000015 (const dword)  (not used)
FE_CANNOT_INIT                        15  0x0000000f (const dword)  (not used)
FE_CANNOT_READ_MBR                    16  0x00000010 (const dword)  (not used)
FE_DIR_FULL                           12  0x0000000c (const dword)  (not used)
FE_DISK_FULL                          13  0x0000000d (const dword)  (not used)
FE_DISK_NOT_MNTD                       6  0x00000006 (const dword)  (not used)
FE_EOF                                10  0x0000000a (const dword)  (not used)
FE_FAT_EOF                             9  0x00000009 (const dword)  (not used)
FE_FILE_NOT_FOUND                      7  0x00000007 (const dword)  (not used)
FE_FILE_OVERWRITE                     14  0x0000000e (const dword)  (not used)
FE_FILE_TIMEOUT                       26  0x0000001a (const dword)  (not used)
FE_FIND_ERROR                         19  0x00000013 (const dword)  (not used)
FE_IDE_ERROR                           1  0x00000001 (const dword)  (not used)
FE_INVALID_BR                          5  0x00000005 (const dword)  (not used)
FE_INVALID_CLUSTER                    11  0x0000000b (const dword)  (not used)
FE_INVALID_FILE                        8  0x00000008 (const dword)  (not used)
FE_INVALID_FNAME                      20  0x00000014 (const dword)  (not used)
FE_INVALID_MBR                         4  0x00000004 (const dword)  (not used)
FE_INVALID_MEDIA                      21  0x00000015 (const dword)  (not used)
FE_INVALID_MODE                       18  0x00000012 (const dword)  (not used)
FE_MALLOC_FAILED                      17  0x00000011 (const dword)  (not used)
FE_NOT_PRESENT                         2  0x00000002 (const dword)  (not used)
FE_OK                                  0  0x00000000 (const dword)  (not used)
FE_PARTITION_TYPE                      3  0x00000003 (const dword)  (not used)
FE_SECTOR_READ_FAIL                   22  0x00000016 (const dword)  (not used)
FE_SECTOR_WRITE_FAIL                  23  0x00000017 (const dword)  (not used)
FILE_ATTRIBUTES                       18  0x00000012 (const dword)  (not used)
FILE_BUFFER                           22  0x00000016 (const dword)  (not used)
file_Close                          -431  0xfffffe51 (PmmC func) args[1] r=1  (not used)
file_Count                          -425  0xfffffe57 (PmmC func) args[1] r=1  (not used)
FILE_CURR_CLUSTER                      1  0x00000001 (const dword)  (not used)
FILE_CURR_SECTOR                       2  0x00000002 (const dword)  (not used)
FILE_CURR_SECTOR_POS                   3  0x00000003 (const dword)  (not used)
FILE_CURR_SECTOR_TOP                   4  0x00000004 (const dword)  (not used)
FILE_DATE                             10  0x0000000a (const dword)  (not used)
file_Dir                            -426  0xfffffe56 (PmmC func) args[1] r=1  (not used)
FILE_DISK                             21  0x00000015 (const dword)  (not used)
FILE_ENTRY                            20  0x00000014 (const dword)  (not used)
file_Erase                          -446  0xfffffe42 (PmmC func) args[1] r=1  (not used)
file_Error                          -424  0xfffffe58 (PmmC func) args[0] r=1  (not used)
file_Exec                           -450  0xfffffe3e (PmmC func) args[2] r=1  (not used)
file_Exists                         -429  0xfffffe53 (PmmC func) args[1] r=1  (not used)
file_FindFirst                      -427  0xfffffe55 (PmmC func) args[1] r=1  (not used)
file_FindNext                       -428  0xfffffe54 (PmmC func) args[0] r=1  (not used)
FILE_FIRST_CLUSTER                     0  0x00000000 (const dword)  (not used)
file_GetC                           -441  0xfffffe47 (PmmC func) args[1] r=1  (usage 3)
file_GetS                           -445  0xfffffe43 (PmmC func) args[3] r=1  (not used)
file_GetW                           -443  0xfffffe45 (PmmC func) args[1] r=1  (usage 3)
file_Image                          -438  0xfffffe4a (PmmC func) args[3] r=1  (not used)
file_Index                          -434  0xfffffe4e (PmmC func) args[4] r=1  (not used)
file_LoadFunction                   -448  0xfffffe40 (PmmC func) args[1] r=1  (not used)
file_LoadImageControl               -451  0xfffffe3d (PmmC func) args[3] r=1  (usage 15)
FILE_MODE                             17  0x00000011 (const dword)  (not used)
file_Mount                          -452  0xfffffe3c (PmmC func) args[0] r=1  (usage 6)
FILE_NAME                             11  0x0000000b (const dword)  (not used)
file_Open                           -430  0xfffffe52 (PmmC func) args[2] r=1  (usage 3)
FILE_PAGEFLAG                         19  0x00000013 (const dword)  (not used)
file_PlayWAV                        -454  0xfffffe3a (PmmC func) args[1] r=1  (not used)
file_PutC                           -440  0xfffffe48 (PmmC func) args[2] r=1  (not used)
file_PutS                           -444  0xfffffe44 (PmmC func) args[2] r=1  (not used)
file_PutW                           -442  0xfffffe46 (PmmC func) args[2] r=1  (not used)
file_Read                           -432  0xfffffe50 (PmmC func) args[3] r=1  (not used)
file_Rename                         -455  0xfffffe39 (PmmC func) args[2] r=1  (not used)
file_Rewind                         -447  0xfffffe41 (PmmC func) args[1] r=1  (not used)
file_Run                            -449  0xfffffe3f (PmmC func) args[2] r=1  (not used)
file_ScreenCapture                  -439  0xfffffe49 (PmmC func) args[5] r=1  (not used)
file_Seek                           -433  0xfffffe4f (PmmC func) args[3] r=1  (usage 3)
FILE_SEEK_POS_HI                       6  0x00000006 (const dword)  (not used)
FILE_SEEK_POS_LO                       5  0x00000005 (const dword)  (not used)
file_SetDate                        -456  0xfffffe38 (PmmC func) args[7] r=1  (not used)
file_Size                           -437  0xfffffe4b (PmmC func) args[3] r=1  (not used)
FILE_SIZE_HI                           8  0x00000008 (const dword)  (not used)
FILE_SIZE_LO                           7  0x00000007 (const dword)  (not used)
file_Tell                           -435  0xfffffe4d (PmmC func) args[3] r=1  (not used)
FILE_TIME                              9  0x00000009 (const dword)  (not used)
file_Unmount                        -453  0xfffffe3b (PmmC func) args[0] r=0  (not used)
file_Write                          -436  0xfffffe4c (PmmC func) args[3] r=1  (not used)
FILLPATTERN_0                      65504  0x0000ffe0 (const dword)  (not used)
FILLPATTERN_1                      65505  0x0000ffe1 (const ??? 0)  (not used)
FILLPATTERN_10                     65514  0x0000ffea (const ??? 0)  (not used)
FILLPATTERN_11                     65515  0x0000ffeb (const ??? 0)  (not used)
FILLPATTERN_12                     65516  0x0000ffec (const ??? 0)  (not used)
FILLPATTERN_13                     65517  0x0000ffed (const ??? 0)  (not used)
FILLPATTERN_14                     65518  0x0000ffee (const ??? 0)  (not used)
FILLPATTERN_15                     65519  0x0000ffef (const ??? 0)  (not used)
FILLPATTERN_16                     65520  0x0000fff0 (const ??? 0)  (not used)
FILLPATTERN_17                     65521  0x0000fff1 (const ??? 0)  (not used)
FILLPATTERN_18                     65522  0x0000fff2 (const ??? 0)  (not used)
FILLPATTERN_19                     65523  0x0000fff3 (const ??? 0)  (not used)
FILLPATTERN_2                      65506  0x0000ffe2 (const ??? 0)  (not used)
FILLPATTERN_20                     65524  0x0000fff4 (const ??? 0)  (not used)
FILLPATTERN_21                     65525  0x0000fff5 (const ??? 0)  (not used)
FILLPATTERN_22                     65526  0x0000fff6 (const ??? 0)  (not used)
FILLPATTERN_23                     65527  0x0000fff7 (const ??? 0)  (not used)
FILLPATTERN_24                     65528  0x0000fff8 (const ??? 0)  (not used)
FILLPATTERN_25                     65529  0x0000fff9 (const ??? 0)  (not used)
FILLPATTERN_26                     65530  0x0000fffa (const ??? 0)  (not used)
FILLPATTERN_27                     65531  0x0000fffb (const ??? 0)  (not used)
FILLPATTERN_28                     65532  0x0000fffc (const ??? 0)  (not used)
FILLPATTERN_29                     65533  0x0000fffd (const ??? 0)  (not used)
FILLPATTERN_3                      65507  0x0000ffe3 (const ??? 0)  (not used)
FILLPATTERN_30                     65534  0x0000fffe (const ??? 0)  (not used)
FILLPATTERN_31                     65535  0x0000ffff (const ??? 0)  (not used)
FILLPATTERN_4                      65508  0x0000ffe4 (const ??? 0)  (not used)
FILLPATTERN_5                      65509  0x0000ffe5 (const ??? 0)  (not used)
FILLPATTERN_6                      65510  0x0000ffe6 (const ??? 0)  (not used)
FILLPATTERN_7                      65511  0x0000ffe7 (const ??? 0)  (not used)
FILLPATTERN_8                      65512  0x0000ffe8 (const ??? 0)  (not used)
FILLPATTERN_9                      65513  0x0000ffe9 (const ??? 0)  (not used)
FIREBRICK                          45316  0x0000b104 (const dword)  (not used)
flash_Bank                          -498  0xfffffe0e (PmmC func) args[0] r=1  (not used)
flash_Blit1                         -507  0xfffffe05 (PmmC func) args[4] r=1  (not used)
flash_Blit16                        -503  0xfffffe09 (PmmC func) args[3] r=1  (not used)
flash_Blit2                         -506  0xfffffe06 (PmmC func) args[4] r=1  (not used)
flash_Blit4                         -505  0xfffffe07 (PmmC func) args[4] r=1  (not used)
flash_Blit8                         -504  0xfffffe08 (PmmC func) args[3] r=1  (not used)
flash_Copy                          -496  0xfffffe10 (PmmC func) args[4] r=1  (not used)
flash_EraseBank                     -499  0xfffffe0d (PmmC func) args[2] r=1  (not used)
flash_Exec                          -508  0xfffffe04 (PmmC func) args[2] r=1  (not used)
flash_GetByte                       -494  0xfffffe12 (PmmC func) args[2] r=1  (not used)
flash_GetWord                       -495  0xfffffe11 (PmmC func) args[2] r=1  (not used)
flash_LoadFile                      -500  0xfffffe0c (PmmC func) args[2] r=1  (not used)
flash_putstr                        -502  0xfffffe0a (PmmC func) args[2] r=1  (not used)
FLASH_READ_PROTECT                    16  0x00000010 (const dword)  (not used)
flash_Run                           -497  0xfffffe0f (PmmC func) args[1] r=1  (not used)
FLASH_WRITE_PROTECT                   32  0x00000020 (const dword)  (not used)
flash_WriteBlock                    -501  0xfffffe0b (PmmC func) args[3] r=1  (not used)
FLASHBANK_0                            0  0x00000000 (const dword)  (not used)
FLASHBANK_1                            1  0x00000001 (const dword)  (usage 3)
FLASHBANK_2                            2  0x00000002 (const dword)  (not used)
FLASHBANK_3                            3  0x00000003 (const dword)  (not used)
FLASHBANK_4                            4  0x00000004 (const dword)  (not used)
FLASHBANK_5                            5  0x00000005 (const dword)  (not used)
FLORALWHITE                        65502  0x0000ffde (const dword)  (not used)
flt_ABS                              -84  0xffffffac (PmmC func) args[2] r=1  (not used)
flt_ACOS                             -85  0xffffffab (PmmC func) args[2] r=1  (not used)
flt_ADD                              -97  0xffffff9f (PmmC func) args[3] r=1  (not used)
flt_ASIN                             -86  0xffffffaa (PmmC func) args[2] r=1  (not used)
flt_ATAN                             -87  0xffffffa9 (PmmC func) args[2] r=1  (not used)
flt_CEIL                             -90  0xffffffa6 (PmmC func) args[2] r=1  (not used)
flt_COS                              -88  0xffffffa8 (PmmC func) args[2] r=1  (not used)
flt_DIV                             -100  0xffffff9c (PmmC func) args[3] r=1  (not used)
flt_EQ                              -101  0xffffff9b (PmmC func) args[2] r=1  (not used)
flt_EXP                              -89  0xffffffa7 (PmmC func) args[2] r=1  (not used)
flt_FLOOR                            -91  0xffffffa5 (PmmC func) args[2] r=1  (not used)
flt_FTOI                            -108  0xffffff94 (PmmC func) args[1] r=1  (not used)
flt_GE                              -104  0xffffff98 (PmmC func) args[2] r=1  (not used)
flt_GT                              -103  0xffffff99 (PmmC func) args[2] r=1  (not used)
flt_ITOF                             -79  0xffffffb1 (PmmC func) args[2] r=1  (not used)
flt_LE                              -106  0xffffff96 (PmmC func) args[2] r=1  (not used)
flt_LOG                              -93  0xffffffa3 (PmmC func) args[2] r=1  (not used)
flt_LT                              -105  0xffffff97 (PmmC func) args[2] r=1  (not used)
flt_LTOF                             -81  0xffffffaf (PmmC func) args[2] r=1  (not used)
flt_MUL                              -99  0xffffff9d (PmmC func) args[3] r=1  (not used)
flt_NE                              -102  0xffffff9a (PmmC func) args[2] r=1  (not used)
flt_POW                              -96  0xffffffa0 (PmmC func) args[3] r=1  (not used)
flt_PRINT                            -83  0xffffffad (PmmC func) args[2] r=1  (not used)
flt_PRINTxy                         -109  0xffffff93 (PmmC func) args[4] r=1  (not used)
flt_SGN                             -107  0xffffff95 (PmmC func) args[1] r=1  (not used)
flt_SIN                              -92  0xffffffa4 (PmmC func) args[2] r=1  (not used)
flt_SQR                              -94  0xffffffa2 (PmmC func) args[2] r=1  (not used)
flt_SUB                              -98  0xffffff9e (PmmC func) args[3] r=1  (not used)
flt_TAN                              -95  0xffffffa1 (PmmC func) args[2] r=1  (not used)
flt_UITOF                            -80  0xffffffb0 (PmmC func) args[2] r=1  (not used)
flt_ULTOF                            -82  0xffffffae (PmmC func) args[2] r=1  (not used)
flt_VAL                              -78  0xffffffb2 (PmmC func) args[2] r=1  (not used)
FONT1                                  1  0x00000001 (const dword)  (not used)
FONT2                                  2  0x00000002 (const dword)  (not used)
FONT3                                  3  0x00000003 (const dword)  (not used)
FONT_1                                 1  0x00000001 (const dword)  (not used)
FONT_10                               10  0x0000000a (const dword)  (not used)
FONT_11                               11  0x0000000b (const dword)  (not used)
FONT_2                                 2  0x00000002 (const dword)  (not used)
FONT_3                                 3  0x00000003 (const dword)  (not used)
FONT_4                                 4  0x00000004 (const dword)  (not used)
FONT_5                                 5  0x00000005 (const dword)  (not used)
FONT_6                                 6  0x00000006 (const dword)  (not used)
FONT_7                                 7  0x00000007 (const dword)  (not used)
FONT_8                                 8  0x00000008 (const dword)  (not used)
FONT_9                                 9  0x00000009 (const dword)  (not used)
FONT_ID                                2  0x00000002 (const dword)  (not used)
FONT_SIZE                              2  0x00000002 (const dword)  (not used)
FORESTGREEN                         9284  0x00002444 (const dword)  (not used)
FormBGcolors                       18527  0x0000485fFormBGcolors                       18527  0x0000485f (mem) word[118] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 14)
FormBGcolors                      UNRESOLVED  (usage 4)
FormEndIndex                         243  0x000000f3FormEndIndex                         243  0x000000f3 (mem) word[118] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 6)
FormStartIndex                         7  0x00000007FormStartIndex                         7  0x00000007 (mem) word[118] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 10)
FormStartIndex                    UNRESOLVED  (usage 2)
FRAME_DELAY                           22  0x00000016 (const dword)  (not used)
FUCHSIA                            63519  0x0000f81f (const dword)  (not used)
GAINSBORO                          57083  0x0000defb (const dword)  (not used)
gbutton                           UNRESOLVED  (usage 2)
Gen4_ULCD_35DCT_CLB_DIABLO16_GFX       0  0x00000000 (const ??? 0)  (not used)
GFX                                63489  0x0000f801 (const dword)  (not used)
gfx_332to565                        -165  0xffffff5b (PmmC func) args[1] r=1  (not used)
gfx_565to332                        -166  0xffffff5a (PmmC func) args[1] r=1  (not used)
gfx_Arc                             -172  0xffffff54 (PmmC func) args[7] r=0  (not used)
gfx_BevelRadius                     -194  0xffffff3e (PmmC func) args[1] r=1  (not used)
gfx_BevelShadow                     -196  0xffffff3c (PmmC func) args[1] r=1  (not used)
gfx_BevelWidth                      -195  0xffffff3d (PmmC func) args[1] r=1  (not used)
gfx_BGcolour                        -184  0xffffff48 (PmmC func) args[1] r=1  (not used)
GFX_BOTTOM                            51  0x00000033 (const dword)  (not used)
gfx_BoxTo                           -149  0xffffff6b (PmmC func) args[2] r=0  (not used)
gfx_Bullet                          -146  0xffffff6e (PmmC func) args[1] r=0  (not used)
gfx_Button                          -155  0xffffff65 (PmmC func) args[9] r=1  (not used)
gfx_Button2                         -156  0xffffff64 (PmmC func) args[8] r=0  (not used)
gfx_Button3                         -157  0xffffff63 (PmmC func) args[8] r=0  (not used)
gfx_ChangeColour                    -151  0xffffff69 (PmmC func) args[2] r=0  (not used)
gfx_CheckBox                        -158  0xffffff62 (PmmC func) args[8] r=0  (not used)
gfx_Circle                          -136  0xffffff78 (PmmC func) args[4] r=0  (not used)
gfx_CircleFilled                    -137  0xffffff77 (PmmC func) args[4] r=0  (not used)
GFX_CLIP_BOTTOM                      114  0x00000072 (const dword)  (not used)
GFX_CLIP_BOTTOM_VAL                  110  0x0000006e (const dword)  (not used)
GFX_CLIP_LEFT                        111  0x0000006f (const dword)  (not used)
GFX_CLIP_LEFT_VAL                    107  0x0000006b (const dword)  (not used)
GFX_CLIP_RIGHT                       113  0x00000071 (const dword)  (not used)
GFX_CLIP_RIGHT_VAL                   109  0x0000006d (const dword)  (not used)
GFX_CLIP_TOP                         112  0x00000070 (const dword)  (not used)
GFX_CLIP_TOP_VAL                     108  0x0000006c (const dword)  (not used)
gfx_Clipping                        -186  0xffffff46 (PmmC func) args[1] r=1  (usage 12)
gfx_ClipWindow                      -150  0xffffff6a (PmmC func) args[4] r=0  (usage 6)
gfx_Cls                             -126  0xffffff82 (PmmC func) args[0] r=0  (usage 6)
gfx_Contrast                        -192  0xffffff40 (PmmC func) args[1] r=1  (usage 3)
gfx_Dot                             -145  0xffffff6f (PmmC func) args[0] r=0  (not used)
gfx_Ellipse                         -153  0xffffff67 (PmmC func) args[5] r=0  (not used)
gfx_EllipseFilled                   -154  0xffffff66 (PmmC func) args[5] r=0  (not used)
gfx_FillPattern                     -170  0xffffff56 (PmmC func) args[2] r=1  (not used)
gfx_FrameDelay                      -189  0xffffff43 (PmmC func) args[1] r=1  (not used)
gfx_Get                             -182  0xffffff4a (PmmC func) args[1] r=1  (not used)
gfx_GetPixel                        -139  0xffffff75 (PmmC func) args[2] r=1  (not used)
gfx_Gradient                        -176  0xffffff50 (PmmC func) args[7] r=0  (not used)
gfx_Hline                           -132  0xffffff7c (PmmC func) args[4] r=1  (not used)
gfx_IncX                            -147  0xffffff6d (PmmC func) args[0] r=1  (not used)
gfx_IncY                            -148  0xffffff6c (PmmC func) args[0] r=1  (not used)
GFX_LAST_CHAR_HEIGHT                 120  0x00000078 (const dword)  (not used)
GFX_LAST_CHAR_WIDTH                  119  0x00000077 (const dword)  (not used)
GFX_LAST_STR_HEIGHT                  122  0x0000007a (const dword)  (not used)
GFX_LAST_STR_WIDTH                   121  0x00000079 (const dword)  (not used)
GFX_LEFT                              48  0x00000030 (const dword)  (not used)
gfx_Line                            -131  0xffffff7d (PmmC func) args[5] r=0  (not used)
gfx_LinePattern                     -193  0xffffff3f (PmmC func) args[1] r=1  (not used)
gfx_LineRel                         -130  0xffffff7e (PmmC func) args[2] r=0  (not used)
gfx_LineTo                          -129  0xffffff7f (PmmC func) args[2] r=0  (not used)
gfx_MoveRel                         -128  0xffffff80 (PmmC func) args[2] r=0  (not used)
gfx_MoveTo                          -127  0xffffff81 (PmmC func) args[2] r=0  (usage 3)
gfx_ObjectColour                    -185  0xffffff47 (PmmC func) args[1] r=1  (not used)
gfx_Orbit                           -142  0xffffff72 (PmmC func) args[2] r=0  (not used)
gfx_OrbitInit                       -141  0xffffff73 (PmmC func) args[2] r=0  (not used)
gfx_Origin                          -169  0xffffff57 (PmmC func) args[2] r=0  (not used)
gfx_OutlineColour                   -191  0xffffff41 (PmmC func) args[1] r=1  (not used)
gfx_Panel                           -161  0xffffff5f (PmmC func) args[6] r=0  (not used)
gfx_PenSize                         -183  0xffffff49 (PmmC func) args[1] r=1  (not used)
gfx_PieSlice                        -171  0xffffff55 (PmmC func) args[9] r=0  (not used)
gfx_PointWithinBox                  -199  0xffffff39 (PmmC func) args[3] r=1  (not used)
gfx_PointWithinRectangle            -200  0xffffff38 (PmmC func) args[3] r=1  (not used)
gfx_Polygon                         -144  0xffffff70 (PmmC func) args[4] r=0  (not used)
gfx_PolygonFilled                   -168  0xffffff58 (PmmC func) args[4] r=0  (not used)
gfx_Polyline                        -143  0xffffff71 (PmmC func) args[4] r=0  (not used)
gfx_PutPixel                        -138  0xffffff76 (PmmC func) args[3] r=0  (not used)
gfx_RadioButton                     -159  0xffffff61 (PmmC func) args[8] r=0  (not used)
gfx_ReadBresLine                    -178  0xffffff4e (PmmC func) args[5] r=1  (not used)
gfx_ReadGRAMarea                    -180  0xffffff4c (PmmC func) args[5] r=1  (not used)
gfx_Rectangle                       -134  0xffffff7a (PmmC func) args[5] r=0  (not used)
gfx_RectangleFilled                 -135  0xffffff79 (PmmC func) args[5] r=0  (usage 9)
gfx_RGBto565                        -164  0xffffff5c (PmmC func) args[3] r=1  (not used)
GFX_RIGHT                             50  0x00000032 (const dword)  (not used)
gfx_RoundGradient                   -177  0xffffff4f (PmmC func) args[8] r=0  (not used)
gfx_RoundPanel                      -175  0xffffff51 (PmmC func) args[8] r=0  (not used)
gfx_RoundRect                       -173  0xffffff53 (PmmC func) args[6] r=0  (not used)
gfx_Scope                           -532  0xfffffdec (PmmC func) args[19] r=0  (not used)
gfx_ScreenCopyPaste                 -163  0xffffff5d (PmmC func) args[6] r=0  (not used)
gfx_ScreenMode                      -190  0xffffff42 (PmmC func) args[1] r=1  (usage 3)
gfx_Set                             -125  0xffffff83 (PmmC func) args[2] r=0  (usage 3)
gfx_SetClipRegion                   -152  0xffffff68 (PmmC func) args[0] r=0  (not used)
gfx_Slider                          -162  0xffffff5e (PmmC func) args[8] r=1  (not used)
gfx_Slider2                         -160  0xffffff60 (PmmC func) args[8] r=1  (not used)
gfx_Surround                        -174  0xffffff52 (PmmC func) args[7] r=0  (not used)
GFX_THUMB_BORDER_DARK                 76  0x0000004c (const dword)  (not used)
GFX_THUMB_BORDER_LIGHT                77  0x0000004d (const dword)  (not used)
GFX_THUMB_PERCENT                     75  0x0000004b (const dword)  (not used)
GFX_TOP                               49  0x00000031 (const dword)  (not used)
GFX_TOUCH_REGION_X1                  103  0x00000067 (const dword)  (not used)
GFX_TOUCH_REGION_X2                  105  0x00000069 (const dword)  (not used)
GFX_TOUCH_REGION_Y1                  104  0x00000068 (const dword)  (not used)
GFX_TOUCH_REGION_Y2                  106  0x0000006a (const dword)  (not used)
gfx_Transparency                    -188  0xffffff44 (PmmC func) args[1] r=1  (not used)
gfx_TransparentColour               -187  0xffffff45 (PmmC func) args[1] r=1  (not used)
gfx_Triangle                        -140  0xffffff74 (PmmC func) args[7] r=0  (not used)
gfx_TriangleFilled                  -167  0xffffff59 (PmmC func) args[7] r=0  (not used)
gfx_Vline                           -133  0xffffff7b (PmmC func) args[4] r=1  (not used)
gfx_WriteBresLine                   -179  0xffffff4d (PmmC func) args[5] r=0  (not used)
gfx_WriteGRAMarea                   -181  0xffffff4b (PmmC func) args[5] r=0  (not used)
GFX_X1                                52  0x00000034 (const dword)  (not used)
GFX_X2                                54  0x00000036 (const dword)  (not used)
GFX_X_ORG                             56  0x00000038 (const dword)  (not used)
GFX_XMAX                              46  0x0000002e (const dword)  (not used)
gfx_Xorigin                         -197  0xffffff3b (PmmC func) args[1] r=1  (not used)
GFX_Y1                                53  0x00000035 (const dword)  (not used)
GFX_Y2                                55  0x00000037 (const dword)  (not used)
GFX_Y_ORG                             57  0x00000039 (const dword)  (not used)
GFX_YMAX                              47  0x0000002f (const dword)  (not used)
gfx_Yorigin                         -198  0xffffff3a (PmmC func) args[1] r=1  (not used)
GHOSTWHITE                         65503  0x0000ffdf (const dword)  (not used)
GOLD                               65184  0x0000fea0 (const dword)  (not used)
GOLDENROD                          56612  0x0000dd24 (const dword)  (not used)
GRAD_DOWN                             32  0x00000020 (const dword)  (not used)
GRAD_LEFT                             80  0x00000050 (const dword)  (not used)
GRAD_RIGHT                            48  0x00000030 (const dword)  (not used)
GRAD_UP                               64  0x00000040 (const dword)  (not used)
GRAD_WAVE_HOR                        112  0x00000070 (const dword)  (not used)
GRAD_WAVE_VER                         96  0x00000060 (const dword)  (not used)
GRAM_PIXEL_COUNT_HI                  116  0x00000074 (const dword)  (not used)
GRAM_PIXEL_COUNT_LO                  115  0x00000073 (const dword)  (not used)
GRAY                               33808  0x00008410 (const dword)  (not used)
GREEN                               1024  0x00000400 (const dword)  (not used)
GREENYELLOW                        45029  0x0000afe5 (const dword)  (not used)
HEX                                 5136  0x00001410 (const dword)  (not used)
HEX1                                4368  0x00001110 (const dword)  (not used)
HEX1Z                                272  0x00000110 (const dword)  (not used)
HEX1ZB                              8464  0x00002110 (const dword)  (not used)
HEX2                                4624  0x00001210 (const dword)  (not used)
HEX2Z                                528  0x00000210 (const dword)  (not used)
HEX2ZB                              8720  0x00002210 (const dword)  (not used)
HEX3                                4880  0x00001310 (const dword)  (not used)
HEX3Z                                784  0x00000310 (const dword)  (not used)
HEX3ZB                              8976  0x00002310 (const dword)  (not used)
HEX4                                5136  0x00001410 (const dword)  (not used)
HEX4Z                               1040  0x00000410 (const dword)  (not used)
HEX4ZB                              9232  0x00002410 (const dword)  (not used)
HEXZ                                1040  0x00000410 (const dword)  (not used)
HEXZB                               9232  0x00002410 (const dword)  (not used)
hFonts                                 2  0x00000002 (mem) word[56] (global)  (usage 129)
HI                                     1  0x00000001 (const dword)  (not used)
HIbyte                               -48  0xffffffd0 (PmmC func) args[1] r=1  (not used)
HIDE                                   2  0x00000002 (const dword)  (not used)
hndl                                   0  0x00000000 (mem) word (global)  (usage 168)
HONEYDEW                           63486  0x0000f7fe (const dword)  (not used)
HOTPINK                            64342  0x0000fb56 (const dword)  (not used)
hstrings                             226  0x000000e2 (mem) word (global)  (usage 12)
HYPER                                  3  0x00000003 (const dword)  (not used)
I2C1                               63520  0x0000f820 (const dword)  (not used)
I2C1_Ack                            -305  0xfffffecf (PmmC func) args[0] r=0  (not used)
I2C1_AckPoll                        -314  0xfffffec6 (PmmC func) args[1] r=1  (not used)
I2C1_AckStatus                      -311  0xfffffec9 (PmmC func) args[0] r=1  (not used)
I2C1_Close                          -287  0xfffffee1 (PmmC func) args[0] r=0  (not used)
I2C1_Getn                           -323  0xfffffebd (PmmC func) args[2] r=1  (not used)
I2C1_Gets                           -320  0xfffffec0 (PmmC func) args[2] r=1  (not used)
I2C1_Idle                           -317  0xfffffec3 (PmmC func) args[0] r=1  (not used)
I2C1_Nack                           -308  0xfffffecc (PmmC func) args[0] r=0  (not used)
I2C1_Open                           -284  0xfffffee4 (PmmC func) args[3] r=1  (not used)
I2C1_Putn                           -329  0xfffffeb7 (PmmC func) args[2] r=1  (not used)
I2C1_Puts                           -326  0xfffffeba (PmmC func) args[1] r=1  (not used)
I2C1_Read                           -299  0xfffffed5 (PmmC func) args[0] r=1  (not used)
I2C1_Restart                        -296  0xfffffed8 (PmmC func) args[0] r=1  (not used)
I2C1_Start                          -290  0xfffffede (PmmC func) args[0] r=1  (not used)
I2C1_Stop                           -293  0xfffffedb (PmmC func) args[0] r=1  (not used)
I2C1_Write                          -302  0xfffffed2 (PmmC func) args[1] r=1  (not used)
I2C2                               63521  0x0000f821 (const dword)  (not used)
I2C2_Ack                            -306  0xfffffece (PmmC func) args[0] r=0  (not used)
I2C2_AckPoll                        -315  0xfffffec5 (PmmC func) args[1] r=1  (not used)
I2C2_AckStatus                      -312  0xfffffec8 (PmmC func) args[0] r=1  (not used)
I2C2_Close                          -288  0xfffffee0 (PmmC func) args[0] r=0  (not used)
I2C2_Getn                           -324  0xfffffebc (PmmC func) args[2] r=1  (not used)
I2C2_Gets                           -321  0xfffffebf (PmmC func) args[2] r=1  (not used)
I2C2_Idle                           -318  0xfffffec2 (PmmC func) args[0] r=1  (not used)
I2C2_Nack                           -309  0xfffffecb (PmmC func) args[0] r=0  (not used)
I2C2_Open                           -285  0xfffffee3 (PmmC func) args[3] r=1  (not used)
I2C2_Putn                           -330  0xfffffeb6 (PmmC func) args[2] r=1  (not used)
I2C2_Puts                           -327  0xfffffeb9 (PmmC func) args[1] r=1  (not used)
I2C2_Read                           -300  0xfffffed4 (PmmC func) args[0] r=1  (not used)
I2C2_Restart                        -297  0xfffffed7 (PmmC func) args[0] r=1  (not used)
I2C2_Start                          -291  0xfffffedd (PmmC func) args[0] r=1  (not used)
I2C2_Stop                           -294  0xfffffeda (PmmC func) args[0] r=1  (not used)
I2C2_Write                          -303  0xfffffed1 (PmmC func) args[1] r=1  (not used)
I2C3                               63522  0x0000f822 (const dword)  (not used)
I2C3_Ack                            -307  0xfffffecd (PmmC func) args[0] r=0  (not used)
I2C3_AckPoll                        -316  0xfffffec4 (PmmC func) args[1] r=1  (not used)
I2C3_AckStatus                      -313  0xfffffec7 (PmmC func) args[0] r=1  (not used)
I2C3_Close                          -289  0xfffffedf (PmmC func) args[0] r=0  (not used)
I2C3_Getn                           -325  0xfffffebb (PmmC func) args[2] r=1  (not used)
I2C3_Gets                           -322  0xfffffebe (PmmC func) args[2] r=1  (not used)
I2C3_Idle                           -319  0xfffffec1 (PmmC func) args[0] r=1  (not used)
I2C3_Nack                           -310  0xfffffeca (PmmC func) args[0] r=0  (not used)
I2C3_Open                           -286  0xfffffee2 (PmmC func) args[3] r=1  (not used)
I2C3_Putn                           -331  0xfffffeb5 (PmmC func) args[2] r=1  (not used)
I2C3_Puts                           -328  0xfffffeb8 (PmmC func) args[1] r=1  (not used)
I2C3_Read                           -301  0xfffffed3 (PmmC func) args[0] r=1  (not used)
I2C3_Restart                        -298  0xfffffed6 (PmmC func) args[0] r=1  (not used)
I2C3_Start                          -292  0xfffffedc (PmmC func) args[0] r=1  (not used)
I2C3_Stop                           -295  0xfffffed9 (PmmC func) args[0] r=1  (not used)
I2C3_Write                          -304  0xfffffed0 (PmmC func) args[1] r=1  (not used)
I2C_10KHZ                              3  0x00000003 (const dword)  (not used)
I2C_20KHZ                              4  0x00000004 (const dword)  (not used)
I2C_250KHZ                             6  0x00000006 (const dword)  (not used)
I2C_50KHZ                              5  0x00000005 (const dword)  (not used)
I2C_FAST                               2  0x00000002 (const dword)  (not used)
I2C_MED                                1  0x00000001 (const dword)  (not used)
I2C_SLOW                               0  0x00000000 (const dword)  (not used)
i4Dbutton0                           201  0x000000c9 (const ??? 0)  (usage 3)
i4Dbutton1                           202  0x000000ca (const ??? 0)  (usage 3)
i4Dbutton10                          613  0x00000265 (const ??? 0)  (usage 3)
i4Dbutton100                         658  0x00000292 (const ??? 0)  (usage 3)
i4Dbutton11                          208  0x000000d0 (const ??? 0)  (usage 3)
i4Dbutton12                          588  0x0000024c (const ??? 0)  (usage 3)
i4Dbutton13                          203  0x000000cb (const ??? 0)  (usage 3)
i4Dbutton14                          656  0x00000290 (const ??? 0)  (usage 3)
i4Dbutton15                          329  0x00000149 (const ??? 0)  (usage 3)
i4Dbutton16                          228  0x000000e4 (const ??? 0)  (usage 3)
i4Dbutton17                          622  0x0000026e (const ??? 0)  (usage 3)
i4Dbutton18                          627  0x00000273 (const ??? 0)  (usage 3)
i4Dbutton19                          628  0x00000274 (const ??? 0)  (usage 3)
i4Dbutton2                           206  0x000000ce (const ??? 0)  (usage 3)
i4Dbutton20                          615  0x00000267 (const ??? 0)  (usage 3)
i4Dbutton21                          616  0x00000268 (const ??? 0)  (usage 3)
i4Dbutton22                          630  0x00000276 (const ??? 0)  (usage 3)
i4Dbutton23                          631  0x00000277 (const ??? 0)  (usage 3)
i4Dbutton24                          632  0x00000278 (const ??? 0)  (usage 3)
i4Dbutton25                          633  0x00000279 (const ??? 0)  (usage 3)
i4Dbutton26                          551  0x00000227 (const ??? 0)  (usage 3)
i4Dbutton27                          552  0x00000228 (const ??? 0)  (usage 3)
i4Dbutton28                          634  0x0000027a (const ??? 0)  (usage 3)
i4Dbutton29                          635  0x0000027b (const ??? 0)  (usage 3)
i4Dbutton3                           207  0x000000cf (const ??? 0)  (usage 3)
i4Dbutton30                          636  0x0000027c (const ??? 0)  (usage 3)
i4Dbutton31                          637  0x0000027d (const ??? 0)  (usage 3)
i4Dbutton32                          638  0x0000027e (const ??? 0)  (usage 3)
i4Dbutton33                          639  0x0000027f (const ??? 0)  (usage 3)
i4Dbutton34                          226  0x000000e2 (const ??? 0)  (usage 3)
i4Dbutton35                          327  0x00000147 (const ??? 0)  (usage 3)
i4Dbutton36                          262  0x00000106 (const ??? 0)  (usage 3)
i4Dbutton37                          267  0x0000010b (const ??? 0)  (usage 3)
i4Dbutton38                          268  0x0000010c (const ??? 0)  (usage 3)
i4Dbutton39                           16  0x00000010 (const ??? 0)  (usage 3)
i4Dbutton4                           597  0x00000255 (const ??? 0)  (usage 3)
i4Dbutton40                          554  0x0000022a (const ??? 0)  (usage 3)
i4Dbutton41                          555  0x0000022b (const ??? 0)  (usage 3)
i4Dbutton42                          145  0x00000091 (const ??? 0)  (usage 3)
i4Dbutton43                          279  0x00000117 (const ??? 0)  (usage 3)
i4Dbutton44                          294  0x00000126 (const ??? 0)  (usage 3)
i4Dbutton45                           72  0x00000048 (const ??? 0)  (usage 3)
i4Dbutton46                          648  0x00000288 (const ??? 0)  (usage 3)
i4Dbutton47                          373  0x00000175 (const ??? 0)  (usage 3)
i4Dbutton48                           82  0x00000052 (const ??? 0)  (usage 3)
i4Dbutton49                          382  0x0000017e (const ??? 0)  (usage 3)
i4Dbutton5                           602  0x0000025a (const ??? 0)  (usage 3)
i4Dbutton50                          384  0x00000180 (const ??? 0)  (usage 3)
i4Dbutton51                          398  0x0000018e (const ??? 0)  (usage 3)
i4Dbutton52                          439  0x000001b7 (const ??? 0)  (usage 3)
i4Dbutton53                          640  0x00000280 (const ??? 0)  (usage 3)
i4Dbutton54                          506  0x000001fa (const ??? 0)  (usage 3)
i4Dbutton55                          654  0x0000028e (const ??? 0)  (usage 3)
i4Dbutton57                          284  0x0000011c (const ??? 0)  (usage 3)
i4Dbutton58                          280  0x00000118 (const ??? 0)  (usage 3)
i4Dbutton59                          295  0x00000127 (const ??? 0)  (usage 3)
i4Dbutton6                           611  0x00000263 (const ??? 0)  (usage 3)
i4Dbutton60                          197  0x000000c5 (const ??? 0)  (usage 3)
i4Dbutton61                          239  0x000000ef (const ??? 0)  (usage 3)
i4Dbutton62                          486  0x000001e6 (const ??? 0)  (usage 3)
i4Dbutton63                          374  0x00000176 (const ??? 0)  (usage 3)
i4Dbutton64                          385  0x00000181 (const ??? 0)  (usage 3)
i4Dbutton65                          399  0x0000018f (const ??? 0)  (usage 3)
i4Dbutton66                          472  0x000001d8 (const ??? 0)  (usage 3)
i4Dbutton67                          440  0x000001b8 (const ??? 0)  (usage 3)
i4Dbutton69                          507  0x000001fb (const ??? 0)  (usage 3)
i4Dbutton7                           612  0x00000264 (const ??? 0)  (usage 3)
i4Dbutton71                           83  0x00000053 (const ??? 0)  (usage 3)
i4Dbutton72                          227  0x000000e3 (const ??? 0)  (usage 3)
i4Dbutton73                          328  0x00000148 (const ??? 0)  (usage 3)
i4Dbutton74                          509  0x000001fd (const ??? 0)  (usage 3)
i4Dbutton75                          510  0x000001fe (const ??? 0)  (usage 3)
i4Dbutton76                          243  0x000000f3 (const ??? 0)  (usage 3)
i4Dbutton77                          109  0x0000006d (const ??? 0)  (usage 3)
i4Dbutton78                          344  0x00000158 (const ??? 0)  (usage 3)
i4Dbutton79                          589  0x0000024d (const ??? 0)  (usage 3)
i4Dbutton8                           594  0x00000252 (const ??? 0)  (usage 3)
i4Dbutton80                          287  0x0000011f (const ??? 0)  (usage 3)
i4Dbutton81                          623  0x0000026f (const ??? 0)  (usage 3)
i4Dbutton82                          323  0x00000143 (const ??? 0)  (usage 3)
i4Dbutton83                          210  0x000000d2 (const ??? 0)  (usage 3)
i4Dbutton84                          625  0x00000271 (const ??? 0)  (usage 3)
i4Dbutton85                          363  0x0000016b (const ??? 0)  (usage 3)
i4Dbutton86                          351  0x0000015f (const ??? 0)  (usage 3)
i4Dbutton87                          416  0x000001a0 (const ??? 0)  (usage 3)
i4Dbutton88                          418  0x000001a2 (const ??? 0)  (usage 3)
i4Dbutton89                          493  0x000001ed (const ??? 0)  (usage 3)
i4Dbutton9                           607  0x0000025f (const ??? 0)  (usage 3)
i4Dbutton90                          591  0x0000024f (const ??? 0)  (usage 3)
i4Dbutton91                          346  0x0000015a (const ??? 0)  (usage 3)
i4Dbutton92                          241  0x000000f1 (const ??? 0)  (usage 3)
i4Dbutton93                          581  0x00000245 (const ??? 0)  (usage 3)
i4Dbutton94                          595  0x00000253 (const ??? 0)  (usage 3)
i4Dbutton95                          608  0x00000260 (const ??? 0)  (usage 3)
i4Dbutton96                          620  0x0000026c (const ??? 0)  (usage 3)
i4Dbutton97                          579  0x00000243 (const ??? 0)  (usage 3)
i4Dbutton99                          659  0x00000293 (const ??? 0)  (usage 3)
I_COLOUR16                            16  0x00000010 (const dword)  (not used)
I_DARKEN                           16384  0x00004000 (const dword)  (not used)
I_ENABLED                          32768  0x00008000 (const dword)  (usage 6)
I_LIGHTEN                           8192  0x00002000 (const dword)  (not used)
I_MOVIE                              128  0x00000080 (const dword)  (not used)
I_NOGROUP                             64  0x00000040 (const dword)  (not used)
I_STAYONTOP                          256  0x00000100 (const dword)  (usage 3)
I_TOPMOST                            512  0x00000200 (const dword)  (not used)
I_TOUCH_DISABLE                       32  0x00000020 (const dword)  (usage 12)
I_TOUCHED                           4096  0x00001000 (const dword)  (not used)
I_X_LOCK                            1024  0x00000400 (const dword)  (not used)
I_Y_LOCK                            2048  0x00000800 (const dword)  (not used)
iCustomdigits0                       449  0x000001c1 (const ??? 0)  (usage 3)
iCustomdigits1                       456  0x000001c8 (const ??? 0)  (usage 3)
iCustomdigits11                       94  0x0000005e (const ??? 0)  (usage 3)
iCustomdigits12                       96  0x00000060 (const ??? 0)  (usage 3)
iCustomdigits13                       98  0x00000062 (const ??? 0)  (usage 3)
iCustomdigits14                      100  0x00000064 (const ??? 0)  (usage 3)
iCustomdigits15                      304  0x00000130 (const ??? 0)  (usage 3)
iCustomdigits16                      306  0x00000132 (const ??? 0)  (usage 3)
iCustomdigits17                      308  0x00000134 (const ??? 0)  (usage 3)
iCustomdigits18                      310  0x00000136 (const ??? 0)  (usage 3)
iCustomdigits2                       458  0x000001ca (const ??? 0)  (usage 3)
iCustomdigits20                      312  0x00000138 (const ??? 0)  (usage 3)
iCustomdigits21                      314  0x0000013a (const ??? 0)  (usage 3)
iCustomdigits23                      316  0x0000013c (const ??? 0)  (usage 3)
iCustomdigits24                      133  0x00000085 (const ??? 0)  (usage 3)
iCustomdigits25                      135  0x00000087 (const ??? 0)  (usage 3)
iCustomdigits26                      137  0x00000089 (const ??? 0)  (usage 3)
iCustomdigits27                      139  0x0000008b (const ??? 0)  (usage 3)
iCustomdigits28                      141  0x0000008d (const ??? 0)  (usage 3)
iCustomdigits29                      143  0x0000008f (const ??? 0)  (usage 3)
iCustomdigits3                       480  0x000001e0 (const ??? 0)  (usage 3)
iCustomdigits30                      354  0x00000162 (const ??? 0)  (usage 3)
iCustomdigits32                      271  0x0000010f (const ??? 0)  (usage 3)
iCustomdigits34                      660  0x00000294 (const ??? 0)  (usage 3)
iCustomdigits35                      662  0x00000296 (const ??? 0)  (usage 3)
iCustomdigits36                      235  0x000000eb (const ??? 0)  (usage 3)
iCustomdigits37                      237  0x000000ed (const ??? 0)  (usage 3)
iCustomdigits38                      191  0x000000bf (const ??? 0)  (usage 3)
iCustomdigits39                      193  0x000000c1 (const ??? 0)  (usage 3)
iCustomdigits4                       482  0x000001e2 (const ??? 0)  (usage 3)
iCustomdigits40                      195  0x000000c3 (const ??? 0)  (usage 3)
iCustomdigits41                      664  0x00000298 (const ??? 0)  (usage 3)
iCustomdigits42                      666  0x0000029a (const ??? 0)  (usage 3)
iCustomdigits5                       484  0x000001e4 (const ??? 0)  (usage 3)
iCustomdigits56                      247  0x000000f7 (const ??? 0)  (usage 3)
iCustomdigits57                      249  0x000000f9 (const ??? 0)  (usage 3)
iCustomdigits58                      251  0x000000fb (const ??? 0)  (usage 3)
iCustomdigits59                      403  0x00000193 (const ??? 0)  (usage 3)
iCustomdigits6                        88  0x00000058 (const ??? 0)  (usage 3)
iCustomdigits60                      405  0x00000195 (const ??? 0)  (usage 3)
iCustomdigits61                      407  0x00000197 (const ??? 0)  (usage 3)
iCustomdigits62                      390  0x00000186 (const ??? 0)  (usage 3)
iCustomdigits63                      392  0x00000188 (const ??? 0)  (usage 3)
iCustomdigits64                      394  0x0000018a (const ??? 0)  (usage 3)
iCustomdigits65                      396  0x0000018c (const ??? 0)  (usage 3)
iCustomdigits66                      498  0x000001f2 (const ??? 0)  (usage 3)
iCustomdigits67                      500  0x000001f4 (const ??? 0)  (usage 3)
iCustomdigits68                      502  0x000001f6 (const ??? 0)  (usage 3)
iCustomdigits69                      504  0x000001f8 (const ??? 0)  (usage 3)
iCustomdigits7                        90  0x0000005a (const ??? 0)  (usage 3)
iCustomdigits70                      460  0x000001cc (const ??? 0)  (usage 3)
iCustomdigits71                      462  0x000001ce (const ??? 0)  (usage 3)
iCustomdigits72                      470  0x000001d6 (const ??? 0)  (usage 3)
iCustomdigits73                      557  0x0000022d (const ??? 0)  (usage 3)
iCustomdigits74                      559  0x0000022f (const ??? 0)  (usage 3)
iCustomdigits75                      561  0x00000231 (const ??? 0)  (usage 3)
iCustomdigits76                      563  0x00000233 (const ??? 0)  (usage 3)
iCustomdigits77                      534  0x00000216 (const ??? 0)  (usage 3)
iCustomdigits78                      536  0x00000218 (const ??? 0)  (usage 3)
iCustomdigits79                      538  0x0000021a (const ??? 0)  (usage 3)
iCustomdigits8                        92  0x0000005c (const ??? 0)  (usage 3)
iCustomdigits80                      540  0x0000021c (const ??? 0)  (usage 3)
iCustomdigits81                      542  0x0000021e (const ??? 0)  (usage 3)
iCustomdigits82                      544  0x00000220 (const ??? 0)  (usage 3)
iCustomdigits83                      546  0x00000222 (const ??? 0)  (usage 3)
iCustomdigits84                      548  0x00000224 (const ??? 0)  (usage 3)
iForm1                                 1  0x00000001 (const ??? 0)  (usage 3)
iForm10                              240  0x000000f0 (const ??? 0)  (usage 3)
iForm100                             580  0x00000244 (const ??? 0)  (usage 3)
iForm101                             629  0x00000275 (const ??? 0)  (usage 3)
iForm102                             582  0x00000246 (const ??? 0)  (usage 3)
iForm103                             584  0x00000248 (const ??? 0)  (usage 3)
iForm104                             586  0x0000024a (const ??? 0)  (usage 3)
iForm105                             593  0x00000251 (const ??? 0)  (usage 3)
iForm106                             596  0x00000254 (const ??? 0)  (usage 3)
iForm107                             601  0x00000259 (const ??? 0)  (usage 3)
iForm108                             606  0x0000025e (const ??? 0)  (usage 3)
iForm109                             609  0x00000261 (const ??? 0)  (usage 3)
iForm11                              255  0x000000ff (const ??? 0)  (usage 3)
iForm110                             614  0x00000266 (const ??? 0)  (usage 3)
iForm111                             617  0x00000269 (const ??? 0)  (usage 3)
iForm112                             619  0x0000026b (const ??? 0)  (usage 3)
iForm113                             647  0x00000287 (const ??? 0)  (usage 3)
iForm114                             650  0x0000028a (const ??? 0)  (usage 3)
iForm115                             653  0x0000028d (const ??? 0)  (usage 3)
iForm116                             655  0x0000028f (const ??? 0)  (usage 3)
iForm117                             657  0x00000291 (const ??? 0)  (usage 3)
iForm12                              242  0x000000f2 (const ??? 0)  (usage 3)
iForm13                              204  0x000000cc (const ??? 0)  (usage 3)
iForm14                              104  0x00000068 (const ??? 0)  (usage 3)
iForm15                              244  0x000000f4 (const ??? 0)  (usage 3)
iForm16                              179  0x000000b3 (const ??? 0)  (usage 3)
iForm17                              211  0x000000d3 (const ??? 0)  (usage 3)
iForm18                              263  0x00000107 (const ??? 0)  (usage 3)
iForm19                              108  0x0000006c (const ??? 0)  (usage 3)
iForm2                                 5  0x00000005 (const ??? 0)  (usage 3)
iForm20                              110  0x0000006e (const ??? 0)  (usage 3)
iForm21                              123  0x0000007b (const ??? 0)  (usage 3)
iForm22                              281  0x00000119 (const ??? 0)  (usage 3)
iForm23                              296  0x00000128 (const ??? 0)  (usage 3)
iForm24                              343  0x00000157 (const ??? 0)  (usage 3)
iForm25                              213  0x000000d5 (const ??? 0)  (usage 3)
iForm26                              400  0x00000190 (const ??? 0)  (usage 3)
iForm27                              587  0x0000024b (const ??? 0)  (usage 3)
iForm28                              126  0x0000007e (const ??? 0)  (usage 3)
iForm29                              273  0x00000111 (const ??? 0)  (usage 3)
iForm3                               199  0x000000c7 (const ??? 0)  (usage 3)
iForm30                              409  0x00000199 (const ??? 0)  (usage 3)
iForm31                              146  0x00000092 (const ??? 0)  (usage 3)
iForm32                              149  0x00000095 (const ??? 0)  (usage 3)
iForm33                              152  0x00000098 (const ??? 0)  (usage 3)
iForm34                              167  0x000000a7 (const ??? 0)  (usage 3)
iForm35                              173  0x000000ad (const ??? 0)  (usage 3)
iForm36                              269  0x0000010d (const ??? 0)  (usage 3)
iForm37                              286  0x0000011e (const ??? 0)  (usage 3)
iForm38                              288  0x00000120 (const ??? 0)  (usage 3)
iForm39                              290  0x00000122 (const ??? 0)  (usage 3)
iForm4                                67  0x00000043 (const ??? 0)  (usage 3)
iForm40                              621  0x0000026d (const ??? 0)  (usage 3)
iForm41                              340  0x00000154 (const ??? 0)  (usage 3)
iForm42                              299  0x0000012b (const ??? 0)  (usage 3)
iForm43                              319  0x0000013f (const ??? 0)  (usage 3)
iForm44                              183  0x000000b7 (const ??? 0)  (usage 3)
iForm45                              412  0x0000019c (const ??? 0)  (usage 3)
iForm46                              321  0x00000141 (const ??? 0)  (usage 3)
iForm47                              209  0x000000d1 (const ??? 0)  (usage 3)
iForm48                              598  0x00000256 (const ??? 0)  (usage 3)
iForm49                              223  0x000000df (const ??? 0)  (usage 3)
iForm5                                73  0x00000049 (const ??? 0)  (usage 3)
iForm50                              324  0x00000144 (const ??? 0)  (usage 3)
iForm51                              330  0x0000014a (const ??? 0)  (usage 3)
iForm52                              229  0x000000e5 (const ??? 0)  (usage 3)
iForm53                              473  0x000001d9 (const ??? 0)  (usage 3)
iForm54                              333  0x0000014d (const ??? 0)  (usage 3)
iForm55                              336  0x00000150 (const ??? 0)  (usage 3)
iForm56                              345  0x00000159 (const ??? 0)  (usage 3)
iForm57                              347  0x0000015b (const ??? 0)  (usage 3)
iForm58                              352  0x00000160 (const ??? 0)  (usage 3)
iForm59                              364  0x0000016c (const ??? 0)  (usage 3)
iForm6                                78  0x0000004e (const ??? 0)  (usage 3)
iForm60                              356  0x00000164 (const ??? 0)  (usage 3)
iForm61                              624  0x00000270 (const ??? 0)  (usage 3)
iForm62                              359  0x00000167 (const ??? 0)  (usage 3)
iForm63                              362  0x0000016a (const ??? 0)  (usage 3)
iForm64                              375  0x00000177 (const ??? 0)  (usage 3)
iForm65                              378  0x0000017a (const ??? 0)  (usage 3)
iForm66                              383  0x0000017f (const ??? 0)  (usage 3)
iForm67                              386  0x00000182 (const ??? 0)  (usage 3)
iForm68                              389  0x00000185 (const ??? 0)  (usage 3)
iForm69                              414  0x0000019e (const ??? 0)  (usage 3)
iForm7                               350  0x0000015e (const ??? 0)  (usage 3)
iForm70                              415  0x0000019f (const ??? 0)  (usage 3)
iForm71                              417  0x000001a1 (const ??? 0)  (usage 3)
iForm72                              419  0x000001a3 (const ??? 0)  (usage 3)
iForm73                              421  0x000001a5 (const ??? 0)  (usage 3)
iForm74                              423  0x000001a7 (const ??? 0)  (usage 3)
iForm75                              426  0x000001aa (const ??? 0)  (usage 3)
iForm76                              427  0x000001ab (const ??? 0)  (usage 3)
iForm77                              430  0x000001ae (const ??? 0)  (usage 3)
iForm78                              433  0x000001b1 (const ??? 0)  (usage 3)
iForm79                              447  0x000001bf (const ??? 0)  (usage 3)
iForm8                               253  0x000000fd (const ??? 0)  (usage 3)
iForm80                              436  0x000001b4 (const ??? 0)  (usage 3)
iForm81                              443  0x000001bb (const ??? 0)  (usage 3)
iForm82                              487  0x000001e7 (const ??? 0)  (usage 3)
iForm83                              491  0x000001eb (const ??? 0)  (usage 3)
iForm84                              494  0x000001ee (const ??? 0)  (usage 3)
iForm85                              497  0x000001f1 (const ??? 0)  (usage 3)
iForm86                              626  0x00000272 (const ??? 0)  (usage 3)
iForm87                              508  0x000001fc (const ??? 0)  (usage 3)
iForm88                              516  0x00000204 (const ??? 0)  (usage 3)
iForm89                              517  0x00000205 (const ??? 0)  (usage 3)
iForm9                                84  0x00000054 (const ??? 0)  (usage 3)
iForm90                              590  0x0000024e (const ??? 0)  (usage 3)
iForm91                              520  0x00000208 (const ??? 0)  (usage 3)
iForm92                              523  0x0000020b (const ??? 0)  (usage 3)
iForm93                              526  0x0000020e (const ??? 0)  (usage 3)
iForm94                              529  0x00000211 (const ??? 0)  (usage 3)
iForm95                              532  0x00000214 (const ??? 0)  (usage 3)
iForm96                              550  0x00000226 (const ??? 0)  (usage 3)
iForm97                              553  0x00000229 (const ??? 0)  (usage 3)
iForm98                              567  0x00000237 (const ??? 0)  (usage 3)
iForm99                              578  0x00000242 (const ??? 0)  (usage 3)
iiCustomdigits0                      450  0x000001c2 (const ??? 0)  (not used)
iiCustomdigits1                      457  0x000001c9 (const ??? 0)  (not used)
iiCustomdigits11                      95  0x0000005f (const ??? 0)  (not used)
iiCustomdigits12                      97  0x00000061 (const ??? 0)  (not used)
iiCustomdigits13                      99  0x00000063 (const ??? 0)  (not used)
iiCustomdigits14                     101  0x00000065 (const ??? 0)  (not used)
iiCustomdigits15                     305  0x00000131 (const ??? 0)  (not used)
iiCustomdigits16                     307  0x00000133 (const ??? 0)  (not used)
iiCustomdigits17                     309  0x00000135 (const ??? 0)  (not used)
iiCustomdigits18                     311  0x00000137 (const ??? 0)  (not used)
iiCustomdigits2                      459  0x000001cb (const ??? 0)  (not used)
iiCustomdigits20                     313  0x00000139 (const ??? 0)  (not used)
iiCustomdigits21                     315  0x0000013b (const ??? 0)  (not used)
iiCustomdigits23                     317  0x0000013d (const ??? 0)  (not used)
iiCustomdigits24                     134  0x00000086 (const ??? 0)  (not used)
iiCustomdigits25                     136  0x00000088 (const ??? 0)  (not used)
iiCustomdigits26                     138  0x0000008a (const ??? 0)  (not used)
iiCustomdigits27                     140  0x0000008c (const ??? 0)  (not used)
iiCustomdigits28                     142  0x0000008e (const ??? 0)  (not used)
iiCustomdigits29                     144  0x00000090 (const ??? 0)  (not used)
iiCustomdigits3                      481  0x000001e1 (const ??? 0)  (not used)
iiCustomdigits30                     355  0x00000163 (const ??? 0)  (not used)
iiCustomdigits32                     272  0x00000110 (const ??? 0)  (not used)
iiCustomdigits34                     661  0x00000295 (const ??? 0)  (not used)
iiCustomdigits35                     663  0x00000297 (const ??? 0)  (not used)
iiCustomdigits36                     236  0x000000ec (const ??? 0)  (not used)
iiCustomdigits37                     238  0x000000ee (const ??? 0)  (not used)
iiCustomdigits38                     192  0x000000c0 (const ??? 0)  (not used)
iiCustomdigits39                     194  0x000000c2 (const ??? 0)  (not used)
iiCustomdigits4                      483  0x000001e3 (const ??? 0)  (not used)
iiCustomdigits40                     196  0x000000c4 (const ??? 0)  (not used)
iiCustomdigits41                     665  0x00000299 (const ??? 0)  (not used)
iiCustomdigits42                     667  0x0000029b (const ??? 0)  (not used)
iiCustomdigits5                      485  0x000001e5 (const ??? 0)  (not used)
iiCustomdigits56                     248  0x000000f8 (const ??? 0)  (not used)
iiCustomdigits57                     250  0x000000fa (const ??? 0)  (not used)
iiCustomdigits58                     252  0x000000fc (const ??? 0)  (not used)
iiCustomdigits59                     404  0x00000194 (const ??? 0)  (not used)
iiCustomdigits6                       89  0x00000059 (const ??? 0)  (not used)
iiCustomdigits60                     406  0x00000196 (const ??? 0)  (not used)
iiCustomdigits61                     408  0x00000198 (const ??? 0)  (not used)
iiCustomdigits62                     391  0x00000187 (const ??? 0)  (not used)
iiCustomdigits63                     393  0x00000189 (const ??? 0)  (not used)
iiCustomdigits64                     395  0x0000018b (const ??? 0)  (not used)
iiCustomdigits65                     397  0x0000018d (const ??? 0)  (not used)
iiCustomdigits66                     499  0x000001f3 (const ??? 0)  (not used)
iiCustomdigits67                     501  0x000001f5 (const ??? 0)  (not used)
iiCustomdigits68                     503  0x000001f7 (const ??? 0)  (not used)
iiCustomdigits69                     505  0x000001f9 (const ??? 0)  (not used)
iiCustomdigits7                       91  0x0000005b (const ??? 0)  (not used)
iiCustomdigits70                     461  0x000001cd (const ??? 0)  (not used)
iiCustomdigits71                     463  0x000001cf (const ??? 0)  (not used)
iiCustomdigits72                     471  0x000001d7 (const ??? 0)  (not used)
iiCustomdigits73                     558  0x0000022e (const ??? 0)  (not used)
iiCustomdigits74                     560  0x00000230 (const ??? 0)  (not used)
iiCustomdigits75                     562  0x00000232 (const ??? 0)  (not used)
iiCustomdigits76                     564  0x00000234 (const ??? 0)  (not used)
iiCustomdigits77                     535  0x00000217 (const ??? 0)  (not used)
iiCustomdigits78                     537  0x00000219 (const ??? 0)  (not used)
iiCustomdigits79                     539  0x0000021b (const ??? 0)  (not used)
iiCustomdigits8                       93  0x0000005d (const ??? 0)  (not used)
iiCustomdigits80                     541  0x0000021d (const ??? 0)  (not used)
iiCustomdigits81                     543  0x0000021f (const ??? 0)  (not used)
iiCustomdigits82                     545  0x00000221 (const ??? 0)  (not used)
iiCustomdigits83                     547  0x00000223 (const ??? 0)  (not used)
iiCustomdigits84                     549  0x00000225 (const ??? 0)  (not used)
IMAGE_CLUSTER                         10  0x0000000a (const dword)  (not used)
IMAGE_DELAY                            7  0x00000007 (const dword)  (not used)
IMAGE_FLAGS                            6  0x00000006 (const dword)  (usage 3)
IMAGE_FRAMES                           8  0x00000008 (const dword)  (not used)
IMAGE_HEIGHT                           5  0x00000005 (const dword)  (usage 6)
IMAGE_HIWORD                           1  0x00000001 (const dword)  (not used)
IMAGE_INDEX                            9  0x00000009 (const dword)  (usage 57)
IMAGE_LOWORD                           0  0x00000000 (const dword)  (not used)
IMAGE_SECTOR                          11  0x0000000b (const dword)  (not used)
IMAGE_TAG                             12  0x0000000c (const dword)  (usage 9)
IMAGE_TAG2                            13  0x0000000d (const dword)  (usage 9)
IMAGE_WIDTH                            4  0x00000004 (const dword)  (usage 6)
IMAGE_XPOS                             2  0x00000002 (const dword)  (usage 15)
IMAGE_YPOS                             3  0x00000003 (const dword)  (usage 12)
ImageTouched                         308  0x00000134 (mem) word (global)  (usage 36)
img_ClearAttributes                 -383  0xfffffe81 (PmmC func) args[3] r=1  (usage 6)
IMG_COUNT                              0  0x00000000 (const dword)  (not used)
IMG_CURRENT_FRAME                     89  0x00000059 (const dword)  (not used)
img_Darken                          -377  0xfffffe87 (PmmC func) args[2] r=1  (not used)
IMG_DAT_FILENAME                       4  0x00000004 (const dword)  (not used)
img_Disable                         -376  0xfffffe88 (PmmC func) args[2] r=1  (usage 6)
img_Enable                          -375  0xfffffe89 (PmmC func) args[2] r=1  (not used)
IMG_ENTRYLEN                           1  0x00000001 (const dword)  (not used)
IMG_FLAGS                             85  0x00000055 (const dword)  (not used)
IMG_FRAME_COUNT                       86  0x00000056 (const dword)  (not used)
IMG_FRAME_DELAY                       84  0x00000054 (const dword)  (not used)
IMG_GCI_FILENAME                       3  0x00000003 (const dword)  (not used)
IMG_GCIFILE_HANDLE                     5  0x00000005 (const dword)  (not used)
img_GetWord                         -380  0xfffffe84 (PmmC func) args[3] r=1  (usage 90)
IMG_HEIGHT                            83  0x00000053 (const dword)  (not used)
img_Lighten                         -378  0xfffffe86 (PmmC func) args[2] r=1  (not used)
IMG_MODE                               2  0x00000002 (const dword)  (not used)
IMG_PIXEL_COUNT_HI                    88  0x00000058 (const dword)  (not used)
IMG_PIXEL_COUNT_LO                    87  0x00000057 (const dword)  (not used)
img_SelectReadPosition              -385  0xfffffe7f (PmmC func) args[5] r=1  (not used)
img_SequentialRead                  -386  0xfffffe7e (PmmC func) args[2] r=1  (not used)
img_SetAttributes                   -382  0xfffffe82 (PmmC func) args[3] r=1  (usage 9)
img_SetPosition                     -374  0xfffffe8a (PmmC func) args[4] r=1  (not used)
img_SetWord                         -379  0xfffffe85 (PmmC func) args[4] r=1  (usage 27)
img_Show                            -381  0xfffffe83 (PmmC func) args[2] r=1  (usage 24)
img_Touched                         -384  0xfffffe80 (PmmC func) args[2] r=1  (usage 3)
IMG_WIDTH                             82  0x00000052 (const dword)  (not used)
INDIANRED                          51947  0x0000caeb (const dword)  (not used)
INDIGO                             18448  0x00004810 (const dword)  (not used)
InputControls                        479  0x000001dfInputControls                        479  0x000001df (mem) word[672] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 9)
InputCS                              562  0x00000232 (mem) word (global)  (usage 21)
InputData                           1823  0x0000071fInputData                           1823  0x0000071f (mem) word[7304] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 30)
InputType                            314  0x0000013a (mem) word (global)  (usage 39)
INVERSE                               64  0x00000040 (const dword)  (not used)
IPDatasize                            22  0x00000016 (const dword)  (usage 3)
isalnum                              -41  0xffffffd7 (PmmC func) args[1] r=1  (not used)
isalpha                              -40  0xffffffd8 (PmmC func) args[1] r=1  (not used)
isdigit                              -36  0xffffffdc (PmmC func) args[1] r=1  (not used)
islower                              -39  0xffffffd9 (PmmC func) args[1] r=1  (not used)
iSmartSlider0                        446  0x000001be (const ??? 0)  (usage 3)
isprint                              -42  0xffffffd6 (PmmC func) args[1] r=1  (not used)
isspace                              -43  0xffffffd5 (PmmC func) args[1] r=1  (not used)
iStrings0                          16431  0x0000402fiStrings0                          16431  0x0000402f (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings1                          16457  0x00004049iStrings1                          16457  0x00004049 (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings10                         16639  0x000040ffiStrings10                         16639  0x000040ff (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings11                         16665  0x00004119iStrings11                         16665  0x00004119 (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings12                         16691  0x00004133iStrings12                         16691  0x00004133 (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings13                         16717  0x0000414diStrings13                         16717  0x0000414d (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings16                         16743  0x00004167iStrings16                         16743  0x00004167 (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings2                          16483  0x00004063iStrings2                          16483  0x00004063 (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings23                         16769  0x00004181iStrings23                         16769  0x00004181 (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings27                         16795  0x0000419biStrings27                         16795  0x0000419b (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings3                          16509  0x0000407diStrings3                          16509  0x0000407d (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings38                         16821  0x000041b5iStrings38                         16821  0x000041b5 (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings39                         16847  0x000041cfiStrings39                         16847  0x000041cf (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings44                         16873  0x000041e9iStrings44                         16873  0x000041e9 (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings48                         16899  0x00004203iStrings48                         16899  0x00004203 (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings49                         16925  0x0000421diStrings49                         16925  0x0000421d (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings50                         16951  0x00004237iStrings50                         16951  0x00004237 (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings53                         16977  0x00004251iStrings53                         16977  0x00004251 (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings55                         17003  0x0000426biStrings55                         17003  0x0000426b (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings6                          16535  0x00004097iStrings6                          16535  0x00004097 (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings7                          16561  0x000040b1iStrings7                          16561  0x000040b1 (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings8                          16587  0x000040cbiStrings8                          16587  0x000040cb (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings9                          16613  0x000040e5iStrings9                          16613  0x000040e5 (mem) word[13] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
isupper                              -38  0xffffffda (PmmC func) args[1] r=1  (not used)
iswhite                              -44  0xffffffd4 (PmmC func) args[1] r=1  (not used)
isxdigit                             -37  0xffffffdb (PmmC func) args[1] r=1  (not used)
ITALIC                                32  0x00000020 (const dword)  (not used)
iterator                            -404  0xfffffe6c (PmmC func) args[1] r=0  (not used)
iUserbutton0                         521  0x00000209 (const ??? 0)  (usage 3)
iUserbutton1                           2  0x00000002 (const ??? 0)  (usage 3)
iUserbutton10                        668  0x0000029c (const ??? 0)  (usage 3)
iUserbutton100                       610  0x00000262 (const ??? 0)  (usage 3)
iUserbutton101                       565  0x00000235 (const ??? 0)  (usage 3)
iUserbutton102                       566  0x00000236 (const ??? 0)  (usage 3)
iUserbutton103                       568  0x00000238 (const ??? 0)  (usage 3)
iUserbutton104                       569  0x00000239 (const ??? 0)  (usage 3)
iUserbutton105                       570  0x0000023a (const ??? 0)  (usage 3)
iUserbutton106                       571  0x0000023b (const ??? 0)  (usage 3)
iUserbutton107                       572  0x0000023c (const ??? 0)  (usage 3)
iUserbutton108                       573  0x0000023d (const ??? 0)  (usage 3)
iUserbutton109                       574  0x0000023e (const ??? 0)  (usage 3)
iUserbutton11                        127  0x0000007f (const ??? 0)  (usage 3)
iUserbutton110                       445  0x000001bd (const ??? 0)  (usage 3)
iUserbutton111                       649  0x00000289 (const ??? 0)  (usage 3)
iUserbutton112                       168  0x000000a8 (const ??? 0)  (usage 3)
iUserbutton113                       169  0x000000a9 (const ??? 0)  (usage 3)
iUserbutton114                       170  0x000000aa (const ??? 0)  (usage 3)
iUserbutton115                       174  0x000000ae (const ??? 0)  (usage 3)
iUserbutton116                       175  0x000000af (const ??? 0)  (usage 3)
iUserbutton117                       176  0x000000b0 (const ??? 0)  (usage 3)
iUserbutton118                       301  0x0000012d (const ??? 0)  (usage 3)
iUserbutton12                         74  0x0000004a (const ??? 0)  (usage 3)
iUserbutton120                       575  0x0000023f (const ??? 0)  (usage 3)
iUserbutton121                       276  0x00000114 (const ??? 0)  (usage 3)
iUserbutton122                       277  0x00000115 (const ??? 0)  (usage 3)
iUserbutton123                       283  0x0000011b (const ??? 0)  (usage 3)
iUserbutton124                       651  0x0000028b (const ??? 0)  (usage 3)
iUserbutton125                       585  0x00000249 (const ??? 0)  (usage 3)
iUserbutton126                       102  0x00000066 (const ??? 0)  (usage 3)
iUserbutton127                       599  0x00000257 (const ??? 0)  (usage 3)
iUserbutton128                       522  0x0000020a (const ??? 0)  (usage 3)
iUserbutton129                       161  0x000000a1 (const ??? 0)  (usage 3)
iUserbutton13                         75  0x0000004b (const ??? 0)  (usage 3)
iUserbutton130                       224  0x000000e0 (const ??? 0)  (usage 3)
iUserbutton131                       214  0x000000d6 (const ??? 0)  (usage 3)
iUserbutton133                       289  0x00000121 (const ??? 0)  (usage 3)
iUserbutton134                       381  0x0000017d (const ??? 0)  (usage 3)
iUserbutton135                       162  0x000000a2 (const ??? 0)  (usage 3)
iUserbutton136                       163  0x000000a3 (const ??? 0)  (usage 3)
iUserbutton137                       302  0x0000012e (const ??? 0)  (usage 3)
iUserbutton138                       164  0x000000a4 (const ??? 0)  (usage 3)
iUserbutton14                         10  0x0000000a (const ??? 0)  (usage 3)
iUserbutton140                       291  0x00000123 (const ??? 0)  (usage 3)
iUserbutton141                       292  0x00000124 (const ??? 0)  (usage 3)
iUserbutton144                       230  0x000000e6 (const ??? 0)  (usage 3)
iUserbutton148                       231  0x000000e7 (const ??? 0)  (usage 3)
iUserbutton149                       232  0x000000e8 (const ??? 0)  (usage 3)
iUserbutton15                          7  0x00000007 (const ??? 0)  (usage 3)
iUserbutton150                       233  0x000000e9 (const ??? 0)  (usage 3)
iUserbutton151                       184  0x000000b8 (const ??? 0)  (usage 3)
iUserbutton152                       185  0x000000b9 (const ??? 0)  (usage 3)
iUserbutton153                       293  0x00000125 (const ??? 0)  (usage 3)
iUserbutton154                       186  0x000000ba (const ??? 0)  (usage 3)
iUserbutton155                       187  0x000000bb (const ??? 0)  (usage 3)
iUserbutton156                       188  0x000000bc (const ??? 0)  (usage 3)
iUserbutton157                       189  0x000000bd (const ??? 0)  (usage 3)
iUserbutton158                       181  0x000000b5 (const ??? 0)  (usage 3)
iUserbutton159                        81  0x00000051 (const ??? 0)  (usage 3)
iUserbutton16                         86  0x00000056 (const ??? 0)  (usage 3)
iUserbutton160                       215  0x000000d7 (const ??? 0)  (usage 3)
iUserbutton161                       234  0x000000ea (const ??? 0)  (usage 3)
iUserbutton162                       216  0x000000d8 (const ??? 0)  (usage 3)
iUserbutton163                       474  0x000001da (const ??? 0)  (usage 3)
iUserbutton164                       475  0x000001db (const ??? 0)  (usage 3)
iUserbutton165                       476  0x000001dc (const ??? 0)  (usage 3)
iUserbutton166                       454  0x000001c6 (const ??? 0)  (usage 3)
iUserbutton167                       477  0x000001dd (const ??? 0)  (usage 3)
iUserbutton168                       478  0x000001de (const ??? 0)  (usage 3)
iUserbutton169                       479  0x000001df (const ??? 0)  (usage 3)
iUserbutton17                        105  0x00000069 (const ??? 0)  (usage 3)
iUserbutton170                       455  0x000001c7 (const ??? 0)  (usage 3)
iUserbutton172                       402  0x00000192 (const ??? 0)  (usage 3)
iUserbutton173                       410  0x0000019a (const ??? 0)  (usage 3)
iUserbutton174                       411  0x0000019b (const ??? 0)  (usage 3)
iUserbutton177                       217  0x000000d9 (const ??? 0)  (usage 3)
iUserbutton178                       218  0x000000da (const ??? 0)  (usage 3)
iUserbutton179                       325  0x00000145 (const ??? 0)  (usage 3)
iUserbutton18                         87  0x00000057 (const ??? 0)  (usage 3)
iUserbutton180                       326  0x00000146 (const ??? 0)  (usage 3)
iUserbutton181                       331  0x0000014b (const ??? 0)  (usage 3)
iUserbutton182                       332  0x0000014c (const ??? 0)  (usage 3)
iUserbutton183                       337  0x00000151 (const ??? 0)  (usage 3)
iUserbutton184                       338  0x00000152 (const ??? 0)  (usage 3)
iUserbutton185                       339  0x00000153 (const ??? 0)  (usage 3)
iUserbutton186                       334  0x0000014e (const ??? 0)  (usage 3)
iUserbutton187                       335  0x0000014f (const ??? 0)  (usage 3)
iUserbutton188                       342  0x00000156 (const ??? 0)  (usage 3)
iUserbutton19                         85  0x00000055 (const ??? 0)  (usage 3)
iUserbutton190                       349  0x0000015d (const ??? 0)  (usage 3)
iUserbutton191                       360  0x00000168 (const ??? 0)  (usage 3)
iUserbutton193                       365  0x0000016d (const ??? 0)  (usage 3)
iUserbutton194                       357  0x00000165 (const ??? 0)  (usage 3)
iUserbutton195                       358  0x00000166 (const ??? 0)  (usage 3)
iUserbutton196                       366  0x0000016e (const ??? 0)  (usage 3)
iUserbutton197                       219  0x000000db (const ??? 0)  (usage 3)
iUserbutton198                       379  0x0000017b (const ??? 0)  (usage 3)
iUserbutton199                       367  0x0000016f (const ??? 0)  (usage 3)
iUserbutton2                          79  0x0000004f (const ??? 0)  (usage 3)
iUserbutton20                        669  0x0000029d (const ??? 0)  (usage 3)
iUserbutton200                       368  0x00000170 (const ??? 0)  (usage 3)
iUserbutton201                       369  0x00000171 (const ??? 0)  (usage 3)
iUserbutton202                       370  0x00000172 (const ??? 0)  (usage 3)
iUserbutton203                       371  0x00000173 (const ??? 0)  (usage 3)
iUserbutton204                       220  0x000000dc (const ??? 0)  (usage 3)
iUserbutton205                       221  0x000000dd (const ??? 0)  (usage 3)
iUserbutton206                       376  0x00000178 (const ??? 0)  (usage 3)
iUserbutton207                       377  0x00000179 (const ??? 0)  (usage 3)
iUserbutton208                       424  0x000001a8 (const ??? 0)  (usage 3)
iUserbutton209                       380  0x0000017c (const ??? 0)  (usage 3)
iUserbutton21                        515  0x00000203 (const ??? 0)  (usage 3)
iUserbutton210                       600  0x00000258 (const ??? 0)  (usage 3)
iUserbutton211                       387  0x00000183 (const ??? 0)  (usage 3)
iUserbutton212                       171  0x000000ab (const ??? 0)  (usage 3)
iUserbutton213                       177  0x000000b1 (const ??? 0)  (usage 3)
iUserbutton214                       425  0x000001a9 (const ??? 0)  (usage 3)
iUserbutton215                       122  0x0000007a (const ??? 0)  (usage 3)
iUserbutton216                       266  0x0000010a (const ??? 0)  (usage 3)
iUserbutton217                       298  0x0000012a (const ??? 0)  (usage 3)
iUserbutton218                       361  0x00000169 (const ??? 0)  (usage 3)
iUserbutton219                       428  0x000001ac (const ??? 0)  (usage 3)
iUserbutton22                        154  0x0000009a (const ??? 0)  (usage 3)
iUserbutton220                       429  0x000001ad (const ??? 0)  (usage 3)
iUserbutton221                       432  0x000001b0 (const ??? 0)  (usage 3)
iUserbutton222                       434  0x000001b2 (const ??? 0)  (usage 3)
iUserbutton223                       435  0x000001b3 (const ??? 0)  (usage 3)
iUserbutton224                        71  0x00000047 (const ??? 0)  (usage 3)
iUserbutton226                       453  0x000001c5 (const ??? 0)  (usage 3)
iUserbutton227                       451  0x000001c3 (const ??? 0)  (usage 3)
iUserbutton228                       452  0x000001c4 (const ??? 0)  (usage 3)
iUserbutton229                       448  0x000001c0 (const ??? 0)  (usage 3)
iUserbutton23                        155  0x0000009b (const ??? 0)  (usage 3)
iUserbutton230                       618  0x0000026a (const ??? 0)  (usage 3)
iUserbutton233                       437  0x000001b5 (const ??? 0)  (usage 3)
iUserbutton234                       444  0x000001bc (const ??? 0)  (usage 3)
iUserbutton237                       303  0x0000012f (const ??? 0)  (usage 3)
iUserbutton238                       488  0x000001e8 (const ??? 0)  (usage 3)
iUserbutton239                       489  0x000001e9 (const ??? 0)  (usage 3)
iUserbutton24                        156  0x0000009c (const ??? 0)  (usage 3)
iUserbutton241                       495  0x000001ef (const ??? 0)  (usage 3)
iUserbutton242                       496  0x000001f0 (const ??? 0)  (usage 3)
iUserbutton243                       438  0x000001b6 (const ??? 0)  (usage 3)
iUserbutton244                       652  0x0000028c (const ??? 0)  (usage 3)
iUserbutton246                       464  0x000001d0 (const ??? 0)  (usage 3)
iUserbutton247                       465  0x000001d1 (const ??? 0)  (usage 3)
iUserbutton248                       466  0x000001d2 (const ??? 0)  (usage 3)
iUserbutton249                       467  0x000001d3 (const ??? 0)  (usage 3)
iUserbutton25                        157  0x0000009d (const ??? 0)  (usage 3)
iUserbutton250                       468  0x000001d4 (const ??? 0)  (usage 3)
iUserbutton251                       469  0x000001d5 (const ??? 0)  (usage 3)
iUserbutton26                        153  0x00000099 (const ??? 0)  (usage 3)
iUserbutton27                        158  0x0000009e (const ??? 0)  (usage 3)
iUserbutton28                        518  0x00000206 (const ??? 0)  (usage 3)
iUserbutton29                        200  0x000000c8 (const ??? 0)  (usage 3)
iUserbutton3                         256  0x00000100 (const ??? 0)  (usage 3)
iUserbutton30                        205  0x000000cd (const ??? 0)  (usage 3)
iUserbutton31                        519  0x00000207 (const ??? 0)  (usage 3)
iUserbutton32                        106  0x0000006a (const ??? 0)  (usage 3)
iUserbutton33                        107  0x0000006b (const ??? 0)  (usage 3)
iUserbutton34                        159  0x0000009f (const ??? 0)  (usage 3)
iUserbutton35                        160  0x000000a0 (const ??? 0)  (usage 3)
iUserbutton36                        670  0x0000029e (const ??? 0)  (usage 3)
iUserbutton37                          8  0x00000008 (const ??? 0)  (usage 3)
iUserbutton38                        245  0x000000f5 (const ??? 0)  (usage 3)
iUserbutton39                        246  0x000000f6 (const ??? 0)  (usage 3)
iUserbutton4                         441  0x000001b9 (const ??? 0)  (usage 3)
iUserbutton40                        257  0x00000101 (const ??? 0)  (usage 3)
iUserbutton41                        180  0x000000b4 (const ??? 0)  (usage 3)
iUserbutton42                        258  0x00000102 (const ??? 0)  (usage 3)
iUserbutton43                        511  0x000001ff (const ??? 0)  (usage 3)
iUserbutton44                        431  0x000001af (const ??? 0)  (usage 3)
iUserbutton45                        259  0x00000103 (const ??? 0)  (usage 3)
iUserbutton46                        260  0x00000104 (const ??? 0)  (usage 3)
iUserbutton47                        512  0x00000200 (const ??? 0)  (usage 3)
iUserbutton48                        442  0x000001ba (const ??? 0)  (usage 3)
iUserbutton49                        348  0x0000015c (const ??? 0)  (usage 3)
iUserbutton5                           6  0x00000006 (const ??? 0)  (usage 3)
iUserbutton50                         80  0x00000050 (const ??? 0)  (usage 3)
iUserbutton51                        530  0x00000212 (const ??? 0)  (usage 3)
iUserbutton52                        671  0x0000029f (const ??? 0)  (usage 3)
iUserbutton53                        124  0x0000007c (const ??? 0)  (usage 3)
iUserbutton54                         76  0x0000004c (const ??? 0)  (usage 3)
iUserbutton55                          9  0x00000009 (const ??? 0)  (usage 3)
iUserbutton56                         11  0x0000000b (const ??? 0)  (usage 3)
iUserbutton57                         77  0x0000004d (const ??? 0)  (usage 3)
iUserbutton59                        264  0x00000108 (const ??? 0)  (usage 3)
iUserbutton6                         514  0x00000202 (const ??? 0)  (usage 3)
iUserbutton60                        531  0x00000213 (const ??? 0)  (usage 3)
iUserbutton61                          3  0x00000003 (const ??? 0)  (usage 3)
iUserbutton62                        527  0x0000020f (const ??? 0)  (usage 3)
iUserbutton63                        524  0x0000020c (const ??? 0)  (usage 3)
iUserbutton64                        225  0x000000e1 (const ??? 0)  (usage 3)
iUserbutton65                        115  0x00000073 (const ??? 0)  (usage 3)
iUserbutton66                        297  0x00000129 (const ??? 0)  (usage 3)
iUserbutton67                        341  0x00000155 (const ??? 0)  (usage 3)
iUserbutton68                        320  0x00000140 (const ??? 0)  (usage 3)
iUserbutton69                        592  0x00000250 (const ??? 0)  (usage 3)
iUserbutton7                          69  0x00000045 (const ??? 0)  (usage 3)
iUserbutton70                        116  0x00000074 (const ??? 0)  (usage 3)
iUserbutton72                        525  0x0000020d (const ??? 0)  (usage 3)
iUserbutton73                        528  0x00000210 (const ??? 0)  (usage 3)
iUserbutton74                        198  0x000000c6 (const ??? 0)  (usage 3)
iUserbutton75                        111  0x0000006f (const ??? 0)  (usage 3)
iUserbutton76                        112  0x00000070 (const ??? 0)  (usage 3)
iUserbutton77                        113  0x00000071 (const ??? 0)  (usage 3)
iUserbutton78                        120  0x00000078 (const ??? 0)  (usage 3)
iUserbutton79                        121  0x00000079 (const ??? 0)  (usage 3)
iUserbutton8                          68  0x00000044 (const ??? 0)  (usage 3)
iUserbutton80                        265  0x00000109 (const ??? 0)  (usage 3)
iUserbutton81                        128  0x00000080 (const ??? 0)  (usage 3)
iUserbutton82                        129  0x00000081 (const ??? 0)  (usage 3)
iUserbutton83                        114  0x00000072 (const ??? 0)  (usage 3)
iUserbutton84                        285  0x0000011d (const ??? 0)  (usage 3)
iUserbutton85                         12  0x0000000c (const ??? 0)  (usage 3)
iUserbutton86                         13  0x0000000d (const ??? 0)  (usage 3)
iUserbutton87                        300  0x0000012c (const ??? 0)  (usage 3)
iUserbutton88                          4  0x00000004 (const ??? 0)  (usage 3)
iUserbutton89                        533  0x00000215 (const ??? 0)  (usage 3)
iUserbutton9                          70  0x00000046 (const ??? 0)  (usage 3)
iUserbutton90                        282  0x0000011a (const ??? 0)  (usage 3)
iUserbutton91                        274  0x00000112 (const ??? 0)  (usage 3)
iUserbutton92                        275  0x00000113 (const ??? 0)  (usage 3)
iUserbutton93                        401  0x00000191 (const ??? 0)  (usage 3)
iUserbutton94                        147  0x00000093 (const ??? 0)  (usage 3)
iUserbutton95                        150  0x00000096 (const ??? 0)  (usage 3)
iUserbutton97                        645  0x00000285 (const ??? 0)  (usage 3)
iUserbutton98                        646  0x00000286 (const ??? 0)  (usage 3)
iUserbutton99                        556  0x0000022c (const ??? 0)  (usage 3)
iUserimages0                         278  0x00000116 (const ??? 0)  (usage 3)
iUserimages1                          14  0x0000000e (const ??? 0)  (usage 3)
iUserimages10                        513  0x00000201 (const ??? 0)  (usage 3)
iUserimages11                        165  0x000000a5 (const ??? 0)  (usage 3)
iUserimages12                        222  0x000000de (const ??? 0)  (usage 3)
iUserimages13                        117  0x00000075 (const ??? 0)  (usage 3)
iUserimages14                        118  0x00000076 (const ??? 0)  (usage 3)
iUserimages15                        119  0x00000077 (const ??? 0)  (usage 3)
iUserimages16                        166  0x000000a6 (const ??? 0)  (usage 3)
iUserimages17                         18  0x00000012 (const ??? 0)  (usage 3)
iUserimages18                         19  0x00000013 (const ??? 0)  (usage 3)
iUserimages19                         20  0x00000014 (const ??? 0)  (usage 3)
iUserimages2                         372  0x00000174 (const ??? 0)  (usage 3)
iUserimages20                         21  0x00000015 (const ??? 0)  (usage 3)
iUserimages21                        492  0x000001ec (const ??? 0)  (usage 3)
iUserimages22                        490  0x000001ea (const ??? 0)  (usage 3)
iUserimages23                         23  0x00000017 (const ??? 0)  (usage 3)
iUserimages24                         24  0x00000018 (const ??? 0)  (usage 3)
iUserimages25                         25  0x00000019 (const ??? 0)  (usage 3)
iUserimages26                         26  0x0000001a (const ??? 0)  (usage 3)
iUserimages27                         27  0x0000001b (const ??? 0)  (usage 3)
iUserimages28                         28  0x0000001c (const ??? 0)  (usage 3)
iUserimages29                         29  0x0000001d (const ??? 0)  (usage 3)
iUserimages3                         318  0x0000013e (const ??? 0)  (usage 3)
iUserimages30                         22  0x00000016 (const ??? 0)  (usage 3)
iUserimages31                         30  0x0000001e (const ??? 0)  (usage 3)
iUserimages32                         31  0x0000001f (const ??? 0)  (usage 3)
iUserimages33                         32  0x00000020 (const ??? 0)  (usage 3)
iUserimages34                         33  0x00000021 (const ??? 0)  (usage 3)
iUserimages35                         34  0x00000022 (const ??? 0)  (usage 3)
iUserimages36                         35  0x00000023 (const ??? 0)  (usage 3)
iUserimages37                         36  0x00000024 (const ??? 0)  (usage 3)
iUserimages38                         37  0x00000025 (const ??? 0)  (usage 3)
iUserimages39                         38  0x00000026 (const ??? 0)  (usage 3)
iUserimages4                         148  0x00000094 (const ??? 0)  (usage 3)
iUserimages40                         39  0x00000027 (const ??? 0)  (usage 3)
iUserimages41                         40  0x00000028 (const ??? 0)  (usage 3)
iUserimages42                         41  0x00000029 (const ??? 0)  (usage 3)
iUserimages43                         42  0x0000002a (const ??? 0)  (usage 3)
iUserimages44                         43  0x0000002b (const ??? 0)  (usage 3)
iUserimages45                         44  0x0000002c (const ??? 0)  (usage 3)
iUserimages46                         45  0x0000002d (const ??? 0)  (usage 3)
iUserimages47                         46  0x0000002e (const ??? 0)  (usage 3)
iUserimages48                         47  0x0000002f (const ??? 0)  (usage 3)
iUserimages49                         48  0x00000030 (const ??? 0)  (usage 3)
iUserimages5                         151  0x00000097 (const ??? 0)  (usage 3)
iUserimages50                         49  0x00000031 (const ??? 0)  (usage 3)
iUserimages51                         50  0x00000032 (const ??? 0)  (usage 3)
iUserimages52                         51  0x00000033 (const ??? 0)  (usage 3)
iUserimages53                         52  0x00000034 (const ??? 0)  (usage 3)
iUserimages54                         53  0x00000035 (const ??? 0)  (usage 3)
iUserimages55                         54  0x00000036 (const ??? 0)  (usage 3)
iUserimages56                         55  0x00000037 (const ??? 0)  (usage 3)
iUserimages57                         56  0x00000038 (const ??? 0)  (usage 3)
iUserimages58                         57  0x00000039 (const ??? 0)  (usage 3)
iUserimages59                         58  0x0000003a (const ??? 0)  (usage 3)
iUserimages6                         103  0x00000067 (const ??? 0)  (usage 3)
iUserimages60                         59  0x0000003b (const ??? 0)  (usage 3)
iUserimages61                         60  0x0000003c (const ??? 0)  (usage 3)
iUserimages62                         61  0x0000003d (const ??? 0)  (usage 3)
iUserimages63                         62  0x0000003e (const ??? 0)  (usage 3)
iUserimages64                         63  0x0000003f (const ??? 0)  (usage 3)
iUserimages65                         64  0x00000040 (const ??? 0)  (usage 3)
iUserimages66                         65  0x00000041 (const ??? 0)  (usage 3)
iUserimages67                         66  0x00000042 (const ??? 0)  (usage 3)
iUserimages68                        641  0x00000281 (const ??? 0)  (usage 3)
iUserimages69                        642  0x00000282 (const ??? 0)  (usage 3)
iUserimages7                          17  0x00000011 (const ??? 0)  (usage 3)
iUserimages70                        643  0x00000283 (const ??? 0)  (usage 3)
iUserimages71                        644  0x00000284 (const ??? 0)  (usage 3)
iUserimages8                         576  0x00000240 (const ??? 0)  (usage 3)
iUserimages9                         577  0x00000241 (const ??? 0)  (usage 3)
iVideo0                                0  0x00000000 (const ??? 0)  (usage 3)
iVideo1                              254  0x000000fe (const ??? 0)  (usage 3)
iVideo10                             182  0x000000b6 (const ??? 0)  (usage 3)
iVideo11                             125  0x0000007d (const ??? 0)  (usage 3)
iVideo12                             583  0x00000247 (const ??? 0)  (usage 3)
iVideo13                             603  0x0000025b (const ??? 0)  (usage 3)
iVideo14                              15  0x0000000f (const ??? 0)  (usage 3)
iVideo15                             261  0x00000105 (const ??? 0)  (usage 3)
iVideo16                             172  0x000000ac (const ??? 0)  (usage 3)
iVideo17                             178  0x000000b2 (const ??? 0)  (usage 3)
iVideo18                             388  0x00000184 (const ??? 0)  (usage 3)
iVideo19                             353  0x00000161 (const ??? 0)  (usage 3)
iVideo2                              270  0x0000010e (const ??? 0)  (usage 3)
iVideo20                             190  0x000000be (const ??? 0)  (usage 3)
iVideo21                             413  0x0000019d (const ??? 0)  (usage 3)
iVideo22                             420  0x000001a4 (const ??? 0)  (usage 3)
iVideo23                             422  0x000001a6 (const ??? 0)  (usage 3)
iVideo24                             604  0x0000025c (const ??? 0)  (usage 3)
iVideo25                             605  0x0000025d (const ??? 0)  (usage 3)
iVideo3                              130  0x00000082 (const ??? 0)  (usage 3)
iVideo4                              131  0x00000083 (const ??? 0)  (usage 3)
iVideo5                              132  0x00000084 (const ??? 0)  (usage 3)
iVideo6                              212  0x000000d4 (const ??? 0)  (usage 3)
iVideo9                              322  0x00000142 (const ??? 0)  (usage 3)
IVORY                              65534  0x0000fffe (const dword)  (not used)
KHAKI                              63281  0x0000f731 (const dword)  (not used)
kKeyboardKeystrokes                18763  0x0000494bkKeyboardKeystrokes                18763  0x0000494b (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (not used)
LANDSCAPE                              0  0x00000000 (const dword)  (not used)
LANDSCAPE_R                            1  0x00000001 (const dword)  (usage 3)
LAVENDER                           59199  0x0000e73f (const dword)  (not used)
LAVENDERBLUSH                      65438  0x0000ff9e (const dword)  (not used)
LAWNGREEN                          32736  0x00007fe0 (const dword)  (not used)
ledDigitsDisplay                   23040  0x00005a00 (User func) args[3] r=0  (usage 6)
LEFT_POS                               2  0x00000002 (const dword)  (not used)
LEMONCHIFFON                       65497  0x0000ffd9 (const dword)  (not used)
LIGHTBLUE                          44764  0x0000aedc (const dword)  (not used)
LIGHTCORAL                         62480  0x0000f410 (const dword)  (not used)
LIGHTCYAN                          59391  0x0000e7ff (const dword)  (not used)
LIGHTGOLD                          65498  0x0000ffda (const dword)  (not used)
LIGHTGREEN                         38770  0x00009772 (const dword)  (not used)
LIGHTGREY                          54938  0x0000d69a (const dword)  (not used)
LIGHTPINK                          64952  0x0000fdb8 (const dword)  (not used)
LIGHTSALMON                        64783  0x0000fd0f (const dword)  (not used)
LIGHTSEAGREEN                       9621  0x00002595 (const dword)  (not used)
LIGHTSKYBLUE                       34431  0x0000867f (const dword)  (not used)
LIGHTSLATEGRAY                     29779  0x00007453 (const dword)  (not used)
LIGHTSTEELBLUE                     46651  0x0000b63b (const dword)  (not used)
LIGHTYELLOW                        65532  0x0000fffc (const dword)  (not used)
LIME                                2016  0x000007e0 (const dword)  (not used)
LIMEGREEN                          13926  0x00003666 (const dword)  (not used)
LINE_PATTERN                          26  0x0000001a (const dword)  (not used)
LINEN                              65436  0x0000ff9c (const dword)  (not used)
LO                                     0  0x00000000 (const dword)  (not used)
LObyte                               -47  0xffffffd1 (PmmC func) args[1] r=1  (not used)
LOCAL                                N/A         N/A (macro) //   (not used)
LPCOARSE                           61680  0x0000f0f0 (const dword)  (not used)
LPDASHDOT                            975  0x000003cf (const dword)  (not used)
LPDASHDOTDOT                         819  0x00000333 (const dword)  (not used)
LPFINE                             43690  0x0000aaaa (const dword)  (not used)
LPMEDIUM                           13107  0x00003333 (const dword)  (not used)
LPSOLID                                0  0x00000000 (const dword)  (not used)
M_PA0                                  1  0x00000001 (const dword)  (not used)
M_PA1                                  2  0x00000002 (const dword)  (not used)
M_PA10                              1024  0x00000400 (const dword)  (not used)
M_PA11                              2048  0x00000800 (const dword)  (not used)
M_PA12                              4096  0x00001000 (const dword)  (not used)
M_PA13                              8192  0x00002000 (const dword)  (not used)
M_PA14                             16384  0x00004000 (const dword)  (not used)
M_PA15                             32768  0x00008000 (const dword)  (not used)
M_PA2                                  4  0x00000004 (const dword)  (not used)
M_PA3                                  8  0x00000008 (const dword)  (not used)
M_PA4                                 16  0x00000010 (const dword)  (not used)
M_PA5                                 32  0x00000020 (const dword)  (not used)
M_PA6                                 64  0x00000040 (const dword)  (not used)
M_PA7                                128  0x00000080 (const dword)  (not used)
M_PA8                                256  0x00000100 (const dword)  (not used)
M_PA9                                512  0x00000200 (const dword)  (not used)
MAGENTA                            63519  0x0000f81f (const dword)  (not used)
main                               19945  0x00004de9 (User func) args[0] r=0  (not used)
MAROON                             32768  0x00008000 (const dword)  (not used)
MAX                                  -55  0xffffffc9 (PmmC func) args[2] r=1  (not used)
MaxTotObjects                         37  0x00000025 (const dword)  (usage 6)
MDA                                63552  0x0000f840 (const dword)  (not used)
MEDIA_ADDRESS_HI                      91  0x0000005b (const dword)  (not used)
MEDIA_ADDRESS_LO                      90  0x0000005a (const dword)  (not used)
media_Flush                         -218  0xffffff26 (PmmC func) args[0] r=1  (not used)
media_Image                         -217  0xffffff27 (PmmC func) args[2] r=0  (not used)
media_Init                          -219  0xffffff25 (PmmC func) args[0] r=1  (not used)
media_RdSector                      -211  0xffffff2d (PmmC func) args[1] r=1  (not used)
media_ReadByte                      -213  0xffffff2b (PmmC func) args[0] r=1  (not used)
media_ReadWord                      -214  0xffffff2a (PmmC func) args[0] r=1  (not used)
MEDIA_SECTOR_COUNT                    94  0x0000005e (const dword)  (not used)
MEDIA_SECTOR_HI                       93  0x0000005d (const dword)  (not used)
MEDIA_SECTOR_LO                       92  0x0000005c (const dword)  (not used)
media_SetAdd                        -209  0xffffff2f (PmmC func) args[2] r=0  (not used)
media_SetSector                     -210  0xffffff2e (PmmC func) args[2] r=0  (not used)
media_Video                         -207  0xffffff31 (PmmC func) args[2] r=0  (not used)
media_VideoFrame                    -208  0xffffff30 (PmmC func) args[3] r=0  (not used)
media_WriteByte                     -215  0xffffff29 (PmmC func) args[1] r=1  (not used)
media_WriteWord                     -216  0xffffff28 (PmmC func) args[1] r=1  (not used)
media_WrSector                      -212  0xffffff2c (PmmC func) args[1] r=1  (not used)
MEDIUMAQUAMARINE                   26229  0x00006675 (const dword)  (not used)
MEDIUMBLUE                            25  0x00000019 (const dword)  (not used)
MEDIUMORCHID                       47802  0x0000baba (const dword)  (not used)
MEDIUMPURPLE                       37787  0x0000939b (const dword)  (not used)
MEDIUMSEAGREEN                     15758  0x00003d8e (const dword)  (not used)
MEDIUMSLATEBLUE                    31581  0x00007b5d (const dword)  (not used)
MEDIUMSPRINGGREEN                   2003  0x000007d3 (const dword)  (not used)
MEDIUMTURQUOISE                    20121  0x00004e99 (const dword)  (not used)
MEDIUMVIOLETRED                    49328  0x0000c0b0 (const dword)  (not used)
mem_Alloc                           -413  0xfffffe63 (PmmC func) args[1] r=1  (not used)
mem_AllocV                          -414  0xfffffe62 (PmmC func) args[1] r=1  (not used)
mem_AllocZ                          -415  0xfffffe61 (PmmC func) args[1] r=1  (not used)
mem_ArrayOp1                         -67  0xffffffbd (PmmC func) args[4] r=0  (not used)
mem_ArrayOp2                         -68  0xffffffbc (PmmC func) args[5] r=0  (not used)
mem_Compare                         -421  0xfffffe5b (PmmC func) args[3] r=1  (not used)
mem_Copy                            -420  0xfffffe5c (PmmC func) args[3] r=1  (not used)
mem_Free                            -417  0xfffffe5f (PmmC func) args[1] r=1  (not used)
mem_Heap                            -418  0xfffffe5e (PmmC func) args[0] r=1  (not used)
mem_Realloc                         -416  0xfffffe60 (PmmC func) args[2] r=1  (not used)
mem_Set                             -419  0xfffffe5d (PmmC func) args[3] r=1  (not used)
MIDI                                   9  0x00000009 (const dword)  (not used)
MIDNIGHTBLUE                        6350  0x000018ce (const dword)  (not used)
MIN                                  -54  0xffffffca (PmmC func) args[2] r=1  (not used)
MINTCREAM                          63487  0x0000f7ff (const dword)  (not used)
MISTYROSE                          65340  0x0000ff3c (const dword)  (not used)
MOCCASIN                           65334  0x0000ff36 (const dword)  (not used)
NAK                                   21  0x00000015 (const dword)  (usage 3)
nak0                               24553  0x00005fe9 (User func) args[0] r=0  (usage 24)
nAniTimers                             0  0x00000000 (const dword)  (not used)
NAVAJOWHITE                        65269  0x0000fef5 (const dword)  (not used)
NAVY                                  16  0x00000010 (const dword)  (not used)
nInputs                              664  0x00000298 (const dword)  (usage 3)
nObjects                             672  0x000002a0 (const dword)  (not used)
NOTOUCH                                0  0x00000000 (const dword)  (not used)
NP_565                                 0  0x00000000 (const dword)  (not used)
NP_RGB                                 1  0x00000001 (const dword)  (not used)
NP_Write                            -535  0xfffffde9 (PmmC func) args[7] r=1  (not used)
NP_XRGB                                2  0x00000002 (const dword)  (not used)
nStrings                              56  0x00000038 (const dword)  (usage 3)
NybleSwap                            -50  0xffffffce (PmmC func) args[1] r=1  (not used)
o4Dbuttons                         17797  0x00004585o4Dbuttons                         17797  0x00004585 (mem) word[102] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 12)
oAngularmeters                     17043  0x00004293oAngularmeters                     17043  0x00004293 (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oAniButtons                        18001  0x00004651oAniButtons                        18001  0x00004651 (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
OBJECT_COLOUR                         18  0x00000012 (const dword)  (not used)
oColorPickers                      18003  0x00004653oColorPickers                      18003  0x00004653 (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oCoolgauges                        17045  0x00004295oCoolgauges                        17045  0x00004295 (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oCustomDigitsn                     18767  0x0000494foCustomDigitsn                     18767  0x0000494f (mem) word[425] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 6)
oCustomdigitss                     17047  0x00004297oCustomdigitss                     17047  0x00004297 (mem) word[86] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 9)
oDipSwitchs                        17029  0x00004285oDipSwitchs                        17029  0x00004285 (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
OFF                                    0  0x00000000 (const dword)  (usage 6)
oForms                             17219  0x00004343oForms                             17219  0x00004343 (mem) word[119] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
Ofs_Digits_Digits                      2  0x00000002 (const dword)  (usage 9)
Ofs_Digits_LeadingBlanks               8  0x00000008 (const dword)  (usage 3)
Ofs_Digits_Left                        0  0x00000000 (const dword)  (usage 3)
Ofs_Digits_MinDigits                   4  0x00000004 (const dword)  (usage 3)
Ofs_Digits_Widthdigit                  6  0x00000006 (const dword)  (usage 3)
Ofs_IPD_DOWN                          16  0x00000010 (const dword)  (usage 6)
Ofs_IPD_OBJVIDX                       20  0x00000014 (const dword)  (usage 18)
Ofs_IPD_P1                             2  0x00000002 (const dword)  (usage 18)
Ofs_IPD_P2                             4  0x00000004 (const dword)  (usage 54)
Ofs_IPD_P3                             6  0x00000006 (const dword)  (usage 15)
Ofs_IPD_P4                             8  0x00000008 (const dword)  (usage 18)
Ofs_IPD_P5                            10  0x0000000a (const dword)  (usage 15)
Ofs_IPD_P6                            12  0x0000000c (const dword)  (usage 18)
Ofs_IPD_P7                            14  0x0000000e (const dword)  (not used)
Ofs_IPD_RELEASE                       18  0x00000012 (const dword)  (usage 9)
Ofs_String_Ansi                       22  0x00000016 (const dword)  (usage 3)
Ofs_String_BGColor                    16  0x00000010 (const dword)  (usage 6)
Ofs_String_FGColor                    14  0x0000000e (const dword)  (usage 3)
Ofs_String_FontAttribs                18  0x00000012 (const dword)  (usage 3)
Ofs_String_Form                       24  0x00000018 (const dword)  (usage 3)
Ofs_String_Size                        4  0x00000004 (const dword)  (usage 3)
Ofs_String_StartH                      0  0x00000000 (const dword)  (usage 3)
Ofs_String_StartL                      2  0x00000002 (const dword)  (usage 3)
Ofs_String_Transparent                20  0x00000014 (const dword)  (usage 3)
Ofs_String_x1                          6  0x00000006 (const dword)  (usage 12)
Ofs_String_x2                         10  0x0000000a (const dword)  (usage 9)
Ofs_String_y1                          8  0x00000008 (const dword)  (usage 12)
Ofs_String_y2                         12  0x0000000c (const dword)  (usage 9)
oGauges                            17457  0x00004431oGauges                            17457  0x00004431 (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oGSliders                          17037  0x0000428doGSliders                          17037  0x0000428d (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 6)
oImages                            17459  0x00004433oImages                            17459  0x00004433 (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oKeyboards                         17461  0x00004435oKeyboards                         17461  0x00004435 (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oKnobs                             17031  0x00004287oKnobs                             17031  0x00004287 (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
OLDLACE                            65468  0x0000ffbc (const dword)  (not used)
oldn                                 306  0x00000132 (mem) word (global)  (usage 42)
oLeddigitss                        17465  0x00004439oLeddigitss                        17465  0x00004439 (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oLeds                              17463  0x00004437oLeds                              17463  0x00004437 (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
OLIVE                              33792  0x00008400 (const dword)  (not used)
OLIVEDRAB                          27748  0x00006c64 (const dword)  (not used)
oMagicObjects                      18511  0x0000484foMagicObjects                      18511  0x0000484f (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oMeters                            17467  0x0000443boMeters                            17467  0x0000443b (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
ON                                     1  0x00000001 (const dword)  (usage 6)
oObjects                             228  0x000000e4 (mem) word[38] (global)  (usage 120)
OP1_ADD                                5  0x00000005 (const dword)  (not used)
OP1_AND                                2  0x00000002 (const dword)  (not used)
OP1_BLACKEN                           16  0x00000010 (const dword)  (not used)
OP1_DARKEN                            18  0x00000012 (const dword)  (not used)
OP1_DIV                                8  0x00000008 (const dword)  (not used)
OP1_GRAY                              14  0x0000000e (const dword)  (not used)
OP1_IOR                                3  0x00000003 (const dword)  (not used)
OP1_LIGHTEN                           17  0x00000011 (const dword)  (not used)
OP1_MUL                                7  0x00000007 (const dword)  (not used)
OP1_NOP                                0  0x00000000 (const dword)  (not used)
OP1_REV                                9  0x00000009 (const dword)  (not used)
OP1_ROL                               12  0x0000000c (const dword)  (not used)
OP1_ROR                               13  0x0000000d (const dword)  (not used)
OP1_SET                                1  0x00000001 (const dword)  (not used)
OP1_SHL                               10  0x0000000a (const dword)  (not used)
OP1_SHR                               11  0x0000000b (const dword)  (not used)
OP1_SUB                                6  0x00000006 (const dword)  (not used)
OP1_WHITEN                            15  0x0000000f (const dword)  (not used)
OP1_XOR                                4  0x00000004 (const dword)  (not used)
OP2_ADD                                4  0x00000004 (const dword)  (not used)
OP2_AND                                1  0x00000001 (const dword)  (not used)
OP2_BLEND                              9  0x00000009 (const dword)  (not used)
OP2_COPY                               8  0x00000008 (const dword)  (not used)
OP2_DIV                                7  0x00000007 (const dword)  (not used)
OP2_IOR                                2  0x00000002 (const dword)  (not used)
OP2_MUL                                6  0x00000006 (const dword)  (not used)
OP2_SUB                                5  0x00000005 (const dword)  (not used)
OP2_XOR                                3  0x00000003 (const dword)  (not used)
OPAQUE                                 1  0x00000001 (const dword)  (not used)
oPinInputs                         17795  0x00004583oPinInputs                         17795  0x00004583 (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oPinOutputs                        18525  0x0000485doPinOutputs                        18525  0x0000485d (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
ORANGE                             64800  0x0000fd20 (const dword)  (not used)
ORANGERED                          64032  0x0000fa20 (const dword)  (not used)
ORCHID                             56218  0x0000db9a (const dword)  (not used)
oRockerSwitchs                     17033  0x00004289oRockerSwitchs                     17033  0x00004289 (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oRotarySwitchs                     17035  0x0000428boRotarySwitchs                     17035  0x0000428b (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oScopes                            17645  0x000044edoScopes                            17645  0x000044ed (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (not used)
oSmartGauges                       18513  0x00004851oSmartGauges                       18513  0x00004851 (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oSmartKnobs                        18519  0x00004857oSmartKnobs                        18519  0x00004857 (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oSmartSliders                      18515  0x00004853oSmartSliders                      18515  0x00004853 (mem) word[2] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 6)
oSoundss                           18523  0x0000485boSoundss                           18523  0x0000485b (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oSpectrums                         17643  0x000044eboSpectrums                         17643  0x000044eb (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oStaticTexts                       17641  0x000044e9oStaticTexts                       17641  0x000044e9 (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oStringss                          17469  0x0000443doStringss                          17469  0x0000443d (mem) word[57] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 4)
oStringss                         UNRESOLVED  (usage 2)
OT_ACTIVATE                          103  0x00000067 (const dword)  (usage 63)
OT_MAGIC                             108  0x0000006c (const dword)  (usage 3)
OT_NEXTFRAME                         104  0x00000068 (const dword)  (usage 3)
OT_NEXTSTRING                        106  0x0000006a (const dword)  (usage 3)
OT_PREVFRAME                         105  0x00000069 (const dword)  (usage 3)
OT_PREVSTRING                        107  0x0000006b (const dword)  (usage 3)
OT_REPORT                            100  0x00000064 (const dword)  (usage 954)
OT_SETANOTHER                        102  0x00000066 (const dword)  (usage 3)
OT_SETCONST                          101  0x00000065 (const dword)  (usage 3)
oTanks                             17647  0x000044efoTanks                             17647  0x000044ef (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oThermometers                      17583  0x000044afoThermometers                      17583  0x000044af (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oTimers                            18521  0x00004859oTimers                            18521  0x00004859 (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oTrackbars                         17039  0x0000428foTrackbars                         17039  0x0000428f (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 6)
oUserButtons                       18005  0x00004655oUserButtons                       18005  0x00004655 (mem) word[253] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 12)
oUserImagess                       17649  0x000044f1oUserImagess                       17649  0x000044f1 (mem) word[73] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oUserleds                          17585  0x000044b1oUserleds                          17585  0x000044b1 (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
OUTLINE                                1  0x00000001 (const dword)  (not used)
OUTLINE_COLOUR                        24  0x00000018 (const dword)  (not used)
OutputCS                             564  0x00000234 (mem) word (global)  (usage 9)
OVF                                  -63  0xffffffc1 (PmmC func) args[0] r=1  (usage 3)
oVideos                            17587  0x000044b3oVideos                            17587  0x000044b3 (mem) word[27] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
OW_Read                             -523  0xfffffdf5 (PmmC func) args[1] r=1  (not used)
OW_Read9                            -524  0xfffffdf4 (PmmC func) args[1] r=1  (not used)
OW_Reset                            -522  0xfffffdf6 (PmmC func) args[1] r=1  (not used)
OW_Write                            -525  0xfffffdf3 (PmmC func) args[2] r=0  (not used)
oWinButtons                        17041  0x00004291oWinButtons                        17041  0x00004291 (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
PA0                                    1  0x00000001 (const dword)  (not used)
PA1                                    2  0x00000002 (const dword)  (not used)
PA10                                  11  0x0000000b (const dword)  (not used)
PA11                                  12  0x0000000c (const dword)  (not used)
PA12                                  13  0x0000000d (const dword)  (not used)
PA13                                  14  0x0000000e (const dword)  (not used)
PA14                                  15  0x0000000f (const dword)  (not used)
PA15                                  16  0x00000010 (const dword)  (not used)
PA2                                    3  0x00000003 (const dword)  (not used)
PA3                                    4  0x00000004 (const dword)  (not used)
PA4                                    5  0x00000005 (const dword)  (not used)
PA5                                    6  0x00000006 (const dword)  (not used)
PA6                                    7  0x00000007 (const dword)  (not used)
PA7                                    8  0x00000008 (const dword)  (not used)
PA8                                    9  0x00000009 (const dword)  (not used)
PA9                                   10  0x0000000a (const dword)  (not used)
PALEGOLDENROD                      61269  0x0000ef55 (const dword)  (not used)
PALEGREEN                          40915  0x00009fd3 (const dword)  (not used)
PALETURQUOISE                      44925  0x0000af7d (const dword)  (not used)
PALEVIOLETRED                      56210  0x0000db92 (const dword)  (not used)
PANEL_FRAME                            3  0x00000003 (const dword)  (not used)
PANEL_HIDE                             2  0x00000002 (const dword)  (not used)
PANEL_RAISED                           1  0x00000001 (const dword)  (not used)
PANEL_SUNKEN                           0  0x00000000 (const dword)  (not used)
PAPAYAWHIP                         65402  0x0000ff7a (const dword)  (not used)
pause                                 -6  0xfffffffa (PmmC func) args[1] r=0  (usage 6)
PEACHPUFF                          65239  0x0000fed7 (const dword)  (not used)
peekW                                -34  0xffffffde (PmmC func) args[1] r=1  (not used)
PEN_SIZE                              16  0x00000010 (const dword)  (not used)
PERU                               52263  0x0000cc27 (const dword)  (not used)
PIN_AN                                 5  0x00000005 (const dword)  (not used)
PIN_ANAVG                              6  0x00000006 (const dword)  (not used)
pin_Counter                         -514  0xfffffdfe (PmmC func) args[3] r=1  (not used)
PIN_COUNTER_PA4                      123  0x0000007b (const dword)  (not used)
PIN_COUNTER_PA5                      124  0x0000007c (const dword)  (not used)
PIN_COUNTER_PA6                      125  0x0000007d (const dword)  (not used)
PIN_COUNTER_PA7                      126  0x0000007e (const dword)  (not used)
PIN_COUNTER_PA8                      127  0x0000007f (const dword)  (not used)
PIN_COUNTER_PA9                      128  0x00000080 (const dword)  (not used)
PIN_EVENT_PA4                        129  0x00000081 (const dword)  (not used)
PIN_EVENT_PA5                        130  0x00000082 (const dword)  (not used)
PIN_EVENT_PA6                        131  0x00000083 (const dword)  (not used)
PIN_EVENT_PA7                        132  0x00000084 (const dword)  (not used)
PIN_EVENT_PA8                        133  0x00000085 (const dword)  (not used)
PIN_EVENT_PA9                        134  0x00000086 (const dword)  (not used)
pin_HI                              -113  0xffffff8f (PmmC func) args[1] r=1  (not used)
PIN_INP                                0  0x00000000 (const dword)  (not used)
PIN_INP_HI                             1  0x00000001 (const dword)  (not used)
PIN_INP_LO                             2  0x00000002 (const dword)  (not used)
pin_LO                              -114  0xffffff8e (PmmC func) args[1] r=1  (not used)
PIN_OUT                                3  0x00000003 (const dword)  (not used)
PIN_OUT_OD                             4  0x00000004 (const dword)  (not used)
pin_Pulseout                        -512  0xfffffe00 (PmmC func) args[2] r=1  (not used)
pin_PulseoutB                       -513  0xfffffdff (PmmC func) args[2] r=1  (not used)
pin_PulseoutCount                   -519  0xfffffdf9 (PmmC func) args[4] r=1  (not used)
pin_Read                            -116  0xffffff8c (PmmC func) args[1] r=1  (not used)
pin_Set                             -112  0xffffff90 (PmmC func) args[2] r=1  (not used)
pin_Val                             -115  0xffffff8d (PmmC func) args[2] r=0  (not used)
PINK                               65049  0x0000fe19 (const dword)  (not used)
pInputIndex                          320  0x00000140 (mem) word (global)  (usage 30)
PLUM                               56603  0x0000dd1b (const dword)  (not used)
pokeW                                -35  0xffffffdd (PmmC func) args[2] r=0  (not used)
PORTRAIT                               2  0x00000002 (const dword)  (not used)
PORTRAIT_R                             3  0x00000003 (const dword)  (not used)
POWDERBLUE                         46876  0x0000b71c (const dword)  (not used)
PrintStrings                       24588  0x0000600c (User func) args[3] r=0  (usage 9)
PROGRESSBAR_HIDE                       2  0x00000002 (const dword)  (not used)
PROGRESSBAR_RAISED                 65535  0x0000ffff (const dword)  (not used)
PROGRESSBAR_SUNKEN                 65534  0x0000fffe (const dword)  (not used)
PTN_BDIAGONAL                      65518  0x0000ffee (const ??? 0)  (not used)
PTN_BRICKS                         65521  0x0000fff1 (const ??? 0)  (not used)
PTN_BS_HORIZONTAL                  65510  0x0000ffe6 (const ??? 0)  (not used)
PTN_BS_VERTICAL                    65509  0x0000ffe5 (const ??? 0)  (not used)
PTN_BSHORIZONTAL                   65516  0x0000ffec (const ??? 0)  (not used)
PTN_BSVERTICAL                     65515  0x0000ffeb (const ??? 0)  (not used)
PTN_CARGONET                       65522  0x0000fff2 (const ??? 0)  (not used)
PTN_CIRCUITS                       65523  0x0000fff3 (const ??? 0)  (not used)
PTN_COBBLESTONES                   65524  0x0000fff4 (const ??? 0)  (not used)
PTN_COURSE_B_DIAGONAL              65512  0x0000ffe8 (const ??? 0)  (not used)
PTN_COURSE_CROSS                   65513  0x0000ffe9 (const ??? 0)  (not used)
PTN_COURSE_DIAGONALCROSS           65514  0x0000ffea (const ??? 0)  (not used)
PTN_COURSE_DOTS                    65508  0x0000ffe4 (const ??? 0)  (not used)
PTN_COURSE_F_DIAGONAL              65511  0x0000ffe7 (const ??? 0)  (not used)
PTN_CROSSES                        65535  0x0000ffff (const ??? 0)  (not used)
PTN_DAISIES                        65525  0x0000fff5 (const ??? 0)  (not used)
PTN_DIZZY                          65526  0x0000fff6 (const ??? 0)  (not used)
PTN_EMPTY                          65504  0x0000ffe0 (const dword)  (not used)
PTN_FDIAGONAL                      65517  0x0000ffed (const ??? 0)  (not used)
PTN_FIELDEFFECT                    65527  0x0000fff7 (const ??? 0)  (not used)
PTN_FINE_CROSS                     65519  0x0000ffef (const ??? 0)  (not used)
PTN_FINE_DIAGONAL_CROSS            65520  0x0000fff0 (const ??? 0)  (not used)
PTN_FINE_DOTS                      65506  0x0000ffe2 (const ??? 0)  (not used)
PTN_KEY                            65528  0x0000fff8 (const ??? 0)  (not used)
PTN_MEDIUM_DOTS                    65507  0x0000ffe3 (const ??? 0)  (not used)
PTN_ROUNDER                        65529  0x0000fff9 (const ??? 0)  (not used)
PTN_SCALES                         65530  0x0000fffa (const ??? 0)  (not used)
PTN_SOLID                          65505  0x0000ffe1 (const ??? 0)  (not used)
PTN_STONE                          65531  0x0000fffb (const ??? 0)  (not used)
PTN_THATCHES                       65532  0x0000fffc (const ??? 0)  (not used)
PTN_TILE                           65533  0x0000fffd (const ??? 0)  (not used)
PTN_WAFFLESREVENGE                 65534  0x0000fffe (const ??? 0)  (not used)
PURPLE                             32784  0x00008010 (const dword)  (not used)
putch                                 -2  0xfffffffe (PmmC func) args[1] r=0  (usage 6)
putchXY                               -3  0xfffffffd (PmmC func) args[3] r=0  (not used)
putnum                                -7  0xfffffff9 (PmmC func) args[2] r=1  (not used)
putnumXY                             -51  0xffffffcd (PmmC func) args[4] r=1  (not used)
putstr                                -9  0xfffffff7 (PmmC func) args[1] r=1  (usage 6)
putstrCentred                         -5  0xfffffffb (PmmC func) args[3] r=0  (not used)
putstrXY                              -4  0xfffffffc (PmmC func) args[3] r=0  (not used)
PWM_10KHZ                              6  0x00000006 (const dword)  (not used)
PWM_15KHZ                              7  0x00000007 (const dword)  (not used)
PWM_20KHZ                              8  0x00000008 (const dword)  (not used)
PWM_25KHZ                              9  0x00000009 (const dword)  (not used)
PWM_30KHZ                             10  0x0000000a (const dword)  (not used)
PWM_35KHZ                             11  0x0000000b (const dword)  (not used)
PWM_5KHZ                               5  0x00000005 (const dword)  (not used)
PWM_625HZ                              4  0x00000004 (const dword)  (not used)
PWM_BINARY                             3  0x00000003 (const dword)  (not used)
pwm_Init                            -521  0xfffffdf7 (PmmC func) args[3] r=1  (not used)
PWM_OFF                                0  0x00000000 (const dword)  (not used)
PWM_PLAIN                              1  0x00000001 (const dword)  (not used)
PWM_SERVO                              2  0x00000002 (const dword)  (not used)
QEN1_COUNTER_HI                      136  0x00000088 (const dword)  (not used)
QEN1_COUNTER_LO                      135  0x00000087 (const dword)  (not used)
QEN1_DELTA                           137  0x00000089 (const dword)  (not used)
QEN2_COUNTER_HI                      139  0x0000008b (const dword)  (not used)
QEN2_COUNTER_LO                      138  0x0000008a (const dword)  (not used)
QEN2_DELTA                           140  0x0000008c (const dword)  (not used)
Qencoder1                           -515  0xfffffdfd (PmmC func) args[3] r=1  (not used)
Qencoder1Reset                      -517  0xfffffdfb (PmmC func) args[0] r=0  (not used)
Qencoder2                           -516  0xfffffdfc (PmmC func) args[3] r=1  (not used)
Qencoder2Reset                      -518  0xfffffdfa (PmmC func) args[0] r=0  (not used)
RAND                                 -59  0xffffffc5 (PmmC func) args[0] r=1  (not used)
RANDOM_HI                             33  0x00000021 (const dword)  (not used)
RANDOM_LO                             32  0x00000020 (const dword)  (not used)
RANDVAL                              -60  0xffffffc4 (PmmC func) args[2] r=1  (not used)
READ_OBJ                               0  0x00000000 (const dword)  (usage 3)
ReadCmd                              128  0x00000080 (const dword)  (not used)
ReadObject                         24246  0x00005eb6 (User func) args[2] r=0  (usage 3)
RED                                63488  0x0000f800 (const dword)  (not used)
REPORT_EVENT                           7  0x00000007 (const dword)  (usage 3)
REPORT_MAGIC_EVENT_BYTES              10  0x0000000a (const dword)  (not used)
REPORT_MAGIC_EVENT_DBYTES             11  0x0000000b (const dword)  (not used)
REPORT_OBJ                             5  0x00000005 (const dword)  (usage 3)
RIGHT_POS                              4  0x00000004 (const dword)  (not used)
rKeyboardRoutines                  18765  0x0000494drKeyboardRoutines                  18765  0x0000494d (mem) word[1] (member of C:\Users\agarciamoreno\Desktop\Dev_Pantallas R19\Project Files LCD v200\Sigmax\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (not used)
ROSYBROWN                          48241  0x0000bc71 (const dword)  (not used)
ROYALBLUE                          17244  0x0000435c (const dword)  (usage 24)
RUNFLASH                             128  0x00000080 (const dword)  (not used)
SADDLEBROWN                        35362  0x00008a22 (const dword)  (not used)
SALMON                             64526  0x0000fc0e (const dword)  (not used)
SANDYBROWN                         62764  0x0000f52c (const dword)  (not used)
SAVE_TO_DISK                           7  0x00000007 (const dword)  (not used)
SCREEN_MODE                           23  0x00000017 (const dword)  (not used)
SEAGREEN                           11338  0x00002c4a (const dword)  (not used)
SEASHELL                           65469  0x0000ffbd (const dword)  (not used)
SEED                                 -61  0xffffffc3 (PmmC func) args[1] r=0  (not used)
SendReport                         24486  0x00005fa6 (User func) args[4] r=0  (usage 6)
serin                               -236  0xffffff14 (PmmC func) args[0] r=1  (usage 3)
serin1                              -237  0xffffff13 (PmmC func) args[0] r=1  (not used)
serin2                              -238  0xffffff12 (PmmC func) args[0] r=1  (not used)
serin3                              -239  0xffffff11 (PmmC func) args[0] r=1  (not used)
serinX                               N/A         N/A (macro) serin   (not used)
serout                              -240  0xffffff10 (PmmC func) args[1] r=0  (usage 21)
serout1                             -241  0xffffff0f (PmmC func) args[1] r=0  (not used)
serout2                             -242  0xffffff0e (PmmC func) args[1] r=0  (not used)
serout3                             -243  0xffffff0d (PmmC func) args[1] r=0  (not used)
seroutCS                           24569  0x00005ff9 (User func) args[1] r=0  (usage 15)
seroutOcs                          24536  0x00005fd8 (User func) args[0] r=0  (usage 3)
seroutX                              N/A         N/A (macro) serout   (not used)
setbaud                             -224  0xffffff20 (PmmC func) args[1] r=0  (not used)
SIENNA                             41605  0x0000a285 (const dword)  (not used)
SILVER                             50712  0x0000c618 (const dword)  (not used)
SIN                                  -57  0xffffffc7 (PmmC func) args[1] r=1  (not used)
SKYBLUE                            34429  0x0000867d (const dword)  (not used)
SLATEBLUE                          27353  0x00006ad9 (const dword)  (not used)
SLATEGRAY                          29714  0x00007412 (const dword)  (not used)
SLIDER_HIDE                            2  0x00000002 (const dword)  (not used)
SLIDER_RAISED                          1  0x00000001 (const dword)  (not used)
SLIDER_SUNKEN                          0  0x00000000 (const dword)  (not used)
snd_BufSize                         -461  0xfffffe33 (PmmC func) args[1] r=0  (usage 3)
snd_Continue                        -464  0xfffffe30 (PmmC func) args[0] r=0  (not used)
snd_Freq                            -466  0xfffffe2e (PmmC func) args[2] r=1  (not used)
snd_Pause                           -463  0xfffffe31 (PmmC func) args[0] r=0  (not used)
snd_Pitch                           -460  0xfffffe34 (PmmC func) args[1] r=1  (not used)
snd_Playing                         -465  0xfffffe2f (PmmC func) args[0] r=1  (not used)
snd_Stop                            -462  0xfffffe32 (PmmC func) args[0] r=0  (not used)
snd_Volume                          -459  0xfffffe35 (PmmC func) args[1] r=0  (not used)
SNOW                               65503  0x0000ffdf (const dword)  (not used)
SOLID                                  0  0x00000000 (const dword)  (not used)
SPI1                                   1  0x00000001 (const dword)  (not used)
SPI16_MODE_0                           8  0x00000008 (const dword)  (not used)
SPI16_MODE_1                           9  0x00000009 (const dword)  (not used)
SPI16_MODE_2                          10  0x0000000a (const dword)  (not used)
SPI16_MODE_3                          11  0x0000000b (const dword)  (not used)
SPI16_MODE_4                          12  0x0000000c (const dword)  (not used)
SPI16_MODE_5                          13  0x0000000d (const dword)  (not used)
SPI16_MODE_6                          14  0x0000000e (const dword)  (not used)
SPI16_MODE_7                          15  0x0000000f (const dword)  (not used)
SPI1_Init                           -349  0xfffffea3 (PmmC func) args[2] r=1  (not used)
SPI1_Read                           -352  0xfffffea0 (PmmC func) args[0] r=1  (not used)
spi1_ReadBlock                      -333  0xfffffeb3 (PmmC func) args[2] r=0  (not used)
SPI1_SCK_pin                        -346  0xfffffea6 (PmmC func) args[1] r=1  (not used)
SPI1_SDI_pin                        -343  0xfffffea9 (PmmC func) args[1] r=1  (not used)
SPI1_SDO_pin                        -340  0xfffffeac (PmmC func) args[1] r=1  (not used)
SPI1_Write                          -355  0xfffffe9d (PmmC func) args[1] r=1  (not used)
spi1_WriteBlock                     -359  0xfffffe99 (PmmC func) args[2] r=0  (not used)
SPI2                                   2  0x00000002 (const dword)  (not used)
SPI2_Init                           -350  0xfffffea2 (PmmC func) args[2] r=1  (not used)
SPI2_Read                           -353  0xfffffe9f (PmmC func) args[0] r=1  (not used)
spi2_ReadBlock                      -334  0xfffffeb2 (PmmC func) args[2] r=0  (not used)
SPI2_SCK_pin                        -347  0xfffffea5 (PmmC func) args[1] r=1  (not used)
SPI2_SDI_pin                        -344  0xfffffea8 (PmmC func) args[1] r=1  (not used)
SPI2_SDO_pin                        -341  0xfffffeab (PmmC func) args[1] r=1  (not used)
SPI2_Write                          -356  0xfffffe9c (PmmC func) args[1] r=1  (not used)
spi2_WriteBlock                     -360  0xfffffe98 (PmmC func) args[2] r=0  (not used)
SPI3                                   3  0x00000003 (const dword)  (not used)
SPI3_Init                           -351  0xfffffea1 (PmmC func) args[2] r=1  (not used)
SPI3_Read                           -354  0xfffffe9e (PmmC func) args[0] r=1  (not used)
spi3_ReadBlock                      -335  0xfffffeb1 (PmmC func) args[2] r=0  (not used)
SPI3_SCK_pin                        -348  0xfffffea4 (PmmC func) args[1] r=1  (not used)
SPI3_SDI_pin                        -345  0xfffffea7 (PmmC func) args[1] r=1  (not used)
SPI3_SDO_pin                        -342  0xfffffeaa (PmmC func) args[1] r=1  (not used)
SPI3_Write                          -357  0xfffffe9b (PmmC func) args[1] r=1  (not used)
spi3_WriteBlock                     -361  0xfffffe97 (PmmC func) args[2] r=0  (not used)
SPI8_MODE_0                            0  0x00000000 (const dword)  (not used)
SPI8_MODE_1                            1  0x00000001 (const dword)  (not used)
SPI8_MODE_2                            2  0x00000002 (const dword)  (not used)
SPI8_MODE_3                            3  0x00000003 (const dword)  (not used)
SPI8_MODE_4                            4  0x00000004 (const dword)  (not used)
SPI8_MODE_5                            5  0x00000005 (const dword)  (not used)
SPI8_MODE_6                            6  0x00000006 (const dword)  (not used)
SPI8_MODE_7                            7  0x00000007 (const dword)  (not used)
spi_Disable                         -339  0xfffffead (PmmC func) args[0] r=0  (not used)
spi_Init                            -336  0xfffffeb0 (PmmC func) args[3] r=0  (not used)
spi_Read                            -337  0xfffffeaf (PmmC func) args[0] r=1  (not used)
spi_ReadBlock                       -332  0xfffffeb4 (PmmC func) args[2] r=0  (not used)
SPI_SPEED0                             0  0x00000000 (const dword)  (not used)
SPI_SPEED1                             1  0x00000001 (const dword)  (not used)
SPI_SPEED10                           10  0x0000000a (const dword)  (not used)
SPI_SPEED11                           11  0x0000000b (const dword)  (not used)
SPI_SPEED12                           12  0x0000000c (const dword)  (not used)
SPI_SPEED13                           13  0x0000000d (const dword)  (not used)
SPI_SPEED14                           14  0x0000000e (const dword)  (not used)
SPI_SPEED15                           15  0x0000000f (const dword)  (not used)
SPI_SPEED2                             2  0x00000002 (const dword)  (not used)
SPI_SPEED3                             3  0x00000003 (const dword)  (not used)
SPI_SPEED4                             4  0x00000004 (const dword)  (not used)
SPI_SPEED5                             5  0x00000005 (const dword)  (not used)
SPI_SPEED6                             6  0x00000006 (const dword)  (not used)
SPI_SPEED7                             7  0x00000007 (const dword)  (not used)
SPI_SPEED8                             8  0x00000008 (const dword)  (not used)
SPI_SPEED9                             9  0x00000009 (const dword)  (not used)
spi_Write                           -338  0xfffffeae (PmmC func) args[1] r=0  (not used)
spi_WriteBlock                      -358  0xfffffe9a (PmmC func) args[2] r=0  (not used)
spiflash_BlockErase                 -541  0xfffffde3 (PmmC func) args[3] r=0  (not used)
spiflash_BulkErase                  -540  0xfffffde4 (PmmC func) args[2] r=0  (not used)
spiflash_Exec                       -554  0xfffffdd6 (PmmC func) args[3] r=1  (not used)
spiflash_GetC                       -547  0xfffffddd (PmmC func) args[2] r=1  (not used)
spiflash_GetS                       -551  0xfffffdd9 (PmmC func) args[4] r=1  (not used)
spiflash_GetW                       -549  0xfffffddb (PmmC func) args[2] r=1  (not used)
spiflash_ID                         -539  0xfffffde5 (PmmC func) args[2] r=1  (not used)
spiflash_Image                      -545  0xfffffddf (PmmC func) args[4] r=1  (not used)
spiflash_LoadFunction               -552  0xfffffdd8 (PmmC func) args[2] r=1  (not used)
spiflash_LoadImageControl           -555  0xfffffdd5 (PmmC func) args[2] r=1  (not used)
spiflash_PlayWAV                    -556  0xfffffdd4 (PmmC func) args[2] r=1  (not used)
spiflash_PutC                       -546  0xfffffdde (PmmC func) args[3] r=0  (not used)
spiflash_PutS                       -550  0xfffffdda (PmmC func) args[3] r=1  (not used)
spiflash_PutW                       -548  0xfffffddc (PmmC func) args[3] r=0  (not used)
spiflash_Read                       -543  0xfffffde1 (PmmC func) args[4] r=1  (not used)
spiflash_Run                        -553  0xfffffdd7 (PmmC func) args[3] r=1  (not used)
spiflash_SetAdd                     -542  0xfffffde2 (PmmC func) args[3] r=0  (not used)
spiflash_SIG                        -538  0xfffffde6 (PmmC func) args[2] r=1  (not used)
spiflash_Write                      -544  0xfffffde0 (PmmC func) args[4] r=1  (not used)
SPRINGGREEN                         2031  0x000007ef (const dword)  (not used)
SQRT                                 -62  0xffffffc2 (PmmC func) args[1] r=1  (not used)
STEELBLUE                          17430  0x00004416 (const dword)  (not used)
STR                                  128  0x00000080 (const dword)  (not used)
str_ByteMove                        -487  0xfffffe19 (PmmC func) args[3] r=1  (not used)
str_Cat                             -485  0xfffffe1b (PmmC func) args[2] r=1  (not used)
str_CatN                            -486  0xfffffe1a (PmmC func) args[3] r=1  (not used)
str_Copy                            -488  0xfffffe18 (PmmC func) args[2] r=1  (not used)
str_CopyN                           -489  0xfffffe17 (PmmC func) args[3] r=1  (not used)
str_Find                            -481  0xfffffe1f (PmmC func) args[2] r=1  (not used)
str_FindI                           -482  0xfffffe1e (PmmC func) args[2] r=1  (not used)
str_GetByte                         -475  0xfffffe25 (PmmC func) args[1] r=1  (not used)
str_GetC                            -474  0xfffffe26 (PmmC func) args[2] r=1  (not used)
str_GetD                            -471  0xfffffe29 (PmmC func) args[2] r=1  (not used)
str_GetHexW                         -473  0xfffffe27 (PmmC func) args[2] r=1  (not used)
str_GetW                            -472  0xfffffe28 (PmmC func) args[2] r=1  (not used)
str_GetWord                         -476  0xfffffe24 (PmmC func) args[1] r=1  (not used)
str_Length                          -483  0xfffffe1d (PmmC func) args[1] r=1  (not used)
str_Match                           -479  0xfffffe21 (PmmC func) args[2] r=1  (not used)
str_MatchI                          -480  0xfffffe20 (PmmC func) args[2] r=1  (not used)
str_Printf                          -484  0xfffffe1c (PmmC func) args[2] r=1  (not used)
str_Ptr                             -470  0xfffffe2a (PmmC func) args[1] r=1  (not used)
str_PutByte                         -477  0xfffffe23 (PmmC func) args[2] r=0  (not used)
str_PutWord                         -478  0xfffffe22 (PmmC func) args[2] r=0  (not used)
strheight                            -14  0xfffffff2 (PmmC func) args[0] r=1  (not used)
Strings0Count                          0  0x00000000 (const dword)  (not used)
Strings0Size                           1  0x00000001 (const dword)  (usage 3)
Strings0StartH                         0  0x00000000 (const dword)  (usage 3)
Strings0StartL                     11264  0x00002c00 (const dword)  (usage 3)
Strings10Count                         0  0x00000000 (const dword)  (not used)
Strings10Size                          1  0x00000001 (const dword)  (usage 3)
Strings10StartH                        0  0x00000000 (const dword)  (usage 3)
Strings10StartL                     4608  0x00001200 (const dword)  (usage 3)
Strings11Count                         1  0x00000001 (const dword)  (not used)
Strings11Size                          7  0x00000007 (const dword)  (usage 3)
Strings11StartH                        0  0x00000000 (const dword)  (usage 3)
Strings11StartL                     7680  0x00001e00 (const dword)  (usage 3)
Strings12Count                         0  0x00000000 (const dword)  (not used)
Strings12Size                          1  0x00000001 (const dword)  (usage 3)
Strings12StartH                        0  0x00000000 (const dword)  (usage 3)
Strings12StartL                     1536  0x00000600 (const dword)  (usage 3)
Strings13Count                         0  0x00000000 (const dword)  (not used)
Strings13Size                          1  0x00000001 (const dword)  (usage 3)
Strings13StartH                        0  0x00000000 (const dword)  (usage 3)
Strings13StartL                     6144  0x00001800 (const dword)  (usage 3)
Strings14Size                          0  0x00000000 (const dword)  (not used)
Strings14StartH                        0  0x00000000 (const dword)  (not used)
Strings14StartL                        0  0x00000000 (const dword)  (not used)
Strings15Size                          0  0x00000000 (const dword)  (not used)
Strings15StartH                        0  0x00000000 (const dword)  (not used)
Strings15StartL                        0  0x00000000 (const dword)  (not used)
Strings16Count                         0  0x00000000 (const dword)  (not used)
Strings16Size                          1  0x00000001 (const dword)  (usage 3)
Strings16StartH                        0  0x00000000 (const dword)  (usage 3)
Strings16StartL                     2560  0x00000a00 (const dword)  (usage 3)
Strings17Size                          0  0x00000000 (const dword)  (not used)
Strings17StartH                        0  0x00000000 (const dword)  (not used)
Strings17StartL                        0  0x00000000 (const dword)  (not used)
Strings18Size                          0  0x00000000 (const dword)  (not used)
Strings18StartH                        0  0x00000000 (const dword)  (not used)
Strings18StartL                        0  0x00000000 (const dword)  (not used)
Strings19Size                          0  0x00000000 (const dword)  (not used)
Strings19StartH                        0  0x00000000 (const dword)  (not used)
Strings19StartL                        0  0x00000000 (const dword)  (not used)
Strings1Count                          0  0x00000000 (const dword)  (not used)
Strings1Size                           1  0x00000001 (const dword)  (usage 3)
Strings1StartH                         0  0x00000000 (const dword)  (usage 3)
Strings1StartL                       512  0x00000200 (const dword)  (usage 3)
Strings20Size                          0  0x00000000 (const dword)  (not used)
Strings20StartH                        0  0x00000000 (const dword)  (not used)
Strings20StartL                        0  0x00000000 (const dword)  (not used)
Strings21Size                          0  0x00000000 (const dword)  (not used)
Strings21StartH                        0  0x00000000 (const dword)  (not used)
Strings21StartL                        0  0x00000000 (const dword)  (not used)
Strings22Size                          0  0x00000000 (const dword)  (not used)
Strings22StartH                        0  0x00000000 (const dword)  (not used)
Strings22StartL                        0  0x00000000 (const dword)  (not used)
Strings23Count                         0  0x00000000 (const dword)  (not used)
Strings23Size                          1  0x00000001 (const dword)  (usage 3)
Strings23StartH                        0  0x00000000 (const dword)  (usage 3)
Strings23StartL                     2048  0x00000800 (const dword)  (usage 3)
Strings24Size                          0  0x00000000 (const dword)  (not used)
Strings24StartH                        0  0x00000000 (const dword)  (not used)
Strings24StartL                        0  0x00000000 (const dword)  (not used)
Strings25Size                          0  0x00000000 (const dword)  (not used)
Strings25StartH                        0  0x00000000 (const dword)  (not used)
Strings25StartL                        0  0x00000000 (const dword)  (not used)
Strings26Size                          0  0x00000000 (const dword)  (not used)
Strings26StartH                        0  0x00000000 (const dword)  (not used)
Strings26StartL                        0  0x00000000 (const dword)  (not used)
Strings27Count                         0  0x00000000 (const dword)  (not used)
Strings27Size                          1  0x00000001 (const dword)  (usage 3)
Strings27StartH                        0  0x00000000 (const dword)  (usage 3)
Strings27StartL                     5120  0x00001400 (const dword)  (usage 3)
Strings28Size                          0  0x00000000 (const dword)  (not used)
Strings28StartH                        0  0x00000000 (const dword)  (not used)
Strings28StartL                        0  0x00000000 (const dword)  (not used)
Strings29Size                          0  0x00000000 (const dword)  (not used)
Strings29StartH                        0  0x00000000 (const dword)  (not used)
Strings29StartL                        0  0x00000000 (const dword)  (not used)
Strings2Count                          0  0x00000000 (const dword)  (not used)
Strings2Size                           1  0x00000001 (const dword)  (usage 3)
Strings2StartH                         0  0x00000000 (const dword)  (usage 3)
Strings2StartL                      3072  0x00000c00 (const dword)  (usage 3)
Strings30Size                          0  0x00000000 (const dword)  (not used)
Strings30StartH                        0  0x00000000 (const dword)  (not used)
Strings30StartL                        0  0x00000000 (const dword)  (not used)
Strings31Size                          0  0x00000000 (const dword)  (not used)
Strings31StartH                        0  0x00000000 (const dword)  (not used)
Strings31StartL                        0  0x00000000 (const dword)  (not used)
Strings32Size                          0  0x00000000 (const dword)  (not used)
Strings32StartH                        0  0x00000000 (const dword)  (not used)
Strings32StartL                        0  0x00000000 (const dword)  (not used)
Strings33Size                          0  0x00000000 (const dword)  (not used)
Strings33StartH                        0  0x00000000 (const dword)  (not used)
Strings33StartL                        0  0x00000000 (const dword)  (not used)
Strings34Size                          0  0x00000000 (const dword)  (not used)
Strings34StartH                        0  0x00000000 (const dword)  (not used)
Strings34StartL                        0  0x00000000 (const dword)  (not used)
Strings35Size                          0  0x00000000 (const dword)  (not used)
Strings35StartH                        0  0x00000000 (const dword)  (not used)
Strings35StartL                        0  0x00000000 (const dword)  (not used)
Strings36Size                          0  0x00000000 (const dword)  (not used)
Strings36StartH                        0  0x00000000 (const dword)  (not used)
Strings36StartL                        0  0x00000000 (const dword)  (not used)
Strings37Size                          0  0x00000000 (const dword)  (not used)
Strings37StartH                        0  0x00000000 (const dword)  (not used)
Strings37StartL                        0  0x00000000 (const dword)  (not used)
Strings38Count                         0  0x00000000 (const dword)  (not used)
Strings38Size                          1  0x00000001 (const dword)  (usage 3)
Strings38StartH                        0  0x00000000 (const dword)  (usage 3)
Strings38StartL                     6656  0x00001a00 (const dword)  (usage 3)
Strings39Count                         0  0x00000000 (const dword)  (not used)
Strings39Size                          1  0x00000001 (const dword)  (usage 3)
Strings39StartH                        0  0x00000000 (const dword)  (usage 3)
Strings39StartL                     8192  0x00002000 (const dword)  (usage 3)
Strings3Count                          0  0x00000000 (const dword)  (not used)
Strings3Size                           1  0x00000001 (const dword)  (usage 3)
Strings3StartH                         0  0x00000000 (const dword)  (usage 3)
Strings3StartL                         0  0x00000000 (const dword)  (usage 3)
Strings40Size                          0  0x00000000 (const dword)  (not used)
Strings40StartH                        0  0x00000000 (const dword)  (not used)
Strings40StartL                        0  0x00000000 (const dword)  (not used)
Strings41Size                          0  0x00000000 (const dword)  (not used)
Strings41StartH                        0  0x00000000 (const dword)  (not used)
Strings41StartL                        0  0x00000000 (const dword)  (not used)
Strings42Size                          0  0x00000000 (const dword)  (not used)
Strings42StartH                        0  0x00000000 (const dword)  (not used)
Strings42StartL                        0  0x00000000 (const dword)  (not used)
Strings43Size                          0  0x00000000 (const dword)  (not used)
Strings43StartH                        0  0x00000000 (const dword)  (not used)
Strings43StartL                        0  0x00000000 (const dword)  (not used)
Strings44Count                         0  0x00000000 (const dword)  (not used)
Strings44Size                          1  0x00000001 (const dword)  (usage 3)
Strings44StartH                        0  0x00000000 (const dword)  (usage 3)
Strings44StartL                     8704  0x00002200 (const dword)  (usage 3)
Strings45Size                          0  0x00000000 (const dword)  (not used)
Strings45StartH                        0  0x00000000 (const dword)  (not used)
Strings45StartL                        0  0x00000000 (const dword)  (not used)
Strings46Size                          0  0x00000000 (const dword)  (not used)
Strings46StartH                        0  0x00000000 (const dword)  (not used)
Strings46StartL                        0  0x00000000 (const dword)  (not used)
Strings47Size                          0  0x00000000 (const dword)  (not used)
Strings47StartH                        0  0x00000000 (const dword)  (not used)
Strings47StartL                        0  0x00000000 (const dword)  (not used)
Strings48Count                         0  0x00000000 (const dword)  (not used)
Strings48Size                          1  0x00000001 (const dword)  (usage 3)
Strings48StartH                        0  0x00000000 (const dword)  (usage 3)
Strings48StartL                     5632  0x00001600 (const dword)  (usage 3)
Strings49Count                         1  0x00000001 (const dword)  (not used)
Strings49Size                         12  0x0000000c (const dword)  (usage 3)
Strings49StartH                        0  0x00000000 (const dword)  (usage 3)
Strings49StartL                     9216  0x00002400 (const dword)  (usage 3)
Strings4Size                           0  0x00000000 (const dword)  (not used)
Strings4StartH                         0  0x00000000 (const dword)  (not used)
Strings4StartL                         0  0x00000000 (const dword)  (not used)
Strings50Count                         0  0x00000000 (const dword)  (not used)
Strings50Size                          1  0x00000001 (const dword)  (usage 3)
Strings50StartH                        0  0x00000000 (const dword)  (usage 3)
Strings50StartL                     9728  0x00002600 (const dword)  (usage 3)
Strings51Size                          0  0x00000000 (const dword)  (not used)
Strings51StartH                        0  0x00000000 (const dword)  (not used)
Strings51StartL                        0  0x00000000 (const dword)  (not used)
Strings52Size                          0  0x00000000 (const dword)  (not used)
Strings52StartH                        0  0x00000000 (const dword)  (not used)
Strings52StartL                        0  0x00000000 (const dword)  (not used)
Strings53Count                         0  0x00000000 (const dword)  (not used)
Strings53Size                          1  0x00000001 (const dword)  (usage 3)
Strings53StartH                        0  0x00000000 (const dword)  (usage 3)
Strings53StartL                     7168  0x00001c00 (const dword)  (usage 3)
Strings54Size                          0  0x00000000 (const dword)  (not used)
Strings54StartH                        0  0x00000000 (const dword)  (not used)
Strings54StartL                        0  0x00000000 (const dword)  (not used)
Strings55Count                         0  0x00000000 (const dword)  (not used)
Strings55Size                          1  0x00000001 (const dword)  (usage 3)
Strings55StartH                        0  0x00000000 (const dword)  (usage 3)
Strings55StartL                    10240  0x00002800 (const dword)  (usage 3)
Strings5Size                           0  0x00000000 (const dword)  (not used)
Strings5StartH                         0  0x00000000 (const dword)  (not used)
Strings5StartL                         0  0x00000000 (const dword)  (not used)
Strings6Count                          1  0x00000001 (const dword)  (not used)
Strings6Size                           6  0x00000006 (const dword)  (usage 3)
Strings6StartH                         0  0x00000000 (const dword)  (usage 3)
Strings6StartL                     10752  0x00002a00 (const dword)  (usage 3)
Strings7Count                          0  0x00000000 (const dword)  (not used)
Strings7Size                           1  0x00000001 (const dword)  (usage 3)
Strings7StartH                         0  0x00000000 (const dword)  (usage 3)
Strings7StartL                      3584  0x00000e00 (const dword)  (usage 3)
Strings8Count                          0  0x00000000 (const dword)  (not used)
Strings8Size                           1  0x00000001 (const dword)  (usage 3)
Strings8StartH                         0  0x00000000 (const dword)  (usage 3)
Strings8StartL                      1024  0x00000400 (const dword)  (usage 3)
Strings9Count                          0  0x00000000 (const dword)  (not used)
Strings9Size                           1  0x00000001 (const dword)  (usage 3)
Strings9StartH                         0  0x00000000 (const dword)  (usage 3)
Strings9StartL                      4096  0x00001000 (const dword)  (usage 3)
stringsCV                            114  0x00000072 (mem) word[56] (global)  (usage 27)
strlen                               -10  0xfffffff6 (PmmC func) args[1] r=1  (not used)
strwidth                             -13  0xfffffff3 (PmmC func) args[1] r=1  (not used)
STYLE1                                 2  0x00000002 (const dword)  (not used)
STYLE2                                 3  0x00000003 (const dword)  (not used)
SWAP                                 -56  0xffffffc8 (PmmC func) args[2] r=0  (not used)
sys_DeepSleep                       -405  0xfffffe6b (PmmC func) args[1] r=1  (not used)
sys_Driver                          -531  0xfffffded (PmmC func) args[0] r=0  (not used)
sys_ErrorMessage                    -534  0xfffffdea (PmmC func) args[1] r=1  (not used)
sys_EventQueue                      -396  0xfffffe74 (PmmC func) args[0] r=1  (not used)
sys_EventsPostpone                  -397  0xfffffe73 (PmmC func) args[0] r=0  (not used)
sys_EventsResume                    -398  0xfffffe72 (PmmC func) args[0] r=0  (usage 3)
sys_GetDate                         -401  0xfffffe6f (PmmC func) args[0] r=0  (not used)
sys_GetDateVar                      -528  0xfffffdf0 (PmmC func) args[3] r=0  (not used)
sys_GetTime                         -399  0xfffffe71 (PmmC func) args[0] r=0  (not used)
sys_GetTimer                        -394  0xfffffe76 (PmmC func) args[1] r=1  (not used)
sys_GetTimeVar                      -529  0xfffffdef (PmmC func) args[4] r=0  (not used)
sys_PmmC                            -530  0xfffffdee (PmmC func) args[0] r=0  (not used)
sys_SetDate                         -402  0xfffffe6e (PmmC func) args[3] r=1  (not used)
sys_SetTime                         -400  0xfffffe70 (PmmC func) args[3] r=1  (not used)
sys_SetTimer                        -393  0xfffffe77 (PmmC func) args[2] r=0  (not used)
sys_SetTimerEvent                   -395  0xfffffe75 (PmmC func) args[2] r=1  (not used)
sys_Sleep                           -403  0xfffffe6d (PmmC func) args[1] r=1  (not used)
sys_StoreTouchCalibration           -368  0xfffffe90 (PmmC func) args[0] r=1  (not used)
sys_T                               -391  0xfffffe79 (PmmC func) args[0] r=1  (not used)
sys_T_HI                            -392  0xfffffe78 (PmmC func) args[0] r=1  (not used)
SYS_X_MAX                             44  0x0000002c (const dword)  (not used)
SYS_Y_MAX                             45  0x0000002d (const dword)  (not used)
SYSTEM_TIMER_HI                       35  0x00000023 (const dword)  (not used)
SYSTEM_TIMER_LO                       34  0x00000022 (const dword)  (not used)
t4Dbutton                             30  0x0000001e (const dword)  (usage 312)
TAN                                54705  0x0000d5b1 (const dword)  (not used)
tAngularmeter                          7  0x00000007 (const dword)  (usage 3)
tAniButton                            31  0x0000001f (const dword)  (usage 6)
TB1                                  100  0x00000064 (const dword)  (not used)
TB2                                  101  0x00000065 (const dword)  (not used)
TB3                                  102  0x00000066 (const dword)  (not used)
TB4                                  103  0x00000067 (const dword)  (not used)
tColorPicker                          32  0x00000020 (const dword)  (usage 3)
tCoolgauge                             8  0x00000008 (const dword)  (usage 3)
tCustomdigits                          9  0x00000009 (const dword)  (usage 12)
tDipSwitch                             0  0x00000000 (const dword)  (usage 3)
TEAL                                1040  0x00000410 (const dword)  (not used)
TEXT                               63489  0x0000f801 (const dword)  (not used)
TEXT_ANGLE                            15  0x0000000f (const dword)  (not used)
TEXT_ATTRIBUTES                       13  0x0000000d (const dword)  (not used)
TEXT_BACKGROUND                        1  0x00000001 (const dword)  (not used)
TEXT_BOLD                              9  0x00000009 (const dword)  (not used)
TEXT_COLOUR                            0  0x00000000 (const dword)  (not used)
TEXT_HEIGHT                            4  0x00000004 (const dword)  (not used)
TEXT_HIGHLIGHT                         1  0x00000001 (const dword)  (not used)
TEXT_INVERSE                          11  0x0000000b (const dword)  (not used)
TEXT_ITALIC                           10  0x0000000a (const dword)  (not used)
TEXT_MARGIN                           97  0x00000061 (const dword)  (not used)
TEXT_OPACITY                           8  0x00000008 (const dword)  (not used)
TEXT_PRINTDELAY                        7  0x00000007 (const dword)  (not used)
TEXT_UNDERLINED                       12  0x0000000c (const dword)  (not used)
TEXT_WIDTH                             3  0x00000003 (const dword)  (not used)
TEXT_WRAP                             14  0x0000000e (const dword)  (not used)
TEXT_XGAP                              5  0x00000005 (const dword)  (not used)
TEXT_XPOS                             95  0x0000005f (const dword)  (not used)
TEXT_YGAP                              6  0x00000006 (const dword)  (not used)
TEXT_YPOS                             96  0x00000060 (const dword)  (not used)
tForm                                 10  0x0000000a (const dword)  (usage 15)
tGauge                                11  0x0000000b (const dword)  (usage 3)
tGSlider                               4  0x00000004 (const dword)  (usage 6)
THISTLE                            56827  0x0000ddfb (const dword)  (not used)
tImage                                12  0x0000000c (const dword)  (usage 3)
TIMER0                                 0  0x00000000 (const dword)  (not used)
TIMER1                                 1  0x00000001 (const dword)  (not used)
TIMER2                                 2  0x00000002 (const dword)  (not used)
TIMER3                                 3  0x00000003 (const dword)  (not used)
TIMER4                                 4  0x00000004 (const dword)  (not used)
TIMER5                                 5  0x00000005 (const dword)  (not used)
TIMER6                                 6  0x00000006 (const dword)  (not used)
TIMER7                                 7  0x00000007 (const dword)  (not used)
tKeyboard                             13  0x0000000d (const dword)  (usage 3)
tKnob                                  1  0x00000001 (const dword)  (usage 6)
tLed                                  14  0x0000000e (const dword)  (usage 3)
tLeddigits                            15  0x0000000f (const dword)  (usage 6)
tMagicObject                          34  0x00000022 (const dword)  (usage 6)
tMeter                                16  0x00000010 (const dword)  (usage 3)
TMR0                                  36  0x00000024 (const dword)  (not used)
TMR1                                  37  0x00000025 (const dword)  (not used)
TMR2                                  38  0x00000026 (const dword)  (not used)
TMR3                                  39  0x00000027 (const dword)  (not used)
TMR4                                  40  0x00000028 (const dword)  (not used)
TMR5                                  41  0x00000029 (const dword)  (not used)
TMR6                                  42  0x0000002a (const dword)  (not used)
TMR7                                  43  0x0000002b (const dword)  (not used)
TMul                               24432  0x00005f70 (User func) args[3] r=0  (usage 6)
to                                    -1  0xffffffff (PmmC func) args[1] r=0  (not used)
tolower                              -46  0xffffffd2 (PmmC func) args[1] r=1  (not used)
TOMATO                             64264  0x0000fb08 (const dword)  (not used)
TOP_POS                                3  0x00000003 (const dword)  (not used)
touch_DetectRegion                  -406  0xfffffe6a (PmmC func) args[4] r=0  (not used)
TOUCH_DISABLE                          1  0x00000001 (const dword)  (not used)
TOUCH_ENABLE                           0  0x00000000 (const dword)  (usage 3)
touch_Get                           -408  0xfffffe68 (PmmC func) args[1] r=1  (usage 9)
TOUCH_GETX                             1  0x00000001 (const dword)  (usage 3)
TOUCH_GETY                             2  0x00000002 (const dword)  (usage 3)
TOUCH_MOVING                           3  0x00000003 (const dword)  (usage 3)
TOUCH_PRESSED                          1  0x00000001 (const dword)  (usage 9)
TOUCH_RAW_X                          117  0x00000075 (const dword)  (not used)
TOUCH_RAW_Y                          118  0x00000076 (const dword)  (not used)
TOUCH_REGIONDEFAULT                    2  0x00000002 (const dword)  (not used)
TOUCH_RELEASED                         2  0x00000002 (const dword)  (usage 18)
touch_Set                           -407  0xfffffe69 (PmmC func) args[1] r=0  (usage 3)
TOUCH_STATUS                           0  0x00000000 (const dword)  (usage 3)
touch_TestArea                      -410  0xfffffe66 (PmmC func) args[1] r=1  (not used)
touch_TestBox                       -409  0xfffffe67 (PmmC func) args[1] r=1  (not used)
TOUCH_XMAXCAL                         80  0x00000050 (const dword)  (not used)
TOUCH_XMINCAL                         78  0x0000004e (const dword)  (not used)
TOUCH_YMAXCAL                         81  0x00000051 (const dword)  (not used)
TOUCH_YMINCAL                         79  0x0000004f (const dword)  (not used)
TouchState                           316  0x0000013c (mem) word (global)  (usage 24)
TouchXpos                            310  0x00000136 (mem) word (global)  (usage 15)
TouchYpos                            312  0x00000138 (mem) word (global)  (usage 12)
toupper                              -45  0xffffffd3 (PmmC func) args[1] r=1  (not used)
tPinInput                             29  0x0000001d (const dword)  (usage 6)
tPinOutput                            28  0x0000001c (const dword)  (usage 6)
TRANSPARENCY                          21  0x00000015 (const dword)  (not used)
TRANSPARENT                            0  0x00000000 (const dword)  (usage 3)
TRANSPARENT_COLOUR                    20  0x00000014 (const dword)  (not used)
tRockerSwitch                          2  0x00000002 (const dword)  (usage 3)
tRotarySwitch                          3  0x00000003 (const dword)  (usage 3)
tScope                                25  0x00000019 (const dword)  (not used)
tSmartGauge                           35  0x00000023 (const dword)  (usage 6)
tSmartKnob                            37  0x00000025 (const dword)  (usage 6)
tSmartSlider                          36  0x00000024 (const dword)  (usage 12)
tSounds                               22  0x00000016 (const dword)  (usage 6)
tSpectrum                             24  0x00000018 (const dword)  (usage 3)
tStaticText                           21  0x00000015 (const dword)  (usage 3)
tStrings                              17  0x00000011 (const dword)  (usage 18)
tTank                                 26  0x0000001a (const dword)  (usage 3)
tThermometer                          18  0x00000012 (const dword)  (usage 3)
tTimer                                23  0x00000017 (const dword)  (usage 6)
tTrackbar                              5  0x00000005 (const dword)  (usage 6)
TurnOffButtons                     23382  0x00005b56 (User func) args[1] r=0  (usage 6)
TURQUOISE                          18202  0x0000471a (const dword)  (not used)
tUserButton                           33  0x00000021 (const dword)  (usage 702)
tUserImages                           27  0x0000001b (const dword)  (usage 3)
tUserled                              19  0x00000013 (const dword)  (usage 3)
tVideo                                20  0x00000014 (const dword)  (usage 3)
tWinButton                             6  0x00000006 (const dword)  (usage 12)
txt_Angle                            -33  0xffffffdf (PmmC func) args[1] r=1  (not used)
txt_Attributes                       -31  0xffffffe1 (PmmC func) args[1] r=1  (usage 3)
txt_BGcolour                         -19  0xffffffed (PmmC func) args[1] r=1  (usage 3)
txt_Bold                             -27  0xffffffe5 (PmmC func) args[1] r=1  (not used)
txt_Delay                            -25  0xffffffe7 (PmmC func) args[1] r=1  (not used)
txt_FGcolour                         -18  0xffffffee (PmmC func) args[1] r=1  (usage 3)
TXT_FONT_HEIGHT                      102  0x00000066 (const dword)  (not used)
TXT_FONT_ID                           98  0x00000062 (const dword)  (not used)
TXT_FONT_MAX                          99  0x00000063 (const dword)  (not used)
TXT_FONT_OFFSET                      100  0x00000064 (const dword)  (not used)
TXT_FONT_WIDTH                       101  0x00000065 (const dword)  (not used)
txt_FontBank                         -52  0xffffffcc (PmmC func) args[2] r=1  (not used)
txt_FontID                           -20  0xffffffec (PmmC func) args[1] r=1  (usage 3)
txt_Height                           -22  0xffffffea (PmmC func) args[1] r=1  (not used)
txt_Inverse                          -29  0xffffffe3 (PmmC func) args[1] r=1  (not used)
txt_Italic                           -28  0xffffffe4 (PmmC func) args[1] r=1  (not used)
txt_MoveCursor                       -16  0xfffffff0 (PmmC func) args[2] r=0  (not used)
txt_Opacity                          -26  0xffffffe6 (PmmC func) args[1] r=1  (usage 3)
txt_Set                              -17  0xffffffef (PmmC func) args[2] r=0  (not used)
txt_Underline                        -30  0xffffffe2 (PmmC func) args[1] r=1  (not used)
txt_Width                            -21  0xffffffeb (PmmC func) args[1] r=1  (not used)
txt_Wrap                             -32  0xffffffe0 (PmmC func) args[1] r=1  (not used)
txt_Xgap                             -23  0xffffffe9 (PmmC func) args[1] r=1  (not used)
txt_Ygap                             -24  0xffffffe8 (PmmC func) args[1] r=1  (not used)
uadd_3232                            -71  0xffffffb9 (PmmC func) args[3] r=1  (usage 3)
ucmp_3232                            -75  0xffffffb5 (PmmC func) args[2] r=1  (not used)
UDEC                               17674  0x0000450a (const dword)  (not used)
UDEC1                              16650  0x0000410a (const dword)  (not used)
UDEC1Z                             20746  0x0000510a (const dword)  (not used)
UDEC1ZB                            24842  0x0000610a (const dword)  (not used)
UDEC2                              16906  0x0000420a (const dword)  (not used)
UDEC2Z                             21002  0x0000520a (const dword)  (not used)
UDEC2ZB                            25098  0x0000620a (const dword)  (not used)
UDEC3                              17162  0x0000430a (const dword)  (not used)
UDEC3Z                             21258  0x0000530a (const dword)  (not used)
UDEC3ZB                            25354  0x0000630a (const dword)  (not used)
UDEC4                              17418  0x0000440a (const dword)  (not used)
UDEC4Z                             21514  0x0000540a (const dword)  (not used)
UDEC4ZB                            25610  0x0000640a (const dword)  (not used)
UDEC5                              17674  0x0000450a (const dword)  (not used)
UDEC5Z                             21770  0x0000550a (const dword)  (not used)
UDEC5ZB                            25866  0x0000650a (const dword)  (not used)
UDECZ                              21770  0x0000550a (const dword)  (not used)
UDECZB                             25866  0x0000650a (const dword)  (not used)
udiv_3232                            -74  0xffffffb6 (PmmC func) args[3] r=1  (not used)
umul_1616                            -73  0xffffffb7 (PmmC func) args[3] r=1  (usage 12)
UNCHECKED                              1  0x00000001 (const dword)  (not used)
UNDERLINED                           128  0x00000080 (const dword)  (not used)
unicode_page                         -15  0xfffffff1 (PmmC func) args[3] r=1  (not used)
UP                                     1  0x00000001 (const dword)  (not used)
UpdateObjects                      22035  0x00005613 (User func) args[1] r=0  (usage 6)
usub_3232                            -72  0xffffffb8 (PmmC func) args[3] r=1  (not used)
VIOLET                             60445  0x0000ec1d (const dword)  (not used)
WHEAT                              63222  0x0000f6f6 (const dword)  (not used)
WHITE                              65535  0x0000ffff (const dword)  (usage 6)
WHITESMOKE                         63422  0x0000f7be (const dword)  (not used)
WRITE_CONTRAST                         4  0x00000004 (const dword)  (usage 3)
WRITE_MAGIC_BYTES                      8  0x00000008 (const dword)  (not used)
WRITE_MAGIC_DBYTES                     9  0x00000009 (const dword)  (not used)
WRITE_OBJ                              1  0x00000001 (const dword)  (usage 3)
WRITE_STR                              2  0x00000002 (const dword)  (usage 6)
WRITE_STRU                             3  0x00000003 (const dword)  (usage 6)
WriteCmd                               0  0x00000000 (const dword)  (not used)
WriteObject                        23600  0x00005c30 (User func) args[3] r=0  (usage 24)
X_MAX                                  0  0x00000000 (const dword)  (not used)
X_ORG                                  6  0x00000006 (const dword)  (not used)
X_ORIGIN                              30  0x0000001e (const dword)  (not used)
Y_MAX                                  1  0x00000001 (const dword)  (not used)
Y_ORG                                  7  0x00000007 (const dword)  (not used)
Y_ORIGIN                              31  0x0000001f (const dword)  (not used)
YELLOW                             65504  0x0000ffe0 (const dword)  (not used)
YELLOWGREEN                        40550  0x00009e66 (const dword)  (not used)
